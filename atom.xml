<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JOEL-T99</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-02-02T02:39:42.658Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JOEL-T99</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA（十八）XML</title>
    <link href="http://yoursite.com/2021/02/02/JAVA%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89XML/"/>
    <id>http://yoursite.com/2021/02/02/JAVA%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89XML/</id>
    <published>2021-02-02T02:38:02.000Z</published>
    <updated>2021-02-02T02:39:42.658Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（十七）TCP / UDP 通信协议</title>
    <link href="http://yoursite.com/2021/02/01/JAVA%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89TCP%20:%20UDP%20%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2021/02/01/JAVA%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89TCP%20:%20UDP%20%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</id>
    <published>2021-02-01T05:10:32.000Z</published>
    <updated>2021-02-02T02:34:58.715Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="TCP通信"><a href="#TCP通信" class="headerlink" title="TCP通信"></a>TCP通信</h1><p>TCP协议：传输控制层协议，面向有链接，数据可靠</p><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>Socket通常也称作“套接字”，用于描述IP地址和端口，是一个通信链的句柄。在Internet上的主机一般运行了多个服务软件，同时提供集中服务。每种服务都打开一个Socket，并绑定到一个端口上，不同的端口对应于不同的服务。</p><p>应用程序通常通过“套接字”向网络发出请求或应答网络请求。Ssocket和Serversocket类库位于java.net包中。ServerSocket用于服务端，Socket是创建网络连接时使用的。在连接成功时，应用程序两端都会产生一个Socket实例，操作这个实例，完成所需的会话。</p><h3 id="获取本地地址和端口号"><a href="#获取本地地址和端口号" class="headerlink" title="获取本地地址和端口号"></a>获取本地地址和端口号</h3><p>java.net.Scoket为套接字类，其提供了很多方法，其中我们可以通过获取socket获取本地的地址以及端口号。</p><ul><li><p>其方法为：</p><p><code>int getLocalPort();</code> 用于获取本地使用的端口号</p><p><code>InetAddress getLocalAddress();</code> 用于获取套接字绑定的本地地址</p><p>使用InetAddress获取本地的地址方法：</p><p><code>String getCanonicalHostName();</code> 获取此IP地址的完全限定名</p><p><code>String getHostAddress();</code> 返回IP地址字符串（以文本表现形式）</p></li><li><p>代码如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;localhost&quot;</span>,<span class="number">8088</span>);</span><br><span class="line">InetAddress add = socket.getLocalAddress();<span class="comment">//获取本地信息</span></span><br><span class="line">System.out.println(add.getCanonicalHostName());<span class="comment">// 获取此IP地址的完全限定名</span></span><br><span class="line">System.out.println(add.getHostAddress());<span class="comment">//用于获取套接字绑定的本地地址</span></span><br><span class="line">System.out.println(socket.getLocalPort());<span class="comment">//用于获取本地使用的端口号</span></span><br><span class="line">socket.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="获取远程地址和端口号"><a href="#获取远程地址和端口号" class="headerlink" title="获取远程地址和端口号"></a>获取远程地址和端口号</h3><p>Socket也提供了获取远端的地址以及端口号的方法：</p><ul><li><p>其方法为：</p><p><code>int getPort();</code> 用于获取远端使用的端口号</p><p><code>InetAddress getInetAddress();</code> 用于获取套接字绑定的远端地址</p></li><li><p>代码如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;localhost&quot;</span>,<span class="number">8088</span>);</span><br><span class="line">InetAddress inetadd = socket.getInetAddress();<span class="comment">//获取远端信息</span></span><br><span class="line">System.out.println(inetadd.getCanonicalHostName());<span class="comment">// 获取此IP地址的完全限定名</span></span><br><span class="line">System.out.println(inetadd.getHostAddress());<span class="comment">//用于获取套接字绑定的远端地址</span></span><br><span class="line">System.out.println(socket.getPort());<span class="comment">//用于获取远端使用的端口号</span></span><br><span class="line">socket.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="获取网络输入-输出流"><a href="#获取网络输入-输出流" class="headerlink" title="获取网络输入/输出流"></a>获取网络输入/输出流</h3><p>通过Socket获取输入流与输出流，这两个方法是使用Socket通讯的关键方法。封装了TCP协议的Socket是基于流进行通讯的，所以我们在创建了双方连接后，只需要获取相应的输入与输出流即可实现通讯。</p><ul><li><p>其方法为：</p><p>InputStream getInputStream(); 该方法用于返回此套接字的输入流。</p><p>OutputStream getOutputStream(); 该方法用于返回此套接字的输出流</p></li><li><p>代码如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;localhost&quot;</span>,<span class="number">8088</span>);</span><br><span class="line">   InputStream in = socket.getInputStream();</span><br><span class="line">   OutputStream out = socket.getOutputStream();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="close方法"><a href="#close方法" class="headerlink" title="close方法"></a>close方法</h3><p>当使用Socket进行通讯完毕后，要关闭Socket以释放系统资源。</p><ul><li><p>其方法为：</p><p><code>void close();</code> 关闭Socket以释放资源</p></li></ul><p>当关闭了该套接字后也会同时关闭由此获取的输入流与输出流。</p><p>&nbsp;</p><h1 id="Scoket通讯模块"><a href="#Scoket通讯模块" class="headerlink" title="Scoket通讯模块"></a>Scoket通讯模块</h1><h3 id="Server端ServerSocket监听"><a href="#Server端ServerSocket监听" class="headerlink" title="Server端ServerSocket监听"></a>Server端ServerSocket监听</h3><p>java.net.ServerSocket是运行于服务端应用程序中，通过创建ServerSocket需要指定服务端口号，之后监听Socket的连接。</p><ul><li><p>其方法为：</p><p>Socket accept(); </p></li></ul><p>该方法是一个阻塞方法，直到一个客户端通过Socket连接后，accept会封装一个Socket，该Socket封装的表示该客户端的有关信息，通过这个Socket与客户端进行通信。</p><ul><li><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建ServerSocket并申请服务端口8088</span></span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8088</span>);</span><br><span class="line"><span class="comment">//方法会产生阻塞，知道某个Socket连接，并返回请求连接的Socket</span></span><br><span class="line">Socket socket = server.accept();</span><br></pre></td></tr></table></figure></li></ul><h3 id="Client端的Socket连接"><a href="#Client端的Socket连接" class="headerlink" title="Client端的Socket连接"></a>Client端的Socket连接</h3><p>当服务端ServerSocket调用accept方法阻塞等待客户端连接后，可以通过在客户端应用程序中创建Socket来向服务器发起连接。</p><p>⚠️！注意：创建Socket的同时就发起连接，若连接异常会抛出异常，我们通常创建Socket时会传入fu</p><ul><li>代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数1:服务端的IP地址，参数2:服务端的服务端口</span></span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;localhost&quot;</span>,<span class="number">8088</span>);</span><br></pre></td></tr></table></figure><h3 id="C-S端通信模块"><a href="#C-S端通信模块" class="headerlink" title="C-S端通信模块"></a>C-S端通信模块</h3><p>C-S的全程为（Client-Server）：客户端-服务器端</p><p>客户端与服务端通信模型如下：</p><ul><li>步骤如下：<ol><li>服务端ServerSocket</li><li>通过调用ServerSocket的accept方法监听客户端的连接</li><li>客户端创建Socket并指定服务端的地址以及端口来建立与服务端的连接</li><li>当服务端accept发现客户端连接后，后去对应该客户端的Socket</li><li>双方通过Socket分别获取对应的输入与输出流进行数据通讯</li><li>通讯结束后关闭连接5</li></ol></li></ul><h3 id="Server端多线程模型"><a href="#Server端多线程模型" class="headerlink" title="Server端多线程模型"></a>Server端多线程模型</h3><p>可以创建一个线程类，并将客户端交互的工作全部委托给线程处理，这样就可以实现当一个客户端连接后，启动一线程来负责与客户端的交互，这样我们就可以实现循环不断的监听其他客户端连接。</p><p>&nbsp;</p><h1 id="UDP通信"><a href="#UDP通信" class="headerlink" title="UDP通信"></a>UDP通信</h1><p>UDP协议：用户数据报协议，面向无连接，数据不可靠</p><h2 id="DatagramPacket"><a href="#DatagramPacket" class="headerlink" title="DatagramPacket"></a>DatagramPacket</h2><h3 id="创建接受包"><a href="#创建接受包" class="headerlink" title="创建接受包"></a>创建接受包</h3><p>DatagramPacket：UDP数据报给予IP建立，没太主机有65535个端口号可以使用。数据报中字结束限制为65535-8，包含8字节的头信息。</p><ul><li><p>构造接受包：</p><p><code>DatagramPacket(byte[] buf, int length);</code> 将数据报中Length长的数据装进Buf数组。</p><p><code>DatagramPacket(byte[] buf, int offset, int lenth);</code> 将数据报中从Offset开始、Length长的数据装进Buf数组。</p></li></ul><h3 id="创建发送包"><a href="#创建发送包" class="headerlink" title="创建发送包"></a>创建发送包</h3><ul><li><p>构造发送包：</p><p><code>DatagramPacket(byte[] buf, int length, InetAddress clientAddress, int clientPort);</code> 从buf数组中取出Length长的数据创建数据报对象，目标是clientAddress地址、clientPort端口，常用来发送数据给客户端。</p><p><code>DatagramPacket(byte[] buf, int offset, int length, InetAddress clientAddress, int clientPort);</code> 从buf数组中，取出offset开始、Length长的数据创建数据报对象，目标是clientAddress地址、clientPort端口，常用来发送数据给客户端。</p></li></ul><h2 id="DatagramSocket"><a href="#DatagramSocket" class="headerlink" title="DatagramSocket"></a>DatagramSocket</h2><h3 id="服务端接受"><a href="#服务端接受" class="headerlink" title="服务端接受"></a>服务端接受</h3><p>DatagramSocket用于接受和发送UDP的Socket实例。</p><ul><li>其语法格式为：<code>DatagramSocket(int port);</code></li></ul><p>创建实例，并固定监听Port端口的报文。</p><ul><li><p>其中方法：</p><p><code>receive (DatagramPacket d);</code> 接受数据报文到d中，receive方法产生“阻塞”。会一直等待直到数据被读取到。</p></li></ul><h3 id="客户端发送"><a href="#客户端发送" class="headerlink" title="客户端发送"></a>客户端发送</h3><p>无参的构造方法DaragramSocket()通常用于客户端编程，它并没有特定监听的端口，仅仅使用一个临时的，程序会让操作系统分配一个可用的端口。</p><ul><li><p>其中方法：</p><p><code>send (DatagramPacket dp);</code> 该方法用于发送报文到目的地。</p></li></ul><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（十六）多线程</title>
    <link href="http://yoursite.com/2021/01/31/JAVA%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2021/01/31/JAVA%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-01-31T11:55:47.000Z</published>
    <updated>2021-02-01T06:24:08.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><h2 id="进程与线程-1"><a href="#进程与线程-1" class="headerlink" title="进程与线程"></a>进程与线程</h2><h3 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h3><p>计算机中独立运行的应用程序。</p><p><strong>所谓经常（process）就是一块包含了某些资源的内存区域。操作系统利用进程把它的工作划分为一些功能单元。进程中所包含的一个或多个执行单元为线程（thread）。进程中还拥有一个私有的虚拟地址空间，该空间仅能被所有包含的线程访问。</strong></p><p>线程只能归属于一个进程并且它只能访问该进程所拥有的资源。当操作系统创建一个进程后，该进程会自动申请一个名为主线程或首要线程的进程。操作系统中有若干个线程在“同时”运行。通常，操作系统上运行的每一个应用程序都运行在一个进程中。</p><p>⚠️！注意：进程并不是真正意义上的同时运行，而是并发运行。</p><h3 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h3><p><strong>一个线程是一个进程的顺序执行流。同类的多个线程共享一块内空间和一组系统资源，线程本身有一个供程序执行时的堆栈。</strong>线程在切换时负荷小，因此，线程也被称为轻负荷进程。一个进程中可以包含多个线程。</p><p>线程就是进程中的一个或多个执行流。如果一个进程序列包含多个线程，我们就说这个程序是多个线程的。</p><p>⚠️！注意：切换——线程并发时的一种现象。</p><h3 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h3><p>进程与线程最大的区别：资源共享。</p><ul><li>其区别主要包括：<ol><li>一个进程至少包含一个线程。线程的规划尺度小于进程，使得多个线程程序的并发性高。</li><li>线程在执行过程中与进程的区别在于每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口</li><li>从逻辑上看，多线程的意义在于一个应用程序中，有多个执行部分可以“同时”执行。</li></ol></li></ul><h2 id="并发原理"><a href="#并发原理" class="headerlink" title="并发原理"></a>并发原理</h2><p>多个线程或进程“同时”运行只是人为感官上的理解。</p><p>进程和线程是并发运行的，OS的时间调度机制将时间划分为很多<strong>时间片段</strong>（时间片），尽可能均匀分配给正在运行的程序，获取CPU时间片的线程或进程得以被执行，其他则等待。而CPU则在这些进程或线程上来回切换运行。微观上所有的进程和线程是走走停停的，宏观上都在运行，这种都运行的现象叫并发，但是不是绝对意义上的“同时发生”。</p><p>注：</p><ol><li>之所以这样做是因为CPU只有一个，同一时间只能做一件事情。但随着计算机的发展，出现了多核心CPU。（例如两核心的CPU可以实现真正意义上的两个线程同时运行，但因为CPU的时间片段分配给那个线程或进程是由线程调度决定，所以不一定两个线程是属于同一个进程的，无论如何线程或进程是并发运行的）</li><li>OS：Operating System 操作系统</li><li>线程调度机制是OS提供的一个用于并发处理的程序。Java虚拟机自身也提供了线程调度机制，用于减轻OS切换线程带来的更多负担。</li></ol><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p>对于程序而言，我们实际上关心的是线程而非进程。</p><ul><li>线程在其生命周期中的各个状态：<ol><li><code>New</code>（新建状态）：当创建一个线程时，该线程并没有纳入线程调度，其处于一个new状态。</li><li><code>Runnable</code>（就绪状态）：当调用线程start方法后，该线程将纳入线程调度的控制，其处于一个可运行状态，等待分配时间片段以并发运行。</li><li><code>Running</code>（运行状态）：当该线程分配到了时间片段后被CPU运行，这时线程处于running状态。</li><li><code>Blocked</code>（阻塞状态）：当线程在运行过程中可能会出现阻塞状态，比如等待用户输入信息等。但阻塞状态不是百分百出现的，具体要看代码中是否有相关需求。</li><li><code>Dead</code>（死亡状态）：当线程的任务全部运行完毕，或在运行过程中抛出一个未捕获的异常，那么线程结束，等待GC回收。</li></ol></li></ul><h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><h3 id="使用Thread创建并启动线程"><a href="#使用Thread创建并启动线程" class="headerlink" title="使用Thread创建并启动线程"></a>使用Thread创建并启动线程</h3><p>java.lang.Thread类是线程类，其每一个实例表示一个可以并发运行的线程。我们<strong>通过继承该类并重写run方法来定义一个具体的线程</strong>。其中重写run方法的目的是定义该线程要执行的逻辑。启动线程时调用线程的start()方法而非直接调用run() 方法。start()方法会将当前线程纳入线程调度，适当的线程可以并发运行。当线程获取时间片段后自动开始执行run方法中的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Thread创建线程，需要继承Thread</span></span><br><span class="line">  <span class="comment">//创建和启动线程：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ThreadTest th = <span class="keyword">new</span> ThreadTest();</span><br><span class="line">th.start();<span class="comment">//启动线程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重写run方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是线程&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Runnable创建并启动线程"><a href="#使用Runnable创建并启动线程" class="headerlink" title="使用Runnable创建并启动线程"></a>使用Runnable创建并启动线程</h3><p>实现Runnable接口并重写run方法来定义线程体，在创建线程的时候将Runnable的实例传入并启动线程。</p><p>这样做的好处在于可以将线程要执行的任务分离开减少耦合，同时Java时单继承的，定义一个类实现Runnable接口这样的做法可以更好的趋势线其他父类或接口，因为接口是多继承关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">RunnableTest rt = <span class="keyword">new</span> RunnableTest();</span><br><span class="line"><span class="comment">//重写了run()方法，而其是Thread的方法</span></span><br><span class="line">Thread th = <span class="keyword">new</span> Thread(rt);</span><br><span class="line">th.start();<span class="comment">//启动线程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写run()方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是Runnable！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用内部类创建线程"><a href="#使用内部类创建线程" class="headerlink" title="使用内部类创建线程"></a>使用内部类创建线程</h3><p>通常我们可以通过匿名内部类的方式创建线程，使用该方法可以简化编写代码的复杂度，当一个线程仅需要一个实例时我们通常使用这种方式来创建。</p><ul><li><p>例如：</p><ol><li><p>继承Thread方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">Thread t = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">System.out.println(<span class="string">&quot;我是Thread匿名类&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">t.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承Runnable方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">System.out.println(<span class="string">&quot;我是Runnable匿名类&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line">t.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="线程操作"><a href="#线程操作" class="headerlink" title="线程操作"></a>线程操作</h2><h3 id="Thread-currentThread方法"><a href="#Thread-currentThread方法" class="headerlink" title="Thread.currentThread方法"></a>Thread.currentThread方法</h3><p>Thread的静态方法currentThread方法可以用来获取运行当前代码片段的线程。</p><ul><li><p>其语法格式为：</p><p><code>Thread th  = Thread.currentThread();</code></p></li></ul><h3 id="获取线程信息"><a href="#获取线程信息" class="headerlink" title="获取线程信息"></a>获取线程信息</h3><ul><li>Thread提供了获取线程信息的相关方法：<ol><li><code>long getId();</code> 返回该线程的标识符</li><li><code>String getName();</code> 返回该线程的名称</li><li><code>int getPriority();</code> 返回该线程的优先级</li><li><code>Thread.state getState();</code> 获取线程的状态</li><li><code>boolean isAlive();</code> 测试线程是否处于活动状态</li><li><code>boolean isDaemon();</code> 测试线程是否为守护线程</li><li><code>boolean isInterrupted();</code> 测试线程是否已经中断</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentThreadTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Thread th = Thread.currentThread();</span><br><span class="line">System.out.println(<span class="string">&quot;运行main方法&quot;</span>+Thread.currentThread());</span><br><span class="line">System.out.println(th.getId());<span class="comment">//返回该线程的标识符</span></span><br><span class="line">System.out.println(th.getName());<span class="comment">//返回该线程的名称</span></span><br><span class="line">System.out.println(th.getPriority());<span class="comment">//返回该线程的优先级</span></span><br><span class="line">Thread.State state = th.getState();<span class="comment">//获取该线程的状态</span></span><br><span class="line">System.out.println(state);</span><br><span class="line">System.out.println(th.isAlive());<span class="comment">//线程是否处于活动状态</span></span><br><span class="line">System.out.println(th.isDaemon());<span class="comment">//测试线程是否为守护线程</span></span><br><span class="line">System.out.println(th.isInterrupted());<span class="comment">//测试线程是否中断</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><p>线程的切换是由线程调度控制的，虽然无法通过代码干涉，但是可以提高线程的优先级来最大程度的改善线程获取时间片的几率。</p><p>线程优先级被划分为10级，值分别为1～10，其中1最低、10最高。</p><ul><li>线程提供了三个常量来表示最低、最高以及默认优先级：<ol><li>Thread.Min_PRIORITY</li><li>Thread.Max_PRIORITY</li><li>Thread.NORM_PRIORITY</li></ol></li><li>设置优先级的方法：<br><code>void setPriority(int priority);</code></li></ul><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>守护线程（后台线程）与普通线程在表现上没有区别，其特点是点那个线程中只剩下守护线程时，所有守护线程强行终止。</p><ul><li><p>其语法格式为：<code>void setDaemon(boolean b);</code></p><p>当参数为true时该线程为守护线程</p></li></ul><p>⚠️！注意：设置线程为后台线程要在该线程启动之前设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread daemonThread = <span class="keyword">new</span> Thread();</span><br><span class="line">daemonThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">daemonThread.start();</span><br></pre></td></tr></table></figure><h3 id="sleep方法"><a href="#sleep方法" class="headerlink" title="sleep方法"></a>sleep方法</h3><p>Thread的静态方法sleep用于使当前线程进入阻塞状态。</p><ul><li>其语法格式为：<code>static void sleep(long ms);</code></li></ul><p>该方法会使当前线程进入阻塞状态指定毫秒，当指定毫秒阻塞后，当前线程会重新进入Runnable状态，等待分配时间片。</p><p>该方法声明抛出一个InterruptException。所以使用该方法时需要捕获这个异常。</p><h3 id="yield方法"><a href="#yield方法" class="headerlink" title="yield方法"></a>yield方法</h3><p>Thread的静态方法yield方法用于使当前线程主动让出当前CPU时间片回到Runnable状态，等待分配时间片。</p><ul><li>其语法格式为：static void yield();</li></ul><h3 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h3><p>Thread的方法join方法用于等待当前进程结束，此方法是一个阻塞方法。</p><ul><li><p>其语法格式为：void join();</p><p>该方法声明抛出InterruptException。</p></li></ul><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><h3 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h3><p>ArrayList是非线程同步的。<strong>多个线程并发读写同一个临界资源时会发生“线程并发安全问题”。</strong></p><ul><li>常见的临界资源：<ol><li>多线程共享实例变量</li><li>多线程共享静态公共变量</li></ol></li></ul><p>若想解决线程安全问题，需要将异步的操作变为同步操作。</p><ul><li><p>同步与异步</p><p>所谓异步操作是指多线程并发的操作，相当于各干各的</p><p>所谓同步操作是指有先后顺序的操作，相当于你干完我再干</p></li></ul><p>Java中有一个关键字名为synchronized，该关键字是同步锁，用于将某段代码变为同步操作，从而解决线程并发安全问题。</p><h3 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h3><p>Java提供了一种内置的锁机制来支持原子性：<strong>同步代码块</strong>（synchronized关键字）</p><p>同步代码块包含两部分：一个作为锁的对象的引用，一个作为由这个锁保护的代码块。</p><ul><li><p>其语法格式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监视器——锁对象的引用)&#123;</span><br><span class="line">  ...<span class="comment">//代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>若方法所有代码都需要同步也可以给方法直接加锁。</p><p>注：每个Java对象都可以用作一个实现同步的锁，线程静如同步代码块之前会自动获得锁，并且在退出同步代码块时释放锁，而且无论是通过正常路径退出锁还是通过抛出异常退出哦毒一样，获得内置锁的唯一途径就是进入由这个锁保护的同步代码块或方法。</p><h3 id="选择合适的锁对象-范围"><a href="#选择合适的锁对象-范围" class="headerlink" title="选择合适的锁对象/范围"></a>选择合适的锁对象/范围</h3><h4 id="选择合适的锁对象"><a href="#选择合适的锁对象" class="headerlink" title="选择合适的锁对象"></a>选择合适的锁对象</h4><p>使用synchronized需要对一个锁对象上锁保证线程同步。</p><p>⚠️！注意：这个锁对象应当注意多个需要同步的线程在访问该同步块时，看到的应该是同一个锁对象的引用，否则达不到同步的效果。通常我们会使用this来作为锁对象</p><h4 id="选择合适的锁范围"><a href="#选择合适的锁范围" class="headerlink" title="选择合适的锁范围"></a>选择合适的锁范围</h4><p>在使用同步块时，应当尽量在允许的情况下减少同步范围，以提高并发的执行效率。</p><h3 id="静态方法锁"><a href="#静态方法锁" class="headerlink" title="静态方法锁"></a>静态方法锁</h3><p>当我们对一个静态方法加锁，如：<code>public synchronized static void XXX()&#123;...&#125;</code></p><p>那么该方法锁的对象时类对象。每个类都有唯一的一个类对象。获取对象的方式：<code>ClassName.class;</code></p><p>静态方法与非静态方法同时声明了synchronized，他们之间时非互斥关系的。原因在于，静态方法锁是类对象而非静态方法锁是当前方法所属对象。</p><h2 id="线程安全API与非线程安全API"><a href="#线程安全API与非线程安全API" class="headerlink" title="线程安全API与非线程安全API"></a>线程安全API与非线程安全API</h2><p>StringBuffer 是同步的 synchronized append(); 安全的</p><p>StringBuilder 不是同步的 append();</p><p>相对而言StringBuffer在处理上稍逊于StringBuilder,但是其是线程安全的。当不存在并发时首选应当使用StringBuilder。</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="线程定义"><a href="#线程定义" class="headerlink" title="线程定义"></a>线程定义</h3><p>当一个程序中若创建大量线程，并在任务结束后销毁，会给系统带来过度消耗资源，以及过度切换线程的危险，从而可能导致系统崩溃。为此我们应使用线程池来解决这个问题。</p><ul><li>线程池有两个主要作用:<ol><li>控制线程数量</li><li>重用线程</li></ol></li></ul><p>线程池的概念：首先创建一些线程，它们的集合称为线程池，当服务器接受到一个客户请求后，就从线程池中取出一个空闲的线程为之服务，服务完后不关闭该线程，而是将该线程还回到线程池中。</p><p>在线程池的编程模式下，任务是提交给整个线程池，而不是直接交给某个线程，线程池在拿到任务后，它就在内部找有无空闲的线程，再把任务交给内部某个空闲的线程，任务是提交给整个线程池，一个线程同时只能执行一个任务，但可以同时向一个线程池提交多个任务。</p><h3 id="线程池的管理"><a href="#线程池的管理" class="headerlink" title="线程池的管理"></a>线程池的管理</h3><p>ExecutorService是java提供的用于管理线程池的类。</p><ul><li>线程池有以下几种实现策略:<ol><li>Executors.newCachedThreadPool()<br>创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。</li><li>Executors.newFixedThreadPool(int nThreads)<br>创建一个可重用固定线程集合的线程池，以共享的无界队列方式来运行这些线程。</li><li>Executors.newScheduledThreadPool(int corePoolSize)<br>创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</li><li>Executors.newSingleThreadExecutor()<br>创建一个使用单个 worker 线程的 Executor，以无界队列方式来运行该线程。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建具有30个线程的线程池</span></span><br><span class="line">ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">30</span>);</span><br><span class="line">Runnable r1 = <span class="keyword">new</span> Runable()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">...<span class="comment">//线程体</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//将任务交给线程池，其会分配空闲线程来运行这个任务。</span></span><br><span class="line">threadPool.execute(r1);</span><br></pre></td></tr></table></figure><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（十五）异常处理</title>
    <link href="http://yoursite.com/2021/01/31/JAVA%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2021/01/31/JAVA%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2021-01-31T09:31:25.000Z</published>
    <updated>2021-01-31T11:52:29.963Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="异常处理概述"><a href="#异常处理概述" class="headerlink" title="异常处理概述"></a>异常处理概述</h2><h3 id="使用返回值状态标识异常"><a href="#使用返回值状态标识异常" class="headerlink" title="使用返回值状态标识异常"></a>使用返回值状态标识异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">abc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">      returen str;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h3><p>当程序中抛出一个异常后，程序从程序中导致异常的代码出=处跳出，Java虚拟机检测寻找try关键字匹配的处理异常的catch块。</p><h2 id="异常的捕获和处理"><a href="#异常的捕获和处理" class="headerlink" title="异常的捕获和处理"></a>异常的捕获和处理</h2><h3 id="Throwble-Error-Exception"><a href="#Throwble-Error-Exception" class="headerlink" title="Throwble / Error / Exception"></a>Throwble / Error / Exception</h3><p>Java异常结构中定义有Throwable类，Exception和Error是派生的两个子类。</p><p>Exception表示：网络故障、文件损坏、设备错误、用户输入非法等情况导致的异常，这类异常是可以通过Java异常捕获机制处理的。</p><p>Error表示：Java运行时环境出现的异常，例如JVM内存溢出等。</p><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try_catch"></a>try_catch</h3><p>try{…}语句指定类一段代码，该代码块可以一次捕获并处理范围内的多个异常。在程序执行过程中，该代码块可能会产生并抛出一种或几种类型的异常对象，它后面的catch语句分别对这些异常作出相应的处理。</p><p>如果没有异常产生，所有的catch语句都将被略过不执行。</p><p>在catch语句块中是对异常进行处理的代码。catch中声明的异常对<code>&#123;catch(Exception e)&#125;</code>封装了异常事件发生的信息，在catch语句块中可以使用这个对象的一些方法获取这些信息。</p><ul><li><p>其语法结构为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  ...<span class="comment">//可能出现的异常</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">  ...<span class="comment">//处理该异常的代码块</span></span><br><span class="line">&#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></li></ul><h3 id="多个catch"><a href="#多个catch" class="headerlink" title="多个catch"></a>多个catch</h3><p>每个catch语句块可以伴随一个或多个catch语句，用于处理可能产生的不同类型的异常。catch捕获的异常类型由上至下的捕获异常类型的顺序应是子类到父类（即小到大）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;<span class="keyword">catch</span>(NullPointerException e)&#123;<span class="comment">//子类异常应在上面捕获</span></span><br><span class="line">  ...</span><br><span class="line">&#125;<span class="keyword">catch</span>(RunTimeException e)&#123;<span class="comment">//父类异常在下面捕获</span></span><br><span class="line">  ...</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;<span class="comment">//捕获Exception的异常放最下面</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常在书代码写时，应当做在后一个catch中捕获Exception，这样可以保证代码不会因为出现一个未在catch中声明的异常而导致捕获失败使得程序终止。</p><h3 id="finally的作用"><a href="#finally的作用" class="headerlink" title="finally的作用"></a>finally的作用</h3><p>finally语句为异常处理提供一个统一的出口，使得在控制流程到程序其他部分以前，能够对程序的状态统一管理。</p><p>无论try所指定的程序块中是否抛出异常，finally所指定的代码都要被执行，通常在finally语句中可以进行资源的消除工作，如：关闭打开的文件、删除临时文件等。</p><p><strong>finally语句块只能定义在try语句块之后，或者是最后一个catch语句块之后，且只能定义一次。</strong></p><h3 id="throw关键字"><a href="#throw关键字" class="headerlink" title="throw关键字"></a>throw关键字</h3><p>当程序发生错误而无法处理时，会抛出对应的异常对象，除此之外，在某些时刻，会想要自行抛出异常，例如在异常处理结束后，再将异常抛出，让下一层异常处理区块来捕捉。若想自从抛出异常，可以使用“throw”关键词，并生成指定的异常对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">StringToDate</span><span class="params">(String str)</span> throw PraseException</span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="throws方法的重写"><a href="#throws方法的重写" class="headerlink" title="throws方法的重写"></a>throws方法的重写</h3><p>当使用继承时，在父类的某个方法上生声明了throws抛出某些异常，而在子类中重写该方法时，我们可以使用以下的操作：</p><ol><li>不处理异常（重写方法时不声明throws）</li><li>可仅在throws中声明父类中声明的部分异常</li><li>可以在throws中声明父类方法汇总抛出的异常的子类异常。</li></ol><p>但是不能进行以下操作：</p><ol><li>重写方法时在throws中声明抛出额外的异常</li><li>重写方法时在throws中声明父类方法中声明的抛出异常的父类异常</li></ol><h2 id="Java异常的API"><a href="#Java异常的API" class="headerlink" title="Java异常的API"></a>Java异常的API</h2><h3 id="RuntimeException"><a href="#RuntimeException" class="headerlink" title="RuntimeException"></a>RuntimeException</h3><p><strong>Java 异常可以分为可检测异常和非检测异常。</strong></p><p>可检测异常：可检测异常经编译器验证，对于声明抛出异常的任何方法，编译器将强制执行处理或声明规则，不捕捉这个异常编译器就不通过，不允许编译。</p><p>非检测异常：非检测异常不遵循处理或声明规则。在产生此类异常时，不一定非要采用任何适当操作，编译器不会检测是否已经解决了这样的一个异常。</p><h3 id="常见RuntimeException"><a href="#常见RuntimeException" class="headerlink" title="常见RuntimeException"></a>常见RuntimeException</h3><ul><li><p>常见的其异常包括：</p><p><code>IllegalArgumentException;</code> 抛出的异常表明方法传递了一个不合法或不正确的参数</p><p><code>NullPointerException;</code> 当应用程序试图在需要的地方使用 null 时，抛出该异常</p><p><code>ArrayIndexOutOfBoundsException;</code> 当使用的数组下标超出数组允许范围时，抛出该异常</p><p><code>ClassCastException;</code> 当时图将对象强制转化为不是实例的子类时，抛出该异常</p><p><code>NumberFormatException;</code> 当程序员试图将字符串转换成一种数值类型，但格式不适当时，抛出该异常</p></li></ul><h2 id="Exception常用API"><a href="#Exception常用API" class="headerlink" title="Exception常用API"></a>Exception常用API</h2><h3 id="printStackTrace"><a href="#printStackTrace" class="headerlink" title="printStackTrace"></a>printStackTrace</h3><p>Throwable中定义了一个方法可以输出错误信息，用来跟踪异常事件发生时执行堆栈的内容。</p><ul><li><p>该方法的定义为：</p><p><code>void printStackTrace();</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">  e.printStackTrace();<span class="comment">//输出执行堆栈信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getMessage"><a href="#getMessage" class="headerlink" title="getMessage"></a>getMessage</h3><p>Throwbale中定义了一个方法可以得到有关异常事件的信息。</p><ul><li>该方法的定义为：<br><code>String GetMessage();</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getCause"><a href="#getCause" class="headerlink" title="getCause"></a>getCause</h3><p>很对时候，当一个异常由另一个异常导致异常而被抛出的时候，Java库和开放源代码会将一种异常包装成另一种异常。这时，日志记录和打印根异常就变的非常重要。Java异常提供了getCause()方法来检索导致异常的原因，这些可以对异常根层次的原因提供更多的信息。该Java功能对代码的调试或故障排除有很大的帮助。另外，如果要把一个异常包装成另一种异常，构造一个新异常就要传递源异常。</p><ul><li><p>该方法的定义为：</p><p><code>Throwable getCause();</code> 获取该异常出现的原因</p></li></ul><h2 id="自定义Exception"><a href="#自定义Exception" class="headerlink" title="自定义Exception"></a>自定义Exception</h2><h3 id="自定义异常的意义"><a href="#自定义异常的意义" class="headerlink" title="自定义异常的意义"></a>自定义异常的意义</h3><p>Java异常机制可以保证程序更安全和更健壮。虽然Java类库已经提供了很多可以直接处理异常的类，但是有时候<strong>为了更加精准地捕获和处理异常以呈现更好的用户体验</strong>，需要开发者自定义异常。</p><h3 id="继承Exception自定义异常"><a href="#继承Exception自定义异常" class="headerlink" title="继承Exception自定义异常"></a>继承Exception自定义异常</h3><p>创建自定义异常类，语法格式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class [自定义异常类名] extends Exception&#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="其构造方法的编写"><a href="#其构造方法的编写" class="headerlink" title="其构造方法的编写"></a>其构造方法的编写</h3><p>当定义好自定义异常后，我们可以通过Ecplice来自动生成相应的构造方法。</p><p>具体步骤如下：</p><ol><li>声明个类并继承自Exception</li><li>右键点击score</li><li>选择Generate Constructors form Superclass</li><li>选择父类中所有构造方法后确认生成</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="title">exdents</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message, Throwable cause)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(message, cause);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(Throwable cause)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(cause);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（十四）IO操作</title>
    <link href="http://yoursite.com/2021/01/27/JAVA%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89IO%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2021/01/27/JAVA%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89IO%E6%93%8D%E4%BD%9C/</id>
    <published>2021-01-27T11:46:22.000Z</published>
    <updated>2021-01-31T11:52:25.227Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基本IO操作"><a href="#基本IO操作" class="headerlink" title="基本IO操作"></a>基本IO操作</h1><h2 id="InputStream-OutputStream"><a href="#InputStream-OutputStream" class="headerlink" title="InputStream / OutputStream"></a>InputStream / OutputStream</h2><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><ul><li><p><strong>什么是输入：</strong>输入是一个从外界进入到程序的方向，通常我们需要“读取”外界的数据时，使用输入，所以输入是用来读取数据的。</p></li><li><p><strong>什么是输出：</strong>输出是一个从程序发送到外界的方向，通常我们需要“写出”数据到外界时，使用输出，所以输出是用来写出数据的。</p></li></ul><h3 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h3><p>按照流是否直接与特定的地方（如磁盘、内存、设备等）相连，分别为节点流和处理流。</p><ul><li><strong>节点流：</strong>可以从或向一个特定的地方（节点）读写数据。</li><li><strong>处理流：</strong>是对一个已经存在的流的连接和封装，通过所封装的功能调用实现数据读写。</li></ul><p>处理流的构造方法总是带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称之为流的连接。</p><h3 id="其常用方法"><a href="#其常用方法" class="headerlink" title="其常用方法"></a>其常用方法</h3><p>InputStream是所有<strong>字节输入流</strong>的父类，其定义流基础的读取方法。</p><ul><li><p>常用的方法如下：</p><p><code>int read();</code> 读取一个字节，以int形式返回，该int的“低八位”有效，若返回值为-1则表示EOF。</p><p><code>int read(byte[] d);</code> 尝试最多读取给定数组的length个字节并存入该数组，返回值为实际读取到的字节量。</p></li></ul><p>OutputStream是所有<strong>字节输出流</strong>的父类，其定义流基础的写出方法。</p><ul><li><p>常用的方法如下：</p><p><code>void write(int d);</code> 写出一个字节，写的是给定的int的“低八位”。</p><p><code>void write(byte[] d);</code> 将给定的字节数组中的所有字节全部写出。</p></li></ul><h2 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h2><h3 id="创建FOS对象（重写模式）"><a href="#创建FOS对象（重写模式）" class="headerlink" title="创建FOS对象（重写模式）"></a>创建FOS对象（重写模式）</h3><p>FileOutputStream是文件的<strong>字节输出流</strong>，我们使用该流可以以字节为单位将数据写入文件。</p><ul><li><p>其构造方法为：</p><p><code>FileOutputStream(File file);</code> 创建一个指定File对象表示文件中写入数据的文件输出流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如：</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;demo.txts&quot;</span>);</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br></pre></td></tr></table></figure><p><code>FileOutputStream(String filename);</code> 创建一个向具有指定名称的文件中写入数据的输出文件流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如：</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;demo.txt&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><p>⚠️！注意：若指定的文件已经包含内容，那么当使用FOS对其写入数据时，会将该文件中原有的数据全部去除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//File file = new File(&quot;demo.txts&quot;);</span></span><br><span class="line"><span class="comment">//FileOutputStream fos = new FileOutputStream(file);</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;demo.txt&quot;</span>);</span><br><span class="line"><span class="comment">//在上述文件中添加内容</span></span><br><span class="line">fos.write(<span class="string">&quot;helloworld&quot;</span>.getBytes());</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建FOS对象（追加模式）"><a href="#创建FOS对象（追加模式）" class="headerlink" title="创建FOS对象（追加模式）"></a>创建FOS对象（追加模式）</h3><p>若想在文件的原有数据之后追加新数据则需要以下构造方法创建FOS。</p><ul><li><p>其构造方法为：</p><p><code>FileOutputStream(String file, boolean append);</code>  创建一个指定File对象表示的文件中写入数据文件输出流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;demo.txts&quot;</span>);</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file,<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p><code>FileOutputStream(String filename, boolean append);</code>  创建一个具有指定名称的文件中写入数据的输出文件流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;demo.txt&quot;</span>,<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></li></ul><p>⚠️！注意：以上两个构造方法中，第二个参数若为true，那么通过该FOS写出的数据都是在文件末尾追加的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//第二个参数若为true，那么通过FOS写出的数据都是在文件末尾追加的</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;demo.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//在上述文件中追加内容</span></span><br><span class="line">fos.write(<span class="string">&quot;NiHao&quot;</span>.getBytes());</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建FIS对象"><a href="#创建FIS对象" class="headerlink" title="创建FIS对象"></a>创建FIS对象</h3><p>FileInputStream是文件的<strong>字节输入流</strong>，我们使用该流可以以字节为单位读取文件内容。</p><ul><li><p>其构造方法为：</p><p><code>FileInputStream(File file);</code> 创建用于读取给定的File对象所表示的文件FIS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;demo.txts&quot;</span>);</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br></pre></td></tr></table></figure><p><code>FileInputStream(String name);</code> 创建用于读取给定的文件系统中路径名name所指定的文件的FIS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;demo.txt&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//FileInputStream fis = new FileInputStream(new File(&quot;demo.txt&quot;));</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;demo.txt&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> d = -<span class="number">1</span>;</span><br><span class="line"><span class="comment">//得到每一个字节，一个一个获取</span></span><br><span class="line"><span class="comment">//int read()： 读取一个字节</span></span><br><span class="line"><span class="keyword">while</span>((d=fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">System.out.print((<span class="keyword">char</span>)d);<span class="comment">//强转为char额</span></span><br><span class="line">&#125;</span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="read-和write-int-d-方法"><a href="#read-和write-int-d-方法" class="headerlink" title="read()和write(int d)方法"></a>read()和write(int d)方法</h3><p>FileInputStream继承自InputStream，其提供了以字节为单位读取文件数据的方法read.</p><ul><li><p>其语法格式为：</p><p><code>int read();</code> 从此输入流中读取一个字节，若返回-1则表示EOF（End Of File）</p></li></ul><p>FileOutputStream继承自OutputStream，其提供了以字节为单位向文件写数据的方法write.</p><ul><li><p>其语法格式为：</p><p><code>void write(int d);</code> 将指定字节写入此文件输出流，这里只写给定的int值的“低八位”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;demo.txt&quot;</span>);</span><br><span class="line">fos.write(<span class="string">&#x27;A&#x27;</span>);<span class="comment">//注意：cahr占用两个字节，但这里只写了一个字节</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="read-byte-d-和write-byte-d-方法"><a href="#read-byte-d-和write-byte-d-方法" class="headerlink" title="read(byte[] d)和write(byte[] d)方法"></a>read(byte[] d)和write(byte[] d)方法</h3><p>FileInputStream也支持批量读取字节数据的方法。</p><ul><li><p>其语法格式为：</p><p><code>int read(byte[] d);</code> 从此输入流中将最多d.length个字节的数据读入一个byte数组中</p></li></ul><p>FileOutputStream也支持批量读取字节数据的方法。</p><ul><li><p>其语法格式为：</p><p><code>void write(byte[] d);</code> 将d.length个字节从指定byte数组写入此文件输出流中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;demotxt&quot;</span>);</span><br><span class="line"><span class="keyword">byte</span>[] buf = <span class="string">&quot;HelloWorld&quot;</span>.getBytes();</span><br><span class="line">fos.write(buf);<span class="comment">//会将HelloWorld的所有字节写入文件</span></span><br></pre></td></tr></table></figure></li><li><p>将指定byte数组中从偏移量off开始的len个字节写入文件输出流的方法：</p><p><code>void write(byte[] d, int offset, int len);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;demotxt&quot;</span>);</span><br><span class="line"><span class="keyword">byte</span>[] buf = <span class="string">&quot;HelloWorld&quot;</span>.getBytes();</span><br><span class="line">fos.write(buf,<span class="number">5</span>,<span class="number">5</span>);<span class="comment">//只会将World这个5个字节写入文件</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><h3 id="BOS基本工作原理"><a href="#BOS基本工作原理" class="headerlink" title="BOS基本工作原理"></a>BOS基本工作原理</h3><p>与缓冲输出流相似，在向硬件设备做写出操作时，增大写出次数无疑会降低写出效率，为此我们可以使用缓冲输出流来一次性批量写出若干数据减少写出次数来提高写出效率。</p><ul><li><p><code>BufferedOutputStream</code> <strong>缓冲字节输出流</strong></p><p>其内部维护着一个缓冲区，每当我们向该流写数据时，都会先将数据存入缓冲区，当缓冲区已满时，缓冲流会将数据一次性全部写出。</p></li></ul><h3 id="BOS的flush方法"><a href="#BOS的flush方法" class="headerlink" title="BOS的flush方法"></a>BOS的flush方法</h3><p>使用缓冲输出流可以提高写出效率，但会存在一个问题，即写书数据缺乏即时性。有时需要在执行完某些写出操作后，就希望将这些数据确实写出，而非在缓冲区保存知道缓冲区满后才写出。这时我们可以使用缓冲流的flash方法。</p><ul><li><p>其语法结构为：</p><p><code>void flash();</code> <strong>清空缓冲区</strong>，将缓冲区中的数据强制写出。</p></li></ul><h3 id="BIS基本工作原理"><a href="#BIS基本工作原理" class="headerlink" title="BIS基本工作原理"></a>BIS基本工作原理</h3><p>在读取数据时若以字节为单位读取数据，会导致读取次数过于频繁从而大大降低读取效率。为此我们可以通过提高一次读取的字节量减少读取次数来提高读取的效率。</p><ul><li><p><code>BufferedInputStream</code> <strong>缓冲字节输入流</strong></p><p>其内部维护着一个缓冲区（字节数组），使用该流在读取一个字节时，该流会尽可能多的一次性读取若干字节并存入缓冲区，然后逐一将字节返回，直到缓冲区中的数据被全部读取完毕，会再次读取若干字节从而反复。这样就减少了读取的次数，从而提高了读取效率。</p></li></ul><p>BIS是一个处理流，该流为我们提供了缓冲功能。</p><h3 id="实现缓冲输入输出"><a href="#实现缓冲输入输出" class="headerlink" title="实现缓冲输入输出"></a>实现缓冲输入输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;demo.txt&quot;</span>);</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line"></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;demo1.txt&quot;</span>);</span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"><span class="keyword">int</span> d = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>((d=bis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">bos.write(d);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;复制完毕&quot;</span>);</span><br><span class="line">bos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><h3 id="对象序列化-反序列化"><a href="#对象序列化-反序列化" class="headerlink" title="对象序列化/反序列化"></a>对象序列化/反序列化</h3><p>对象是存在于内存中的。有时候我们需要将对象保存到硬盘上，有时候我们需要将对象传输到另一台计算机上等等这样的操作。这时我们需要将对象转换为一个字节序列，而这个过程就称为对象序列化。相反，我们有这样一个字节序列需要将其转换为对应的对象，这个过程就称为对象的反序列化。</p><h3 id="使用OOS实现对象序列化"><a href="#使用OOS实现对象序列化" class="headerlink" title="使用OOS实现对象序列化"></a>使用OOS实现对象序列化</h3><p>ObjectOutputStream是用来对对象进行序列化的输出流。</p><ul><li><p>其序列化方法为：</p><p><code>void writeObject(Object o);</code> 该方法可以将给定的对象转换为一个字节序列后写出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;Emp.txt&quot;</span>);</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">Emp emp = <span class="keyword">new</span> Emp(<span class="string">&quot;张三&quot;</span>,<span class="number">24</span>,<span class="string">&quot;男&quot;</span>,<span class="number">12000.0</span>);</span><br><span class="line">oos.writeObject(emp);</span><br><span class="line">System.out.println(<span class="string">&quot;序列化完毕&quot;</span>);</span><br><span class="line">oos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用OIS实现对象反序列化"><a href="#使用OIS实现对象反序列化" class="headerlink" title="使用OIS实现对象反序列化"></a>使用OIS实现对象反序列化</h3><p>ObjecInputStream是用来对对对象进行反序列化的输入流。</p><ul><li><p>其反序列化方法为：</p><p><code>Object readObject();</code> 该方法可以从流中读取字节并且转换为对应的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IOException </span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;Emp.txt&quot;</span>);</span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">Emp emp = (Emp)ois.readObject();</span><br><span class="line">System.out.println(<span class="string">&quot;反序列化完毕&quot;</span>);</span><br><span class="line">System.out.println(emp);</span><br><span class="line">ois.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Serializable接口"><a href="#Serializable接口" class="headerlink" title="Serializable接口"></a>Serializable接口</h3><p>ObjectInputStream在对对象进行序列化时有一个要求，就是需要序列化的对象所属的类必需实现Serializable接口。</p><p>实现该接口不需要重写任何方法，其只是作为可序列化的标志。</p><p>通常实现该接口的类需要提供一个常量SerialVersionUID，表明该类的版本。若不显示的声明，在对象序列化时会根据当前类的各个方面计算该类的默认SerialVersionUID，但不同平台编译器实现有所不同，所以若想跨平台，都应显示的声明版本号。</p><p>如果声明的类序列化存到硬盘上，之后随着需求的变化更改了类别的属性（增加或减少或改名），那么当反序列化时，就会出现InvalidClassException,这样就会造成不兼容的问题。但当serialVersionUID相同时，它就会将不一样的file以type的预设值反序列，可避免不兼容性问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br></pre></td></tr></table></figure><h3 id="transient关键字"><a href="#transient关键字" class="headerlink" title="transient关键字"></a>transient关键字</h3><p>对象在序列化后得到的字节序列往往比较大，有时我们在对一个对象进行序列化时可以忽略某些不必要的属性，从而对序列化后得到的字节序列“瘦身”。</p><ul><li><p>关键字：</p><p><code>transient</code> （短暂的）被该关键字修饰的属性在序列化时其值将被忽略。·</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="comment">//通常实现该接口的类需要提供一个常量serialVersionUID，表明该类的版本</span></span><br><span class="line"><span class="comment">//版本号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> age;<span class="comment">//该属性在序列化时将被忽略</span></span><br><span class="line">String gender;</span><br><span class="line"><span class="keyword">double</span> salary;</span><br></pre></td></tr></table></figure><h1 id="文件数据IO操作"><a href="#文件数据IO操作" class="headerlink" title="文件数据IO操作"></a>文件数据IO操作</h1><h2 id="Reader和Writer"><a href="#Reader和Writer" class="headerlink" title="Reader和Writer"></a>Reader和Writer</h2><h3 id="字符流原理"><a href="#字符流原理" class="headerlink" title="字符流原理"></a>字符流原理</h3><p>Reader是所有<strong>字符输入流</strong>的父类，而Writer是所有<strong>字符输出流</strong>的父类。字符流是以字符（char）为单位读写数据的。一次处理一个unicode。字符流都是高级流，其底层都是依靠字节流进行读写数据的，所以底层仍然是基于字节读取数据。</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><p>Reader的常用方法：</p><p>int read(); 读取一个字符，返回int值“低16”有效。</p><p>int read(char[] chs); 从该流中读取一个字符数组length个字符并存入该数组，返回值为实际读取到的字符量。</p></li><li><p>Writer的常用方法：</p><p>void write(int c); 写出一个字符，写出给定int值“低16位“表示的字符</p><p>void write(char[] chs); 将给定字符数组中所有字符写出</p><p>void write(String str); 将给定的字符串写出</p><p>void write(char[] chs, int offset, int len ); 将给定的字符数组中从offset处开始连续的len个字符写出</p></li></ul><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><h3 id="字符转换流原理"><a href="#字符转换流原理" class="headerlink" title="字符转换流原理"></a>字符转换流原理</h3><p>InputStreamReader：<strong>字符输入流</strong>，使用该流可以设置字符集，并按照指定的字符集从流中按照该编码将字节数据转换为字符并输出。</p><p>OutputStreamWriter：<strong>字符输出流</strong>，使用该流可以设置字符集 ，并按照指定的字符集将字符转换为对应字节后通过该流写出。</p><h3 id="指定字符编码"><a href="#指定字符编码" class="headerlink" title="指定字符编码"></a>指定字符编码</h3><ul><li><p>InputStreamReader的构造方法允许我们设置字符集：</p><p>InputStreamReader(InputStream, String charsetName); 基于给定的字节输入流以及字符编码创建isr</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><p>​              InputStreamReader(InputStream in); 会根据系统默认字符集创建isr</p></li><li><p>OutputStreamWriter的构造方法为：<br>OutputStreamReader(OurputStream, String charsetName); //基于给定的字节输出流以及字符编码创建osw</p><p>   OutputStreamReader(InputStream out); 会更具系统默认字符集创建osw</p></li></ul><h3 id="使用OutputStreamWriter"><a href="#使用OutputStreamWriter" class="headerlink" title="使用OutputStreamWriter"></a>使用OutputStreamWriter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//通过创建PrintWriter向文件输出内容</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;demo.txt&quot;</span>);</span><br><span class="line">OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//PrintWriter(OutputStream boolean auto)</span></span><br><span class="line"><span class="comment">//为true时，覆盖原有内容</span></span><br><span class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(osw,<span class="keyword">true</span>);</span><br><span class="line">pw.println(<span class="string">&quot;你好啊!&quot;</span>);</span><br><span class="line">pw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用InputStreamReader"><a href="#使用InputStreamReader" class="headerlink" title="使用InputStreamReader"></a>使用InputStreamReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;demo.txt&quot;</span>);</span><br><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//缓冲字符出入流</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">String str = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//String readLine():连续读取一行</span></span><br><span class="line"><span class="keyword">while</span>((str=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125; </span><br><span class="line">br.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PrintWriter的重载方法"><a href="#PrintWriter的重载方法" class="headerlink" title="PrintWriter的重载方法"></a>PrintWriter的重载方法</h3><p>使用PrintWriter写出字符时我们通常不使用Writer提供的writer()相关方法，而是使用print和println等方法，</p><ul><li>PrintWriter提供的重载方法有：<ol><li>void print(int i); 打印整数</li><li>void print(char c); 打印字符</li><li>void print(boolean b); 打印boolean值</li><li>void print(char[] c); 打印字符数组</li><li>void print(double d); 打印double值</li><li>void print(float f); 打印float值</li><li>void print(long l); 打印long值</li><li>void prnit (String str); 打印字符串</li></ol></li></ul><p>⚠️！注意：这些方法还有类似的println方法，参数与上面相同。</p><h3 id="使用pw输出字符数据"><a href="#使用pw输出字符数据" class="headerlink" title="使用pw输出字符数据"></a>使用pw输出字符数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;demo.txt&quot;</span>);</span><br><span class="line">OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//创建带有自动刷新的pw</span></span><br><span class="line"><span class="comment">//PrintWriter(OutputStream boolean auto)</span></span><br><span class="line"><span class="comment">//为true时，覆盖原有内容</span></span><br><span class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(osw,<span class="keyword">true</span>);</span><br><span class="line">pw.println(<span class="string">&quot;你好啊!&quot;</span>);</span><br><span class="line">pw.close();</span><br></pre></td></tr></table></figure><h2 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h2><h3 id="构建BufferedReader对象"><a href="#构建BufferedReader对象" class="headerlink" title="构建BufferedReader对象"></a>构建BufferedReader对象</h3><p>BufferedReader是<strong>缓冲字符输入流</strong>，其内部提供了缓冲区，可以提高读取效率。</p><ul><li><p>BufferedReader的常用构造方法：</p><p><code>BufferedReader(Reader reader);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;demo.txt&quot;</span>);</span><br><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//缓冲字符出入流</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">String str = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//String readLine():连续读取一行</span></span><br><span class="line"><span class="keyword">while</span>((str=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125; </span><br><span class="line">br.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>⚠️！注意：因为BufferedReader在构造实例时需要传入一个字符流，所以当我们想基于一个字节流进行读取时，要先将字节流转换为字符流。</p><h3 id="使用BR读取字符串"><a href="#使用BR读取字符串" class="headerlink" title="使用BR读取字符串"></a>使用BR读取字符串</h3><p>BufferedReader提供了一个可以便于读取一行字符串的方法。</p><ul><li><p>其语法结构为：</p><p><code>String readLine()</code></p></li></ul><p>该方法连续读取一个字符串，直到读取到换行符为止，返回的字符串中不包含该换行符。若EOF则该方法返回null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;demo.txt&quot;</span>);</span><br><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//缓冲字符出入流</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">String str = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//String readLine():连续读取一行</span></span><br><span class="line"><span class="keyword">while</span>((str=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125; </span><br><span class="line">br.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（十三）文件操作-File</title>
    <link href="http://yoursite.com/2021/01/27/JAVA%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C-File/"/>
    <id>http://yoursite.com/2021/01/27/JAVA%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C-File/</id>
    <published>2021-01-27T03:41:25.000Z</published>
    <updated>2021-01-31T11:52:17.394Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文件操作—File"><a href="#文件操作—File" class="headerlink" title="文件操作—File"></a>文件操作—File</h1><h2 id="File—文件"><a href="#File—文件" class="headerlink" title="File—文件"></a>File—文件</h2><p>java.io.File用于表示文件（目录），可以通过File类在程序上操作硬盘上的文件和目录。</p><p>File类只用于表示文件（目录）的信息（名称、大小），换句话说只能访问文件或目录的相关属性，不能对文件的内容进行访问。</p><h3 id="File-pathname"><a href="#File-pathname" class="headerlink" title="File(pathname)"></a>File(pathname)</h3><ul><li>File提供了较多的构造方法来创建实例，其中之一就是：<code>File(String pathname);</code></li></ul><p>通过将给定路径名字符串转换成抽象路径名来创建一个新File实例。</p><p>提示：抽象路径应尽量使用相对路径，并且目录的层级分隔符不要直接写“/”或“\”，应当使用File.separator这个常量表示，以避免不同系统带来的差异。</p><h3 id="File-parent-child"><a href="#File-parent-child" class="headerlink" title="File(parent, child)"></a>File(parent, child)</h3><ul><li>File的另一个构造方法：<code>File(File parent, String child);</code></li></ul><p>根据parent抽象路径名和child路径名字符串创建一个新的实例。</p><h3 id="isFile-方法"><a href="#isFile-方法" class="headerlink" title="isFile()方法"></a>isFile()方法</h3><p>File的isFile方法用于判断当前File对象表示的是否为一个文件。</p><ul><li>其语法结构为：<code>long length();</code></li></ul><p>该方法返回的long值表示该文件所占有的字节量。</p><h3 id="exists方法"><a href="#exists方法" class="headerlink" title="exists方法"></a>exists方法</h3><p>File的exists方法用于判断此抽象路径名表示的文件或目录是否存在。</p><ul><li>其语法结构为：<code>boolean exists();</code></li></ul><p>若该File表示的文件或目录存在则返回true，否则返回false。</p><h3 id="createNewFile方法"><a href="#createNewFile方法" class="headerlink" title="createNewFile方法"></a>createNewFile方法</h3><p>File的createNewFile方法用于当且仅当不存在具有此抽象路径名指定的名称的文件时，原地创建一个新文件。</p><ul><li>其语法结构为：<code>boolean createNewFile();</code></li></ul><p>返回值：若果指定的文件不存在并成功的创建，则返回true；如果指定的文件已经存在，则返回false。</p><h3 id="delete方法"><a href="#delete方法" class="headerlink" title="delete方法"></a>delete方法</h3><p>File的delete方法用于删除此抽象路径名表示的文件或目录。</p><ul><li>其语法结构为：<code>boolean delete();</code></li></ul><p>返回值：当且仅当成功删除文件或目录时，返回true；否则返回false。</p><p>⚠️！注意：若此File对象所表示的是一个目录时，在删除时需要保证此为空目录才可以成功删除（目录中不能含有任何子项）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;demo.txt&quot;</span>);</span><br><span class="line"><span class="comment">//判断该文件是否不存在，若文件不存在则创建它</span></span><br><span class="line"><span class="keyword">if</span>(!file.exists()) &#123;</span><br><span class="line">file.createNewFile();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将该文件删除</span></span><br><span class="line">file.delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="File—目录"><a href="#File—目录" class="headerlink" title="File—目录"></a>File—目录</h2><h3 id="isDirectory-方法"><a href="#isDirectory-方法" class="headerlink" title="isDirectory()方法"></a>isDirectory()方法</h3><p>File的isDirectory方法用于判断当前File对象表示的是否为一个目录。</p><ul><li>其语法结构为：<code>boolean isDirectory();</code></li></ul><p>返回值：若File对象表示的是一个目录，则返回true。</p><h3 id="mkdir方法"><a href="#mkdir方法" class="headerlink" title="mkdir方法"></a>mkdir方法</h3><p>File的mkdir方法用于创建此抽象路径名指定的目录。</p><ul><li>其语法结构为：<code>boolean mkdir();</code></li></ul><p>返回值：当且仅当以创建目录时，返回true；否则返回false。</p><h3 id="mkdirs方法"><a href="#mkdirs方法" class="headerlink" title="mkdirs方法"></a>mkdirs方法</h3><p>File的mkdirs方法用于创建此抽象路径名指定的目录，包括所有必需但不存在的父目录。⚠️！此操作失败时也可能已经成功创建了一部分必需的父目录。</p><ul><li>其语法结构为：<code>boolean mkdirs;</code></li></ul><p>返回值：当且仅当已创建目录及所有必需的父目录时，返回true；否则返回false。</p><h3 id="listFile方法"><a href="#listFile方法" class="headerlink" title="listFile方法"></a>listFile方法</h3><p>File的listFile方法用于返回一个抽象路径名数组，这些路径名表示此抽象路径名表示的目录中的文件。</p><ul><li>其语法结构为：<code>File[] listFiles();</code></li></ul><p>返回值：抽象路径名数组，这些路径名表示此抽象路径名表示的目录中的文件和目录。如果目录为空，那么数组也将为空。如果抽象路径名不表示一个目录，或发生I/O错误，则返回null。</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">deletefile(file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于删除一个File对象(文件/目录)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deletefile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line"><span class="comment">//将目录中文件返回一个数组</span></span><br><span class="line">File[] sub = file.listFiles();</span><br><span class="line"><span class="comment">//增强for循环遍历</span></span><br><span class="line"><span class="keyword">for</span>(File a : sub) &#123;</span><br><span class="line">a.delete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">file.delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java（十二）集合</title>
    <link href="http://yoursite.com/2021/01/25/Java%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2021/01/25/Java%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E9%9B%86%E5%90%88/</id>
    <published>2021-01-25T06:58:27.000Z</published>
    <updated>2021-01-27T06:42:34.584Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><ul><li>Java提供了一种可以存放一组数据的数据结果，称之为集合</li><li>Collection是一个父接口， 其定义了集合的相关功能</li></ul><h3 id="List-Set"><a href="#List-Set" class="headerlink" title="List / Set"></a>List / Set</h3><ul><li>Collection派生类两个字接口，一个List，另一个是Set</li><li>List是可重复集，该集合允许存放重复元素，所谓的重复并非是同一个元素，而是指equals方法比较为true的元素</li><li>Set是不可重复集，该集合中不能将相同的元素存入集合两次</li></ul><h3 id="集合持有对象的引用"><a href="#集合持有对象的引用" class="headerlink" title="集合持有对象的引用"></a>集合持有对象的引用</h3><ul><li>集合中存储的都是引用类型元素，引用类型变量实际上存储的是对象的地址信息，所以实际上集合只存储了元素对象在堆中的地址，并不是将对象本身存入了集合</li></ul><h3 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h3><ul><li>Collection定义add方法用于向集合中添加新元素</li><li><code>boolean add(E e)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义String类型的集合</span></span><br><span class="line">Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//向集合中添加新元素</span></span><br><span class="line">c.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">c.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">c.add(<span class="string">&quot;Python&quot;</span>);</span><br><span class="line">c.add(<span class="string">&quot;PHP&quot;</span>);</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="contains方法"><a href="#contains方法" class="headerlink" title="contains方法"></a>contains方法</h3><ul><li><p><code>boolean contains(Object o)</code></p><p>用于判断给定的元素是否被包含在集合中，若包含则返回true，不包含返回false</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Collection&lt;Cell&gt; c = <span class="keyword">new</span> ArrayList&lt;Cell&gt;();</span><br><span class="line">c.add(<span class="keyword">new</span> Cell(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">c.add(<span class="keyword">new</span> Cell(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">c.add(<span class="keyword">new</span> Cell(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">c.add(<span class="keyword">new</span> Cell(<span class="number">4</span>,<span class="number">5</span>));</span><br><span class="line">c.add(<span class="keyword">new</span> Cell(<span class="number">5</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">Cell a = <span class="keyword">new</span> Cell(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//判断给定的元素是否被包含在集合中，若包含则返回true，不包含返回false</span></span><br><span class="line"><span class="keyword">boolean</span> flag = c.contains(a);</span><br><span class="line">System.out.println(flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="size-clear-isEmpty"><a href="#size-clear-isEmpty" class="headerlink" title="size / clear / isEmpty"></a>size / clear / isEmpty</h3><ul><li><code>int size();</code> 获取当前集合中元素的总和</li><li><code>void clear();</code> 清空集合</li><li><code>boolean isEmpty();</code> 判断当前集合是否不包含元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">  c.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">  <span class="keyword">int</span> s =c.size();</span><br><span class="line">  System.out.println(s);</span><br><span class="line">  c.clear();</span><br><span class="line">  c.add(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">  System.out.println(c);</span><br><span class="line">  <span class="keyword">boolean</span> i = c.isEmpty();</span><br><span class="line">  System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><h2 id="Collection-1"><a href="#Collection-1" class="headerlink" title="Collection"></a>Collection</h2><h3 id="addAll和containall方法"><a href="#addAll和containall方法" class="headerlink" title="addAll和containall方法"></a>addAll和containall方法</h3><ul><li><p><code>boolean addAll(Collection c)</code></p><p>用于将给定的集合中所有元素添加到当前集合中</p></li><li><p><code>boolean conatinAll(Collection c)</code></p><p>用于判断当前集合是否包含给定集合中的所有元素</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Collection&lt;String&gt; c1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">c1.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">Collection&lt;String&gt; c2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">c2.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">c2.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="comment">//判断给定的元素是否被包含在集合中，若包含则返回true，不包含返回false</span></span><br><span class="line">System.out.println(c1.containsAll(c2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><ul><li>Collection提供了一个遍历集合的通用方法，迭代器</li><li><code>Iterator iterator()</code> 迭代器是一个接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Collection&lt;String&gt; c = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">  c.add(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;php&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">  <span class="comment">//Iterator iterator()迭代器是一个接口</span></span><br><span class="line">  Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line">  <span class="comment">//判断集合是否还有元素可以遍历</span></span><br><span class="line">  <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">    String str = it.next();</span><br><span class="line">    System.out.println(str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hasNext和next方法"><a href="#hasNext和next方法" class="headerlink" title="hasNext和next方法"></a>hasNext和next方法</h3><ul><li><code>boolean hasNext();</code> 判断集合是否含有元素可以遍历</li><li><code>E next()</code> 返回迭代的下一个元素</li><li>迭代器遵循“<strong>先问后取</strong>”的方式。当确定hasNext方法的返回值为true时，再通过next方法取元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Collection&lt;String&gt; c = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">  c.add(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;php&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">  System.out.println(c);</span><br><span class="line">  <span class="comment">//Iterator iterator()迭代器是一个接口</span></span><br><span class="line">  Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line">  <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">    String str = it.next();</span><br><span class="line">    <span class="keyword">if</span>(str.indexOf(<span class="string">&quot;c&quot;</span>) != -<span class="number">1</span>) &#123;  <span class="comment">//检索字母c</span></span><br><span class="line">      it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(c);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h3><ul><li><p><code>void remove()</code></p><p>用于删除迭代器当次从集合中获取的元素</p></li></ul><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><ul><li><p>Java5.0之后推出新特性，增强for循环，也称之为新循环。该循环不通用于传统循环的工作，只用于遍历集合或数组</p></li><li><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (元素类型 e:集合或数组名)&#123;</span><br><span class="line">  循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新循环并非新语法，而是在编译过程中，编译器会将新循环转换为迭代器模式，所以新循环本质上是迭代器</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Collection&lt;Integer&gt; c = <span class="keyword">new</span> HashSet&lt;Integer&gt;(); </span><br><span class="line">  c.add(<span class="number">123</span>);</span><br><span class="line">  c.add(<span class="number">234</span>);</span><br><span class="line">  c.add(<span class="number">345</span>);</span><br><span class="line">  c.add(<span class="number">456</span>);</span><br><span class="line">  c.add(<span class="number">567</span>);</span><br><span class="line">  <span class="comment">//增强for循环</span></span><br><span class="line">  <span class="keyword">for</span>(Integer a : c) &#123;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型机制"><a href="#泛型机制" class="headerlink" title="泛型机制"></a>泛型机制</h2><h3 id="泛型在集合中的应用"><a href="#泛型在集合中的应用" class="headerlink" title="泛型在集合中的应用"></a>泛型在集合中的应用</h3><p>泛型是Java SE 5.0引入的特性，泛型的本质是参数化类型。在类、接口和方法的定义过程中，所操控的数据类型被传入的参数指定。</p><ul><li><p>Java泛型机制广泛应用在集合框架中。所有的集合类型都带有泛型参数，这样在创建集合时可以指定放入集合中的对象类型。Java编译器可以据此进行类型检查。</p></li><li><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如ArrayList，其定义时是这样的：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    … … …                </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;…&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;…&#125;;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">由此我们可以看出，再声明ArrayList时，类名的右侧有一个&lt;E&gt;。“&lt;&gt;”表示泛型，而其中可以使用数字字母下划线（数字不能时第一个字符）来表示泛型的名字。（通常我们使用一个大写字母来表示）这时，在类中声明的方法的参数，返回值类型可以被定义为泛型。这样创建对象可以将类型最为参数传递，此时，类定义所有的E将被替换成传入的参数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//泛型E在这里被指定为String类型</span></span><br><span class="line">list.add(<span class="string">&quot;One&quot;</span>);<span class="comment">//那么add方法的参数就被替换为String类型</span></span><br><span class="line">list.add(<span class="number">100</span>);<span class="comment">//这里就会出现编译错误，因为这里的参数应为String类型。</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="集合操作——线性表"><a href="#集合操作——线性表" class="headerlink" title="集合操作——线性表"></a>集合操作——线性表</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List接口是Collection的子接口，用于定义线性表数据结构；可以将List理解为存放对象的数组，只不过其元素可以动态的增加或减少，并且<strong>List是可重复集</strong>。</p><h3 id="ArrayList-LinkedList"><a href="#ArrayList-LinkedList" class="headerlink" title="ArrayList / LinkedList"></a>ArrayList / LinkedList</h3><p>List接口的两个成见的实现类ArrayList和LinkedList，分别用动态数组和链表实现类接口</p><p>可以认为ArrayList和LinkedList的方法在逻辑上完全一样。只是在性能上有一定的差别。ArrayList更适用于随机访问而LinkedList更适合于插入和删除；在性能要求不是特别苛刻的情形下可以忽略这个差别。</p><h3 id="get与get方法"><a href="#get与get方法" class="headerlink" title="get与get方法"></a>get与get方法</h3><p>List除了继承Collection定义的方法外，还根据其线性表的数据结构定义了一系列方法，其中最常用的就是<strong>基于下标的get和set方法</strong>。</p><ul><li><p><code>E get(int index);</code></p><p>获取集合中指定下标对应的元素，下标从0开始。</p></li><li><p><code>E set(int index, E element);</code></p><p>将给定的元素存入给定的位置，并将原位置的元素返回。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">   <span class="comment">//get方法遍历List</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br><span class="line">String value = list.set(<span class="number">1</span>,<span class="string">&quot;F&quot;</span>);</span><br><span class="line">System.out.println(value);<span class="comment">//b</span></span><br><span class="line">System.out.println(list);<span class="comment">//[a, F, c, d, e]</span></span><br><span class="line">   <span class="comment">//交换位置1和3上的元素</span></span><br><span class="line">   list.set(<span class="number">1</span>, list.set(<span class="number">3</span>, list.get(<span class="number">1</span>)));</span><br><span class="line">System.out.println(list);<span class="comment">//[a, d, c, F, e]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h3><p>List根据<strong>下标</strong>的操作还支持插入与删除操作：</p><ul><li><p><code>Void add(int index,E element);</code></p><p>将给定的元素插入到指定位置，原位置及后续元素顺序向后移动</p></li><li><p><code>E remove (int index);</code></p><p>删除给定位置的元素，并将被删除的元素返回。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="comment">//将下标为1的元素替换为指定元素</span></span><br><span class="line">list.add(<span class="number">1</span>, <span class="string">&quot;D&quot;</span>);</span><br><span class="line">System.out.println(list);<span class="comment">//[a, D, b, c]</span></span><br><span class="line"><span class="comment">//将下标为2的元素删除</span></span><br><span class="line">list.remove(<span class="number">2</span>);</span><br><span class="line">System.out.println(list);<span class="comment">//[a, D, c]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="subList方法"><a href="#subList方法" class="headerlink" title="subList方法"></a>subList方法</h3><p>List的subList方法用于获取子List。</p><p>需要注意的是，subList获取的List与原List<strong>占有相同的储存空间</strong>，对子List的操作会影响原List。</p><ul><li><code>List&lt;E&gt; subList(int formIndex,int toindex);</code>            <strong>含头不含尾</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="comment">//向list中添加数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">list.add(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);<span class="comment">//[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">//找出指定范围的元素，含头不含尾</span></span><br><span class="line"><span class="comment">//subList获取的List和原List占有相同的数据空间</span></span><br><span class="line">List&lt;Integer&gt; sublist = list.subList(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line"><span class="comment">//将提取出来的子表每位*10</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sublist.size(); i++) &#123;</span><br><span class="line">sublist.set(i, sublist.get(i)*<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sublist);<span class="comment">//[30, 40, 50, 60, 70]</span></span><br><span class="line">System.out.println(list);<span class="comment">//[0, 1, 2, 30, 40, 50, 60, 70, 8, 9]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="List转换为数组"><a href="#List转换为数组" class="headerlink" title="List转换为数组"></a>List转换为数组</h3><p>List和toArray方法用于将集合转换为数组。但实际上该方法是在Collection中定义的，所以所有的集合都具备这个功能。</p><ul><li>其有两个方法：<ol><li><code>Object[] toArray();</code></li><li><code>T[] toArray(T[] a);</code></li></ol></li></ul><p>其中第二个是比较常用的，我们可以传入一个指定类型的数组，该数组的元素类型应与集合的元素类型保持一致。返回值则是转换后的数组，该数组会保存集合的所有元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="comment">//将list表通过toArray()方法转换为数组</span></span><br><span class="line"><span class="comment">//传入的数组不需要指定长度</span></span><br><span class="line">String[] arr = list.toArray(<span class="keyword">new</span> String[]&#123;&#125;);</span><br><span class="line">System.out.println(arr.toString());</span><br><span class="line"><span class="comment">//重写toString</span></span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组转换为List"><a href="#数组转换为List" class="headerlink" title="数组转换为List"></a>数组转换为List</h3><p>Arrays类中提供了一个静态方法asList，使用该方法我们将一个数组转换为对应的List集合。</p><ul><li><p>其定义方法为：</p><p><code>Static List&lt;T&gt; asList(T...a);</code></p></li></ul><p>返回的List的集合元素类型由传入的数组的元素类型决定。</p><p>⚠️！注意：返回的集合我们不能对其增删元素，否则会抛出异常。并且对集合的元素进行的修改会影响数组对应的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String[] arr = &#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//将数组arr通过Arrays.asList()方法转换为list表</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(arr);</span><br><span class="line">System.out.println(list);</span><br><span class="line">list.add(<span class="string">&quot;d&quot;</span>);<span class="comment">//抛出异常：UnsupportedOperationException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//java.utilArray$ArrayList</span></span><br><span class="line"><span class="comment">//得到list表的类和名字</span></span><br><span class="line">System.out.println(list.getClass().getName());</span><br><span class="line">List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list2.addAll(list);</span><br><span class="line">System.out.println(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List排序"><a href="#List排序" class="headerlink" title="List排序"></a>List排序</h2><h3 id="Collections-sort方法实现排序"><a href="#Collections-sort方法实现排序" class="headerlink" title="Collections.sort方法实现排序"></a>Collections.sort方法实现排序</h3><p>Collections是集合的工具类，它提供了很多便于我们操作集合的方法。</p><ul><li><p>该方法的定义为：</p><p><code>void sort(List&lt;T&gt; list);</code></p><p>其作用是对集合元素进行自然排序（小至大）。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">  <span class="comment">//随机生成数</span></span><br><span class="line">  Random r = <span class="keyword">new</span> Random();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    list.add(r.nextInt(<span class="number">100</span>));<span class="comment">//nextInt(100):获得100以内的随机数</span></span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(list);<span class="comment">//[76, 98, 24, 13, 44, 16, 50, 57, 20, 21]</span></span><br><span class="line">  Collections.sort(list);</span><br><span class="line">  <span class="comment">//升序排序</span></span><br><span class="line">  System.out.println(list);<span class="comment">//[13, 16, 20, 21, 24, 44, 50, 57, 76, 98]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h3><p>若想对某个集合的元素集合自然排序，该集合的元素有一个要求，就是这些元素必须是Comparable的子类</p><ul><li><p>Comparable是一个接口，用于定义其子类是可比较的，因为该接口有一个抽象方法：</p><p><code>int comparableTo(T t);</code></p></li></ul><p>所有子类都需要重写该方法来定义对象间的比较规律，该方法要求返回一个整数，这个整数不关心具体的值，而是关注取值范围。</p><ol><li>当返回值&gt;0时，表示当前对象比参数给定的对象大</li><li>当返回值&lt;0时，表示当前对象比参数给定的对象小</li><li>当返回值=0时，表示当前对象和参数给定的对象相等</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cell</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Cell</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> row;</span><br><span class="line"><span class="keyword">int</span> col;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cell</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.row = row;</span><br><span class="line"><span class="keyword">this</span>.col = col;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Cell c)</span> </span>&#123;</span><br><span class="line"><span class="comment">//根据row比较大小</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.row - c.row;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么Collections的sort在进行排序时就会根据集合中元素的compareTo方法的返回值来判断大小从而进行自然排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;Cell&gt; cell = <span class="keyword">new</span> ArrayList&lt;Cell&gt;();</span><br><span class="line">cell.add(<span class="keyword">new</span> Cell(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">cell.add(<span class="keyword">new</span> Cell(<span class="number">4</span>,<span class="number">3</span>));</span><br><span class="line">cell.add(<span class="keyword">new</span> Cell(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">Collections.sort(cell);</span><br><span class="line">System.out.println(cell);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="comparator"><a href="#comparator" class="headerlink" title="comparator"></a>comparator</h3><p>一旦Java类实现了Comparable，其比较逻辑就已经确定；如果希望在排序的操作中临时指定比较规定，可以采用Comparator接口回调的方式。</p><ul><li><p>该接口要求实现类必须重写其定义的方法：</p><p><code>int compare(T o1, T o2);</code></p></li></ul><p>该方法的返回值要求，o1&gt;o2则返回值应&gt;0，若o1&lt;o2则返回值应&lt;0，若o1=o2则返回值应为0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;Cell&gt; cell = <span class="keyword">new</span> ArrayList&lt;Cell&gt;();</span><br><span class="line">cell.add(<span class="keyword">new</span> Cell(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">cell.add(<span class="keyword">new</span> Cell(<span class="number">4</span>,<span class="number">3</span>));</span><br><span class="line">cell.add(<span class="keyword">new</span> Cell(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line"><span class="comment">//Comparator为接口</span></span><br><span class="line"><span class="comment">//按照col值的大小排序</span></span><br><span class="line">Collections.sort(cell, <span class="keyword">new</span> Comparator&lt;Cell&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Cell o1, Cell o2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> o1.col-o2.col;&#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(cell);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列和栈"><a href="#队列和栈" class="headerlink" title="队列和栈"></a>队列和栈</h2><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>队列（Queue）时常用的数据结构，可以将队列看成特殊的线性表，队列限制了对线性表的访问方式：只能从线性表的一端添加（offer）元素，另一端取出（poll）元素。</p><p>队列遵循“先进先出”原则。</p><p>JDK中提供了Queue接口，同时使得LinkedList实现了该接口（选择LinkedList实现Queue的原因在于Queue经常要惊醒插入和删除的操作，而LinkedList在这方面效率较高）。</p><ul><li><p>Queue提供了操作队列的相关方法，其主要方法如下：</p><ol><li><p><code>Boolean oft(E e);</code></p><p>将元素添加到队列的末尾，若添加成功返回true</p></li><li><p><code>E poll();</code></p><p>从队首删除并返回该元素</p></li><li><p><code>E peek();</code></p><p>返回队首元素，但不删除</p></li></ol></li></ul><h3 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h3><p>Deque是Queue的子接口，定义了所谓“双端队列”即从队列的两端分别可以入队（offer）和出队（poll），LinkedList实现了该接口。</p><p>如果将Deque限制为只能从一端入队和出队，则可以实现“栈（stack）”的数据结构，对于栈而言，入栈称之为push，出栈称之为pop。</p><p>栈遵循“先进后出”的原则。</p><ul><li><p>Deque提供了操作栈的相关方法，其主要方法如下：</p><ol><li><p><code>void push(E e);</code></p><p>将给定元素“压入”栈汇总，存入的元素会在栈首。即：栈的第一个元素。</p></li><li><p><code>E pop();</code></p><p>将栈首元素删除并返回。</p></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Deque&lt;String&gt; stack = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"><span class="comment">//void push(E e)将给定的元素&quot;压入&quot;栈中</span></span><br><span class="line">stack.push(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">stack.push(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">stack.push(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">System.out.println(stack);</span><br><span class="line">System.out.println(stack.peek());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><p>Java提供了一组可以以键值对（key-value）的形式存储数据的数据结构，这种结构称之为Map。可以Map看成一个多行两列的表格，其中第一列存储key，第二列存储value，而每一行就相当于一组key-value对，表示一组数据结构。</p><p>Map对存入的元素只有一个要求，就是key不能重复，所谓的不能重复指的是Map中不能包含两个equals为true的key。</p><p>Map对于key、value的类型没有严格要求，只要是引用类型均可。但是为了保证在使用时不会造成数据混乱，通常我们会使用泛型去约束key与value的类型。</p><h3 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h3><ul><li>Map提供了一个方法：<code>V put(K k,V v);</code></li></ul><p>该方法的作用是将key-value对存入Map中，因为Map中不允许出现重复的key，所以若当次存入的key已经在Map中存在，则是替换value，而返回值则为被替换的元素。若key不存在，那么返回值就为null。</p><h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><ul><li>Map提供了一个方法：<code>V get(Object key);</code></li></ul><p>该方法的作用是根据给定的key去查找Map中对应的value并返回，若当前Map汇总不包含给定的key，那么返回值为null。</p><h3 id="containKey方法"><a href="#containKey方法" class="headerlink" title="containKey方法"></a>containKey方法</h3><ul><li>其方法定义如下：<code>boolean containsKey(Object key);</code></li></ul><p>若当前Map中包含给定的key（这里检查是否包含是根据key的equals比较结果为依据的）则返回true</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="hash表原理"><a href="#hash表原理" class="headerlink" title="hash表原理"></a>hash表原理</h3><p>HashMap是Map的一个常用的子类实现，其实使用散列算法实现的。</p><p>HashMap内部维护着一个散列数组（就是一个存放元素的数组）称之为散列桶，而当我们向HashMap中存入一组键值对时，HashMap首先获取key这个对象的hashcode()方法的返回值，然后使用该值进行散列算法，得出一个数字，这个数字就是这组键值对要存入散列数组的中的下标位置。</p><p>得到了这个下标位置后，HashMap还会查看散列数组当前位置是否包含该元素。（这里要注意的是，散列数组中每个元素并非是直接存储键值对的，而是存入了一个链表，这个链表中的每个节点才是真实保存这组键值对的）检查是否包含该元素时根据当前要存入的key在当前位散列数组对应位置中的链表里是否已经包含这个key，若不包含则将这组键值对存入链表，否则就替换value。</p><p>那么在获取元素时，HashMap同样先根据hashcode值进行散列算法，找到它在散列数组中的位置，然后进行遍历该位置的链表，找到该key所对应的value之后返回。</p><p>链表中只能存入一个元素，所以实际上，HashMap在放入一组键值对之前，会对这组键值对封装为一个Entry的实例，然后将该实例存入链表。</p><h3 id="hashcode-方法"><a href="#hashcode-方法" class="headerlink" title="hashcode()方法"></a>hashcode()方法</h3><p>HashMap的存取是依赖于key的hashcode方法的返回值的，而hashcode方法实际上是在Object中定义的。</p><ul><li><p>其定义如下：int hashCode();</p></li><li><p>重写一个类的hashcode()方法有以下注意事项：</p><ol><li>若一个类重写了equals方法，那就应当重写hashcode()方法。</li><li>若两个对象equals方法比较为true，那么他们就应当具有相同的hashcode值。</li><li>对于同一个对象而言，在内容没有发生改变的情况下，多次调用hashcode()方法应当总是返回相同的值。</li><li>对于两个对象equals比较为false的，并不要求hashcode值一定不同，但是应尽量保证不同，这样可以提高散列表性能。</li></ol></li></ul><h3 id="装载因子及HashMap优化"><a href="#装载因子及HashMap优化" class="headerlink" title="装载因子及HashMap优化"></a>装载因子及HashMap优化</h3><ul><li>在散列表中有以下名次需要了解：<ol><li>Capacity：容量。hash表里bucket（桶）的数量，也就是散列表的大小</li><li>Initial capacity：初始容量。创建hash表的初始bucket的容量，默认构建容量时16，也可以使用特定容量。</li><li>Size：大小。当前散列表中存储数据的容量</li><li>Load factor：加载因子。默认值0.75（就是75%），向散列表增加数据时如果size/capacity的值大于Local factory则发生扩容并且重新散列（rehash）。</li></ol></li></ul><p>那么加载因子较小时散列查找性能会提高，同时也浪费了散列桶空间容量，0.75的性能和空间相对平衡的结果，在创建散列表时指定合理容量，从而可以减少rehash提高性能。</p><h3 id="有序Map"><a href="#有序Map" class="headerlink" title="有序Map"></a>有序Map</h3><p>Map接口的哈希表和链表实现，具有可预知的迭代顺序。此实现与HashMap的不同在于LinkedHashMap维护着一个双向循环链表。此链表迭代顺序通常就是存放元素的顺序。</p><p>⚠️！注意：如果Map中重新存入已有的key，那么key的位置不会发生改变，只是将value值替换。</p><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java（十一）日期操作</title>
    <link href="http://yoursite.com/2021/01/25/Java%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E6%97%A5%E6%9C%9F%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2021/01/25/Java%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E6%97%A5%E6%9C%9F%E6%93%8D%E4%BD%9C/</id>
    <published>2021-01-25T06:33:25.000Z</published>
    <updated>2021-01-26T00:02:16.222Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="日期操作"><a href="#日期操作" class="headerlink" title="日期操作"></a>日期操作</h1><h3 id="Java中的时间"><a href="#Java中的时间" class="headerlink" title="Java中的时间"></a>Java中的时间</h3><ul><li>Java中的时间使用标准类库Date类表示，是用距离一个固定时间点的毫秒数，表达一个特定的时间点</li></ul><h3 id="Date类的介绍"><a href="#Date类的介绍" class="headerlink" title="Date类的介绍"></a>Date类的介绍</h3><ul><li>java.util.Date类封装日期及时间</li><li>Date类的大多数用于进行时间分量计算方法已经由Calendar取代</li></ul><h3 id="setTime-getTime"><a href="#setTime-getTime" class="headerlink" title="setTime / getTime"></a>setTime / getTime</h3><ul><li><p><code>void setTime(Long time)</code></p><p>用于为一个Date对象设置其需要表示的时间</p></li><li><p><code>Long getTime()</code></p><p>获取一个Date对象表示的时间点，1970.1.1 00:00:00距离此时的毫秒数</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(date);</span><br><span class="line"><span class="keyword">long</span> time = date.getTime();</span><br><span class="line">System.out.println(time);</span><br><span class="line">time += <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">1000</span>;</span><br><span class="line">date.setTime(time);</span><br><span class="line">System.out.println(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Date重写toString"><a href="#Date重写toString" class="headerlink" title="Date重写toString"></a>Date重写toString</h3><ul><li>Date重写同 String方法，用一个字符串来描述当前Date对象所表示的是时间</li></ul><h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><ul><li>是一个以与语言环境有关的方式来格式化解析日期的类</li></ul><h3 id="日期模式匹配字符串"><a href="#日期模式匹配字符串" class="headerlink" title="日期模式匹配字符串"></a>日期模式匹配字符串</h3><table><thead><tr><th>字符</th><th>含义</th><th>实例</th></tr></thead><tbody><tr><td>y</td><td>年</td><td>yyyy年</td></tr><tr><td>M</td><td>月</td><td>MM月</td></tr><tr><td>d</td><td>日</td><td>dd日</td></tr><tr><td>E</td><td>星期</td><td></td></tr><tr><td>a</td><td>上下午</td><td>am上午、pm下午</td></tr><tr><td>H</td><td>24小时制</td><td>HH点</td></tr><tr><td>h</td><td>12小时制</td><td>hh点</td></tr><tr><td>m</td><td>分</td><td>mm分</td></tr><tr><td>s</td><td>秒</td><td>ss秒</td></tr></tbody></table><h3 id="Date与String转化"><a href="#Date与String转化" class="headerlink" title="Date与String转化"></a>Date与String转化</h3><ul><li><p>将Date格式转化为String</p><p><code>String format(Date)</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="comment">//设定输出格式</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//接收</span></span><br><span class="line">String str = sdf.format(date);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>将String格式转化为Date</p><p><code>Date parse(String str)</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">String str = <span class="string">&quot;2021年1月25日 11:39:39&quot;</span>;</span><br><span class="line"><span class="comment">//将中式格式改为国际标准格式</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//抛出异常  throws ParseException</span></span><br><span class="line">Date date = sdf.parse(str);</span><br><span class="line">System.out.println(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h1 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h1><h3 id="Calendar简介"><a href="#Calendar简介" class="headerlink" title="Calendar简介"></a>Calendar简介</h3><ul><li>java.util.Calendar类用于封装日历信息，其主要作用在于时间分量的计算</li><li>Calendar是抽象类。本身不能被实例化</li></ul><h3 id="getInstance方法"><a href="#getInstance方法" class="headerlink" title="getInstance方法"></a>getInstance方法</h3><ul><li><p><code>Calendar getInstance()</code></p><p>该方法根据当前系统所在的区域获取一个适当的Calendar</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Calendar c = Calendar.getInstance();</span><br><span class="line">  System.out.println(c.getClass().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置日期及时间分量"><a href="#设置日期及时间分量" class="headerlink" title="设置日期及时间分量"></a>设置日期及时间分量</h3><ul><li><p><code>void set(int fidel, int value)</code></p><p>可通过对不同的时间分量设置不同的值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line">c.set(Calendar.YEAR, <span class="number">2021</span>);</span><br><span class="line">c.set(Calendar.MONTH, <span class="number">01</span>);</span><br><span class="line">c.set(Calendar.DATE, <span class="number">25</span>);</span><br><span class="line">System.out.println(c.getTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取时间分量对应的值"><a href="#获取时间分量对应的值" class="headerlink" title="获取时间分量对应的值"></a>获取时间分量对应的值</h3><ul><li><p><code>int get(int field)</code></p><p>可以通过对不同的时间分量获取相应的值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line"><span class="keyword">int</span> month = c.get(Calendar.MONTH);</span><br><span class="line">System.out.println(year);</span><br><span class="line">System.out.println(month);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getActualMaximum"><a href="#getActualMaximum" class="headerlink" title="getActualMaximum()"></a>getActualMaximum()</h3><ul><li>用于获取给定时间分量所允许的最大值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="comment">//获取给定时间分量所允许的最大值</span></span><br><span class="line"><span class="keyword">int</span> max = c.getActualMaximum(Calendar.DAY_OF_MONTH);</span><br><span class="line">System.out.println(max);</span><br></pre></td></tr></table></figure><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><ul><li><code>void add(int field, int ammount)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line">c.add(Calendar.DAY_OF_MONTH,<span class="number">7</span>);</span><br><span class="line">System.out.println(c.getTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（十）包装类</title>
    <link href="http://yoursite.com/2021/01/22/JAVA%EF%BC%88%E5%8D%81%EF%BC%89%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <id>http://yoursite.com/2021/01/22/JAVA%EF%BC%88%E5%8D%81%EF%BC%89%E5%8C%85%E8%A3%85%E7%B1%BB/</id>
    <published>2021-01-22T06:17:57.000Z</published>
    <updated>2021-02-02T12:25:30.975Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><h3 id="包装类概述"><a href="#包装类概述" class="headerlink" title="包装类概述"></a>包装类概述</h3><ul><li>Java的8种基本数据类型是以值的形式存在于内存中，而不是对象，不是Object的子类，不能参与面向对象的开发。</li></ul><h3 id="基本类型的包装类"><a href="#基本类型的包装类" class="headerlink" title="基本类型的包装类"></a>基本类型的包装类</h3><table><thead><tr><th>基本类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>java.lang.Byte</td></tr><tr><td>short</td><td>java.lang.Short</td></tr><tr><td>int</td><td>java.lang.Integer</td></tr><tr><td>long</td><td>java.lang.Long</td></tr><tr><td>float</td><td>java.lang.Float</td></tr><tr><td>double</td><td>java.lang.Double</td></tr><tr><td>char</td><td>java.lang.Character</td></tr><tr><td>boolean</td><td>java.lang.Boolean</td></tr></tbody></table><ul><li>其中除了Character和Boolean的父类是Object之外，其余的首饰继承java.lang.Number</li></ul><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><ul><li><p>这些包装类都有一个共性，描述的都是数字</p><p>Number是一个抽象类</p><p>例如：abstract double doubleValue() 以double形式返回指定的数值</p></li></ul><h3 id="Integer常用功能"><a href="#Integer常用功能" class="headerlink" title="Integer常用功能"></a>Integer常用功能</h3><ul><li><p>Java.lang.Integer 是int的包装类，其每一个实例用于描述一个基本int的值</p></li><li><p>Integer 有一个静态方法</p><p>Static int parseInt(String s)</p><p>该方法的作用：将一个描述整数的字符串解析为该整数</p></li></ul><h3 id="Double常用功能"><a href="#Double常用功能" class="headerlink" title="Double常用功能"></a>Double常用功能</h3><ul><li><p>java.lang.Double是double的包装类，其每一个实例用于描述一个基本double的值</p></li><li><p>Double又一个静态方法</p><p>Static double praseDouble(String s)</p><p>该方法的作用：将一个描述浮点数的字符串解析为该整数</p><p>例如：</p><p>String a = “789.99”;</p><p>Double.praseDouble(a)        —&gt;789.99</p></li></ul><h3 id="自动装箱和拆箱操作"><a href="#自动装箱和拆箱操作" class="headerlink" title="自动装箱和拆箱操作"></a>自动装箱和拆箱操作</h3><ul><li><p>当我们需要将一个基本类型转化为包装类型，可以调用包装类的一个静态方法valueOf()；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line">Integer ac = Integer.valueOf(a);<span class="comment">//装箱</span></span><br><span class="line"><span class="keyword">double</span> z = <span class="number">9.9</span>;</span><br><span class="line">Double d = Double.valueOf(z);</span><br></pre></td></tr></table></figure></li><li><p>当我们需要将包装类型转换为基本类，可以调用包装类的xxxValue()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">int</span> n = i.intValue();</span><br><span class="line">Double a = <span class="keyword">new</span> Double(<span class="number">12.34</span>);</span><br><span class="line"><span class="keyword">double</span> x = a.doubleValue();<span class="comment">//拆箱</span></span><br></pre></td></tr></table></figure></li><li><p>Java5.0新特性，引入自动拆装箱操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">123</span>;<span class="comment">//自动装箱</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="keyword">new</span> Integer(<span class="number">123</span>);<span class="comment">//自动拆箱</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（九）Object</title>
    <link href="http://yoursite.com/2021/01/22/JAVA%EF%BC%88%E4%B9%9D%EF%BC%89Object/"/>
    <id>http://yoursite.com/2021/01/22/JAVA%EF%BC%88%E4%B9%9D%EF%BC%89Object/</id>
    <published>2021-01-22T05:53:38.000Z</published>
    <updated>2021-01-25T00:27:49.446Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Bbject"><a href="#Bbject" class="headerlink" title="Bbject"></a>Bbject</h1><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><ul><li>Object类是Java中所有类的顶级父类，如果一个类没有显式的使用extends继承某个类是，默认就是继承自Object类</li></ul><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><ul><li><p>Object类实现的toString方法不具备什么实际意义，所以若我们需要在子类中使用该方法是通常我们会重写它</p></li><li><p>重写toString方法的意义：</p><p>用一个字符串描述当前对象</p></li></ul><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><ul><li>重写equals应遵循几个原则<ol><li>任何对象与null比较都返回false</li><li>两个对象不属于同于个类是应返回false</li><li>同一个对象equals比较应当恒等于true</li><li>其他可以采用自己定义</li></ol></li></ul><h3 id="equals与“-”的区别"><a href="#equals与“-”的区别" class="headerlink" title="equals与“==”的区别"></a>equals与“==”的区别</h3><ul><li><p>“==”是值比较</p><p>对于应用类型变量而言，该变量保存的是对象地址，所以使用“==”比较时，意思为两个变量的地址是否相同，可以理解为两个引用的是否为用一个地址</p></li><li><p>equals时内容比较</p><p>对于两个引用变量而言，是比较两个变量所引用的对象是否相同</p></li><li><p>“==”判断是否为同一个，而“equals”是判断像不像</p></li></ul><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（八）字符串的基本操作</title>
    <link href="http://yoursite.com/2021/01/22/JAVA%EF%BC%88%E5%85%AB%EF%BC%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2021/01/22/JAVA%EF%BC%88%E5%85%AB%EF%BC%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2021-01-22T00:54:24.000Z</published>
    <updated>2021-02-03T12:01:19.091Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="字符串的基本操作"><a href="#字符串的基本操作" class="headerlink" title="字符串的基本操作"></a>字符串的基本操作</h1><h3 id="String及常见API"><a href="#String及常见API" class="headerlink" title="String及常见API"></a>String及常见API</h3><h3 id="String是不可变对象"><a href="#String是不可变对象" class="headerlink" title="String是不可变对象"></a>String是不可变对象</h3><ul><li>Java定义String对象为不可变对象，一旦在内存中创建，内容不能发生改变，若要对字符串改变，那么就会创建新的对象。这样做的目的是可以最大程度上重用相同内容的字符串以减少系统资源开销。</li></ul><h3 id="String常量池"><a href="#String常量池" class="headerlink" title="String常量池"></a>String常量池</h3><ul><li>给一个字符串做初始化时，JVM首先会从字符串的常量池中查询用来保存该字符串的对象是否已经存在，若存在直接引用，若不存在则创建该字符串的对象并存入常量池，然后引用它</li></ul><h3 id="内存编码及长度"><a href="#内存编码及长度" class="headerlink" title="内存编码及长度"></a>内存编码及长度</h3><ul><li>Java存储每一个字符均使用两个字节，都是使用的是 Unicode编码，并且任何一个字符（无论是中文还是英文）每个字符的长度都是1，所以字符串的长度就是该字符串所有的字符个数</li><li><code>int length();</code> 返回当前字符串的长度</li></ul><h3 id="使用-indexOf实现检索"><a href="#使用-indexOf实现检索" class="headerlink" title="使用 indexOf实现检索"></a>使用 indexOf实现检索</h3><ul><li><p><code>int indexOf(int ch)</code></p><p>用来检索给定的一个字符在当前字符串中第一次出现的下标位置</p></li></ul><h3 id="使用-subString-获取字符串"><a href="#使用-subString-获取字符串" class="headerlink" title="使用 subString 获取字符串"></a>使用 subString 获取字符串</h3><ul><li><p><code>String subString(int begin, int end)</code></p><p>用来截取当前字符部分内容以获取这个子字符串。begin代表从哪里开始，end代表是从哪里结束（含头不含尾）</p></li></ul><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><ul><li><p><code>String trim()</code></p><p>将字符串两边的空白去掉</p></li></ul><h3 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h3><ul><li><p><code>char charAt(int index)</code></p><p>用于给定一个下标位置，来获取该字符串中这个位置的字符串</p></li></ul><h3 id="startsWith-和-endsWith"><a href="#startsWith-和-endsWith" class="headerlink" title="startsWith 和 endsWith"></a>startsWith 和 endsWith</h3><ul><li><p><code>boolean startWith(String suffix)</code></p><p>用来判断当前字符串是否是以给定的字符串开始的</p></li><li><p><code>boolean endsWith(String suffix)</code></p><p>用来判断当前字符串是否是以给定的字符串结尾的</p></li></ul><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><ul><li><p><code>String toUpperCase()</code></p><p>用来将当前字符串中的英文部分全部转换为大写</p></li><li><p><code>String toLowerCase()</code></p><p>用来将当前字符串中的英文部分全部转换为小写</p></li></ul><h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h3><ul><li><p>字符串提供了很多重载的valueOf方法，可以将其他基本类型的值以字符串形式描述</p></li><li><p><code>static String valueOf(int i)</code> 返回int参数的字符串表示形式</p></li></ul><h3 id="StringBuilder封装可变字符串"><a href="#StringBuilder封装可变字符串" class="headerlink" title="StringBuilder封装可变字符串"></a>StringBuilder封装可变字符串</h3><ul><li>该类封装了可变的字符串，当我们需要改变字符串内容时，并不会和创建新的对象，而是在原有的基础上修改，从而减少了内存开销</li><li>常用方法：<ol><li><code>append(String Str);</code>        —&gt; 追加字符串</li><li><code>insert(int disOffset, String s);</code>    –&gt; 插入字符串</li><li><code>delete(int start, int end);</code>        —&gt; 删除字符串</li><li><code>replace(int start, int end, String str)</code></li></ol></li></ul><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><ul><li>StringBuilder是可变字符串，StringBuffer也是可变字符串</li><li>区别<ol><li>StringBuffer是线程安全，同步处理的，性能稍慢</li><li>StringBuilder是非线程安全的，并发处理的，性能稍快</li></ol></li></ul><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA （七）抽象类 / 接口 / 多态</title>
    <link href="http://yoursite.com/2021/01/21/JAVA-%EF%BC%88%E4%B8%83%EF%BC%89%E6%8A%BD%E8%B1%A1%E7%B1%BB%20:%20%E6%8E%A5%E5%8F%A3%20:%20%E5%A4%9A%E6%80%81/"/>
    <id>http://yoursite.com/2021/01/21/JAVA-%EF%BC%88%E4%B8%83%EF%BC%89%E6%8A%BD%E8%B1%A1%E7%B1%BB%20:%20%E6%8E%A5%E5%8F%A3%20:%20%E5%A4%9A%E6%80%81/</id>
    <published>2021-01-21T07:03:34.000Z</published>
    <updated>2021-02-02T11:59:24.762Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><h3 id="使用抽象类"><a href="#使用抽象类" class="headerlink" title="使用抽象类"></a>使用抽象类</h3><ul><li><p>抽象方法和抽象类</p><p>由<code>abstract</code>修饰的方法为抽象方法，抽象方法即只有方法的定义，没有方法的实现，由一个分号结尾。即方法五要素缺少了一个（方法体），可以将抽象方法理解为不完整的方法</p></li><li><p>若抽象方法包含在类中，则该类以为抽象类，该类也不完整，抽象类由<code>abstract</code>修饰</p></li><li><p>抽象类是不能实例化对象，而一个类不能被实例化湿没有任何意义的，所以，需要定义类来继承他。而一个类继承了抽象类，则应该重写其抽象方法。</p></li></ul><h3 id="抽象类的意义"><a href="#抽象类的意义" class="headerlink" title="抽象类的意义"></a>抽象类的意义</h3><ul><li>定义抽象类的意义在于：<ol><li>为其子类提供一个公共的类型</li><li>让其子类继承之后完成具体的实现</li></ol></li></ul><p>&nbsp;</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><ul><li>接口可以堪称是特殊的抽象类，即指包含抽象方法的常量的抽象类通过<code>interface</code>关键字来定义接口</li></ul><h3 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h3><ul><li>与继承不同，一个类可以实现多个接口，实现的接口之间用逗号分隔。当然，该类需要实现这些接口中定义的所有方法</li><li>一个类可以通过<code>implements</code>关键字“实现接口”</li></ul><h3 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h3><ul><li><p>接口间可以存在继承关系，一个接口可以过<code>extends</code>关键字继承另外一个接口，子接口继承了父接口定义的所有方法</p></li><li><p>如果在一个类中需要同时继承一个类实现一个或者多个接口时，继承（extends）要写在实现（implements）的前面</p><p>语法：<code>class 类名 extends 父类 implement 接口1，接口2...</code></p></li><li><p>接口可继承多个父接口（即：接口是多继承的）;abstract若没写，系统会自动加上</p><p>语法<code>[修饰符] (abstract) interface 接口名[extends 父接口1,父接口2...]</code></p></li></ul><h3 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h3><ul><li>一个类只能继承一个抽象类，但可以实现多个接口</li><li>抽象类中可以包含抽象方法和非抽象方法，而接口中所有的方法都是抽象的</li><li>子类继承抽象类应该完成抽象类中所有的抽象方法，否则子类也必须是抽象类；子类实现接口则必须完成其所有的抽象方法</li></ul><p>&nbsp;</p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h3 id="多态-1"><a href="#多态-1" class="headerlink" title="多态"></a>多态</h3><ul><li>多态，即多种状态</li><li>一个类型的引用在指向不同的对象是会有不同的实现</li><li>同一个对象，造型成不同的类型时，会有不同的功能</li></ul><h3 id="向上造型"><a href="#向上造型" class="headerlink" title="向上造型"></a>向上造型</h3><ul><li>父类的引用指向子类的对象</li></ul><h3 id="强制转型（向下造型）"><a href="#强制转型（向下造型）" class="headerlink" title="强制转型（向下造型）"></a>强制转型（向下造型）</h3><ul><li>在强制转型中，必须满足两个条件之一，即前后两者必须时继承关系或实现关系。</li><li>使用<code>instanceof</code>关键字实现强制转型，返回true或false</li></ul><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（六）static / final</title>
    <link href="http://yoursite.com/2021/01/21/JAVA%EF%BC%88%E5%85%AD%EF%BC%89static%20:%20final/"/>
    <id>http://yoursite.com/2021/01/21/JAVA%EF%BC%88%E5%85%AD%EF%BC%89static%20:%20final/</id>
    <published>2021-01-21T01:06:23.000Z</published>
    <updated>2021-02-04T05:10:43.565Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><h3 id="static修饰成员变量"><a href="#static修饰成员变量" class="headerlink" title="static修饰成员变量"></a>static修饰成员变量</h3><ul><li>static关键字可以修饰成员变量，它所修饰的成员变量不属于对象的数据结构，而是属于类的变量，通常通过类名来引用static成员</li><li>当创建对象后，成员变量是存储在堆中的，而static成员变量和类的信息一样一起存储在方法区中</li><li>一个类的static成员变量中有“一份”（存储在方法区）无论该类创建了多少个对象</li></ul><h3 id="static修饰属性"><a href="#static修饰属性" class="headerlink" title="static修饰属性"></a>static修饰属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当加载类时就会优先初始化t变量，所以是在运行期前初始化空间。</span></span><br><span class="line">    <span class="comment">//在此之后使用Test.t = &quot;test2&quot;这样的语句，可以修改成功。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String t = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static修饰方法"><a href="#static修饰方法" class="headerlink" title="static修饰方法"></a>static修饰方法</h3><ul><li>static修饰的方法称之为静态方法，而静态方法不会涉及具体的某一个对象，只是当前完成了一件共有的逻辑</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可以通过Test.main()来进行调用。也是在加载字节码时初始化。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static块（静态块）"><a href="#static块（静态块）" class="headerlink" title="static块（静态块）"></a>static块（静态块）</h3><ul><li>static块属于类的代码块，在类的加载期间执行的，只执行一次。可以用来在软件中加载静态资源（图像、音频等）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 修饰静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><h3 id="final修饰变量"><a href="#final修饰变量" class="headerlink" title="final修饰变量"></a>final修饰变量</h3><ul><li>final关键字修饰的变量，意为不可改变。final可以修饰成员变量，也可以修饰局部变量。</li></ul><h3 id="final修饰方法"><a href="#final修饰方法" class="headerlink" title="final修饰方法"></a>final修饰方法</h3><ul><li>final关键字修饰的方法不可以被重写。</li></ul><h3 id="final修饰类"><a href="#final修饰类" class="headerlink" title="final修饰类"></a>final修饰类</h3><ul><li>final修饰的类不可以被继承</li></ul><h3 id="final修饰变量-1"><a href="#final修饰变量-1" class="headerlink" title="final修饰变量"></a>final修饰变量</h3><ul><li>final修饰的变量不能被改变</li></ul><h2 id="static-final-常量"><a href="#static-final-常量" class="headerlink" title="static final 常量"></a>static final 常量</h2><ul><li>static final 修饰的成员变量成为常量，必须声明同时初始化，并且不可被改变，常量建议所有字母大写</li></ul><div class="note warning flat"><p>static final和final static没什么区别，一般static写在前面。</p></div><blockquote><p>static final和final static没什么区别，一般static写在前面。</p></blockquote><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>工具类的使用</title>
    <link href="http://yoursite.com/2021/01/20/JAVA%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2021/01/20/JAVA%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-20T14:46:58.000Z</published>
    <updated>2021-01-21T00:21:19.295Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Arrays类的使用"><a href="#Arrays类的使用" class="headerlink" title="Arrays类的使用"></a>Arrays类的使用</h1><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><ul><li><p><strong>toString：</strong>对数组进行遍历查看，返回的是一个字符串，这个比字符串好看。</p><p>包含：<code>boolean[] a</code>、<code>byte[] a</code>、<code>char[] a</code>、<code>double[] a</code>、<code>float[] a</code>、<code>int[] a</code>、<code>long[] a</code>、<code>short[] a</code>、<code>Object[] a</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">35</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><ul><li><strong>sort：</strong>对数组升序排列</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">35</span>&#125;;</span><br><span class="line">    <span class="comment">//排序---&gt;sort:升序</span></span><br><span class="line">    Arrays.sort(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="binarySearch"><a href="#binarySearch" class="headerlink" title="binarySearch"></a>binarySearch</h3><ul><li><p><strong>binarySearch：</strong>二分法查找</p><p> 找出指定数组中的指定元素对应 的索引</p></li><li><p>前提：只能查看有序数组</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    Arrays.sort(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">System.out.println(Arrays.binarySearch(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="copeOf"><a href="#copeOf" class="headerlink" title="copeOf"></a>copeOf</h3><ul><li><p><strong>copeOf：</strong>完成数组的复制</p><p><strong>(arr,int)：</strong>(数组名,复制的长度)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] newArr = Arrays.copyOf(arr,<span class="number">4</span>); </span><br><span class="line">System.out.println(Arrays.toString(newArr));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="copeOfRange"><a href="#copeOfRange" class="headerlink" title="copeOfRange"></a>copeOfRange</h3><ul><li><p><strong>copeOfRange：</strong>区间复制</p><p><strong>(arr,1,4)：</strong>(数组名,开始位置,终止位置)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] newArr = Arrays.copyOfRange(arr,<span class="number">1</span>,<span class="number">4</span>); <span class="comment">//---[1,4):左包含，右不包含 </span></span><br><span class="line">System.out.println(Arrays.toString(newArr));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h3><ul><li><strong>equals：</strong>比较两个数组的值是否一样，若一样则返回true，否则返回false</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr1 = &#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] arr2 = &#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">Arrays.equals(arr1,arr2);<span class="comment">//true: 比较左右两侧的数值是否相等</span></span><br><span class="line">System.out.println(arr1 == arr2);<span class="comment">//false: ==比较左右两侧的地址 值是否相等</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><ul><li><p><strong>fill：</strong> 进行数组的填充</p><p><strong>(arr, int)：</strong>(数组名,填充的数据)</p><p>(arr,int,int,int)：（数组名,起始位置,终止位置,填充的数据）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">Arrays.fill(arr, <span class="number">10</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">    Arrays.fill(arr, <span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（五）访问控制</title>
    <link href="http://yoursite.com/2021/01/20/JAVA%EF%BC%88%E4%BA%94%EF%BC%89%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/2021/01/20/JAVA%EF%BC%88%E4%BA%94%EF%BC%89%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</id>
    <published>2021-01-20T07:35:36.000Z</published>
    <updated>2021-02-04T04:44:56.101Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="package语句"><a href="#package语句" class="headerlink" title="package语句"></a>package语句</h3><p>包的概念，定义类时需要指定类的名称，但是如果仅仅将类名作为类的唯一标识，则不可避免会出现冲突的问题。在Java语句中命名冲突问题可以用包名来解决。</p><p>在定义一个类时，除了定义类的名称一般还要指定一个包名。</p><p>类的全名称：<code>包名.类名</code></p><h3 id="import语句"><a href="#import语句" class="headerlink" title="import语句"></a>import语句</h3><p>访问一个类时需要使用该类的全名，但这样书写过于麻烦，可以过import语句对类的全程进行声明。通过import语句声明类类的全程后，可以直接使用类名。</p><p>引用依赖，导包</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>对外提供可调用的、稳定的功能。</p><p>封装容易变化的、具体的细节，外界不可访问，这样的意义在于：</p><ol><li>降低代码出错的可能性，便于维护</li><li>当内部的实现细节改变时，只要保证对外的功能定义不变，其他的模块就不会因此收到牵连。</li></ol><h3 id="public和private"><a href="#public和private" class="headerlink" title="public和private"></a>public和private</h3><p>public和private是最常用的两个修饰符</p><p>private修饰的成员变量和方法只能在本类中访问</p><p>public修饰的成员变量和方法可以在任何地方调用</p><p>public修饰的内容是对外提供可以被调用 的功能，需要相对稳定</p><p>private修饰的内容是对内实现的封装，如果“公开”会增加维护成本</p><h3 id="protected和默认"><a href="#protected和默认" class="headerlink" title="protected和默认"></a>protected和默认</h3><p>protected修饰的成员变量和方法可以被子类及同包类使用</p><p>默认访问控制即不写任何访问控制符，默认修饰的成员变量和方法可以被同一个包中的类调用。</p><h3 id="访问控制符修饰类"><a href="#访问控制符修饰类" class="headerlink" title="访问控制符修饰类"></a>访问控制符修饰类</h3><p>public和默认修饰符可以修饰类</p><p>protected和private不能修饰类（可以用于修饰内部类）</p><h3 id="四者修饰的“成员”"><a href="#四者修饰的“成员”" class="headerlink" title="四者修饰的“成员”"></a>四者修饰的“成员”</h3><table><thead><tr><th>修饰符</th><th>本类</th><th>同包类</th><th>子类</th><th>其他类</th></tr></thead><tbody><tr><td>public</td><td>可以访问</td><td>可以访问</td><td>可以访问</td><td>可以访问</td></tr><tr><td>protected</td><td>可以访问</td><td>可以访问</td><td>可以访问</td><td>不可以</td></tr><tr><td>默认</td><td>可以访问</td><td>可以访问</td><td>不可以</td><td>不可以</td></tr><tr><td>private</td><td>可以访问</td><td>不可以</td><td>不可以</td><td>不可以</td></tr></tbody></table><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（四）继承</title>
    <link href="http://yoursite.com/2021/01/20/JAVA%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2021/01/20/JAVA%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BB%A7%E6%89%BF/</id>
    <published>2021-01-20T07:16:22.000Z</published>
    <updated>2021-02-03T09:41:33.975Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h2><h3 id="泛化的过程"><a href="#泛化的过程" class="headerlink" title="泛化的过程"></a>泛化的过程</h3><p>在俄罗斯方块的案例中定义了T类和J类，通过分析可发现，在这两个类中存在着大量的重复代码，像cells属性、print方法、drop方法、moveLeft方法、moveRight方法，在这两个类中都存在，并且实现上基本也是相同的，本着代码重用的原则，可以使用继承的方法来实现。</p><p>首先构建T类和J类的父类Tetromino类，将公共的（T类和J类共有的）信息存放在父类中，T类和J类继承Tetromino父类。此时，子类即可共享父类的数据，这个过程就是泛化的过程。</p><h3 id="extends关键字"><a href="#extends关键字" class="headerlink" title="extends关键字"></a>extends关键字</h3><p>使用继承可以实现代码的重用，在Java语言中，需要通过<code>extends</code>关键字实现类的继承。继承后，子类（Sub class）可以继承父类（Super class）的<strong>成员变量和成员方法</strong>，同时子类也可以定义自己成员变量和成员方法，届时，子类将具有父类的成员及本类的成员。</p><p>⚠️！注意：Java语言不支持多重继承，即：一个类只能继承几个父类，但是一个父类可以有多个子类。</p><ul><li>看如下代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tetromino</span></span>&#123;</span><br><span class="line">Cell[] cells ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Tetromino</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cells = <span class="keyword">new</span> Cell[<span class="number">4</span>];;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cells.length; i++) &#123;</span><br><span class="line">cells[i].row++;&#125;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cells.length; i++) &#123;</span><br><span class="line">cells[i].col--;&#125;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cells.length; i++) &#123;</span><br><span class="line">cells[i].col++;&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Tetromino</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">T</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">cells[<span class="number">0</span>] = <span class="keyword">new</span> Cell(row, col);</span><br><span class="line">cells[<span class="number">1</span>] = <span class="keyword">new</span> Cell(row, col + <span class="number">1</span>);</span><br><span class="line">cells[<span class="number">2</span>] = <span class="keyword">new</span> Cell(row, col + <span class="number">2</span>);</span><br><span class="line">cells[<span class="number">3</span>] = <span class="keyword">new</span> Cell(row + <span class="number">1</span>, col + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码说明：声明父类Tetromino，将公共信息放在其中，包含Cell[] 声明、drop()方法、moveLeft()方法、moveRight()方法、print()方法。声明无参构造函数，对成员变量Cell数据进行实例化。声明子类T继承Tetromino，并声明有参构造函数，传递row、从来、参数，进行T型数组元素的初始化，</p><p>下面的main()方法中，声明一个T型对象，即可以实现T型对象的构建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tetromino t = <span class="keyword">new</span> T(<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>上面的代码，在创建子类对象时，调用子类的有参构造函数进行数据的初始化，试想下，父类Tetromino的无参构造函数执行了吗？通过分析可以肯定的是，父类的无参构造被执行了。在程序中并没有声明父类的构造函数，那他是如何执行的呢？</p><h4 id="继承中的构造方法"><a href="#继承中的构造方法" class="headerlink" title="继承中的构造方法"></a>继承中的构造方法</h4><p>父类的无参构造之所以被运行，是因为，子类在构造前必须先构造父类。</p><p>事实上，子类的构造方法中是必须要通过<code>super()</code>关键字来调用父类的构造方法，这样才可以保证妥善的初始化继承自父类的成员变量。</p><p>但是看上一个案例中的代码并没有super 调用父类构造方法，那是因为，如果子类的构造方法中没有调用父类的构造方法，则Java编译器会自动的加入对父类无参构造的调用。</p><ul><li>看以下代码，演示了super关键字的用法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">T</span> <span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">  <span class="keyword">super</span>();</span><br><span class="line">  cells[<span class="number">0</span>] = <span class="keyword">new</span> Cell(row,col);</span><br><span class="line">  cells[<span class="number">1</span>] = <span class="keyword">new</span> Cell(row,col+<span class="number">1</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，super();为编译器自动加入的，并且super关键字必需位于子类构造方法的第一行。否则会有编译错误。</p><p>⚠️！注意：若父类没有提供无参的构造方法，则会出现编译错误。</p><ul><li>看如下代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;<span class="comment">//父类</span></span><br><span class="line">  <span class="keyword">int</span> value;</span><br><span class="line">  Foo(<span class="keyword">int</span> valve)&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goo</span> <span class="keyword">extends</span> <span class="title">Foo</span></span>&#123;<span class="comment">//子类</span></span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">  Goo(<span class="keyword">int</span> num)&#123;</span><br><span class="line">    <span class="keyword">this</span>.num = num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析上面的代码，在子类构造方法中，没有写super关键字调用父类构造方法，这是编译器会默认添加super()来调用父类的无参构造方法，但是父类中又没有定义无参构造方法，因此会发生编译错误。</p><p>针对上面的问题，可以有两个解决方案：</p><ol><li>方案一：在父类中添加无参的构造方法</li><li>方案二：在子类构造方法中显示调用父类的有参构造方法（常常使用）</li></ol><p>这样可以保证父类的成员变量均被初始化。</p><ul><li>看下面代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goo</span> <span class="keyword">extends</span> <span class="title">Foo</span></span>&#123;<span class="comment">//子类</span></span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">  Goo(<span class="keyword">int</span> num)&#123;</span><br><span class="line">    <span class="keyword">super</span>(value)；</span><br><span class="line">    <span class="keyword">this</span>.num = num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码，在子类调用了父类的构造方法，初始化了继承自父类的value成员变量，编译正确。</p><h3 id="父类的引用指向子类对象"><a href="#父类的引用指向子类对象" class="headerlink" title="父类的引用指向子类对象"></a>父类的引用指向子类对象</h3><p>一个子类的对象可以向上造型为父类的类型。即，定义父类类型的引用可以指向子类的对象。</p><ul><li>看如下代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> value;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">  Foo(<span class="keyword">int</span> valve)&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goo</span> <span class="keyword">extends</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">  Goo(<span class="keyword">int</span> value, <span class="keyword">int</span> num)&#123;</span><br><span class="line">    <span class="keyword">super</span>(value);</span><br><span class="line">    <span class="keyword">this</span>.num = num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Foo obj = <span class="keyword">new</span> Goo(<span class="number">100</span>,<span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，在main方法中，声明了父类型的引用来指向子类的对象，但是通过父类的引用只能访问父类所定义的成员，而不能访问子类所扩展的部分。</p><ul><li>看如下代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> value;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goo</span> <span class="keyword">extends</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Foo obj = <span class="keyword">new</span> Goo(<span class="number">100</span>,<span class="number">3</span>);</span><br><span class="line">     obj.value = <span class="number">200</span>;</span><br><span class="line">     obj.f();</span><br><span class="line">     obj.num = <span class="number">5</span>;</span><br><span class="line">     obj.g();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析上面代码，在main方法中，声明父类型的引用指向了子类的对象，而后，访问父类的成员变量value即调用父类的方法f，均可以正常编译。但是，当通过obj引用访问num变量及g的方法时，会出现编译错误，那是因为，当父类的引用指向了子类对象后，Java编译器会根据引用的类型（Foo），而不是对象的类型（Goo）来检测调用的方法是否匹配。</p><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><p>在子类中定义一个和父类的方法（除方法体外）相同的方法，这就是重写。当子类重写父类的方法后，该重写方法被调用时（无论时通过子类的引用调用还是通过父类的引用调用）运行的都是子类重写后的新版本。</p><ul><li><p>重写中使用<code>super()</code>关键字</p><p>在子类重写的方法中，可以通过super()关键字调用父类的版本。</p></li></ul><h3 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h3><ul><li><p>重载和重写是完全不同的语法现象</p></li><li><p><strong>重载：</strong></p><p>是指在一个类中定义多个方法名相同但参数列表不同的方法。在编译时，根据参数的个数和类型来决定调用哪个方法。</p><p><strong>重载遵循所谓的“编译期绑定”，即在编译时根据参数变量的类型判断应该调用哪个方法。</strong></p></li><li><p><strong>重写：</strong></p><p>是指在子类中定义和父类完全相同的方法，在程序运行时，根据对象类型调用不同的方法。</p><p><strong>重写遵循所谓的“运行期绑定”，即在运行时，根据引用类型所指向的实际对象类型来调用方法。</strong></p></li></ul><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（三）对象内存管理</title>
    <link href="http://yoursite.com/2021/01/20/JAVA%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2021/01/20/JAVA%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</id>
    <published>2021-01-20T00:39:48.000Z</published>
    <updated>2021-02-03T08:37:16.065Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="对象内存管理"><a href="#对象内存管理" class="headerlink" title="对象内存管理"></a>对象内存管理</h1><h2 id="对象内存管理-1"><a href="#对象内存管理-1" class="headerlink" title="对象内存管理"></a>对象内存管理</h2><p>在Java中，有Java程序、虚拟机、操作系统三个层面。其中Java程序与虚拟机交互，虚拟机与操作系统交互。编译好的Java字节码文件运行在JVM上。编译好的字节码文件运行在JVM中。</p><p>JVM会将申请的内存从逻辑上划分为三个区域：堆、栈、方法区。</p><h2 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h2><h3 id="对象存储在堆中"><a href="#对象存储在堆中" class="headerlink" title="对象存储在堆中"></a>对象存储在堆中</h3><p>JVM在其内存空间开辟了一个称之为“堆”的存储空间，这部分空间用于<strong>存放new关键字创建出来的对象。</strong></p><ul><li>看如下代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cell c = <span class="keyword">new</span> Cell();</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/JOEL-T99/Pic//img/Cell2.png" style="zoom:67%;" /><p>从图中可以看到右侧的堆内存，new Cell() 所创建的对象在堆中分配，同时成员变量也在此分配，并赋予初始值为零。引用类型变量 c 在栈内存中分配，其中保存的数据，为对象在堆内存中的地址信息，假设对象在堆内存的地址为00DF（十六进制），则 c 中保存的即是00DF。</p><h3 id="成员变量的生命周期"><a href="#成员变量的生命周期" class="headerlink" title="成员变量的生命周期"></a>成员变量的生命周期</h3><p>当生声明好对象后，对该对象（堆中的Cell）的访问需要依靠引用变量（栈中的c）那么当一个对象没有任何引用时该对象就被视为废弃的对象，属于被回收的范围，同时对象中的所有成员变量也随之被回收。</p><ul><li><p>成员变量的生命周期</p><p>对象在堆中创建开始到对象从堆中被回收结束。</p></li><li><p>以下代码演示了对象不再被引用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cell c = <span class="keyword">new</span> Cell();</span><br><span class="line">c = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>当将c赋值为null时，表示c不再指向刚刚分配的对象空间，此时成员变量失效。</p><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>垃圾回收器Garbage Collection，GC）是JVW自带的一个线程（自动运行的程序）<strong>用于回收没有任何引用指向的对象。</strong></p><ul><li><p>工作原理</p><p>GC线程会从栈中的引用变量开始跟踪，从而判断哪些内存是正在使用的，若GC无法跟踪到某一块堆内存，那么GC就认为这块的内存不再使用了，即为可回收。</p></li></ul><p>Java程序员不用担心内存管理，因为GC会自动管理。</p><h3 id="Java程序的内存泄露问题"><a href="#Java程序的内存泄露问题" class="headerlink" title="Java程序的内存泄露问题"></a>Java程序的内存泄露问题</h3><p>内存泄漏是指，不再被使用的内存没有被及时的回收，严重的内存泄漏会因为过多的内存占用而导致程序的崩溃。在程序中应当尽量避免不必要的内存浪费。</p><p>GC线程判断对象是否可以被回收的依据是该对象是否有引用来指向，因此，当确定该对象不再被使用时，应当及时将其引用设为null，这样，该对象即不再被引用，属于可回收的范围。</p><h3 id="System-gc-方法"><a href="#System-gc-方法" class="headerlink" title="System.gc()方法"></a>System.gc()方法</h3><p>GC是定时或定期才自动回收垃圾的， 如果需要GC即刻回收无用对象时，可以调用System.gc()方法。此方法用于JVM马上调用GC回收资源。</p><h2 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h2><h3 id="栈存放方法中的局部变量"><a href="#栈存放方法中的局部变量" class="headerlink" title="栈存放方法中的局部变量"></a>栈存放方法中的局部变量</h3><p>JVM在其空间开辟了一个称之为“栈”的存储空间。这部分空间用于<strong>存放程序运行时在方法中声明的所有局部变量。</strong></p><ul><li>看如下代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cell c = <span class="keyword">new</span> Cell();</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/JOEL-T99/Pic//img/Cell3.png" style="zoom:67%;" /><p>说明：方法中的变量即为全局变量，是在栈内存中分配，若变量为值类型，则在栈中存储的就是该变量的值，若变量为引用类型，则在栈中存储的是对中对象的地址。</p><h3 id="局部变量的生命周期"><a href="#局部变量的生命周期" class="headerlink" title="局部变量的生命周期"></a>局部变量的生命周期</h3><p>一个运行的Java程序从开始到结束会有很多方法的调用，JVM会为每一个方法的调用在栈中分配一个对应的空间，这个空间称之为该方法的<strong>栈帧</strong>。一个栈帧对应一个正在调用的方法，栈帧中<strong>存储了该方法的参数、局部变量等数据。</strong>当某一个方法调用完成后，其对应的栈帧清除，局部变量即失效。</p><h3 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h3><p>成员变量与局部变量的差别如下：</p><ul><li>局部变量<ol><li>定义在方法中</li><li>没有默认值，必须自行设定初始值</li><li>方法被调用时，存在栈中，方法调用结束时局部变量从栈中被清除</li></ol></li><li>成员变量<ol><li>定义在类中，方法外</li><li>由系统设定默认初始值，可以不显式初始化</li><li>所在类被实例化后，存在堆中，对象被回收时，成员变量失效</li></ol></li></ul><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><h3 id="方法区存放类的信息"><a href="#方法区存放类的信息" class="headerlink" title="方法区存放类的信息"></a>方法区存放类的信息</h3><p>方法区用于存放类的信息，Java程序运行时，首先会通过类装载器载入类的字节码文件，经过解析后将其装入方法区，<strong>类的各类信息（方法）都在方法区存储。</strong></p><ul><li>看如下代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cell c = <span class="keyword">new</span> Cell();</span><br></pre></td></tr></table></figure><p>程序在执行这句话时，Cell类首先被装载到JVM的方法区，其中包括类的基本信息和方法定义等。如下图：</p><img src="https://cdn.jsdelivr.net/gh/JOEL-T99/Pic//img/Cell4.png" style="zoom:67%;" /><p>通过图可以看出，在方法区中，包含Cell类的字节码文件，及类的基本信息及方法drop等。</p><h3 id="方法只有一份"><a href="#方法只有一份" class="headerlink" title="方法只有一份"></a>方法只有一份</h3><p>当类的信息被加载到方法区时，除了类的信息以外，同时类的方法定义也被加载到方法区。</p><p>类在实例化对象时，多个对象会拥有各自在堆中的空间，但所有实例对象是<strong>共用方法区中的一份方法。</strong>意味着方法只有一份。</p><ul><li>看如下代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JFrame f1 = <span class="keyword">new</span> JFrame();</span><br><span class="line">JFrame f2 = <span class="keyword">new</span> JFrame();</span><br><span class="line">f1.setSize(<span class="number">200</span>,<span class="number">300</span>);</span><br><span class="line">f2.setSize(<span class="number">300</span>,<span class="number">400</span>);</span><br></pre></td></tr></table></figure><p>如上的代码中，对象有两个，但是setSize方法只有一份，分别针对f1指向的对象和f2指向的对象调用了两次。</p><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（二）类/方法</title>
    <link href="http://yoursite.com/2021/01/19/JAVA%EF%BC%88%E4%BA%8C%EF%BC%89%E7%B1%BB%20:%20%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2021/01/19/JAVA%EF%BC%88%E4%BA%8C%EF%BC%89%E7%B1%BB%20:%20%E6%96%B9%E6%B3%95/</id>
    <published>2021-01-19T06:59:15.000Z</published>
    <updated>2021-02-03T07:13:22.360Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h3 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h3><p><strong>抽象数据类型：</strong>将不同类型数据的集合组成一个整体用来描述一种新的事物。</p><p>类定义了一种抽象数据类型，不止定义了抽象数据类型组成（成员变量），同时还定义了该类型可以实施的操作（方法）。</p><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><ul><li><p>定义一个类</p><p>类是一种引用（抽象）数据类型，<strong>类为对象的模版</strong>。</p><p>类的含义包括“成员变量”的定义和“成员方法”的定义。</p></li><li><p>定义类的方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">  修饰符  返回值类型  方法名称（参数列表）&#123;</span><br><span class="line">    方法体</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建并使用对象"><a href="#创建并使用对象" class="headerlink" title="创建并使用对象"></a>创建并使用对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--使用<span class="keyword">new</span>关键字创建对象</span><br><span class="line">     Cell           c      =     <span class="keyword">new</span>         Cell();</span><br><span class="line">   引用类型     引用类型变量     创建（实例化）    构造方法</span><br></pre></td></tr></table></figure><h3 id="引用类型变量"><a href="#引用类型变量" class="headerlink" title="引用类型变量"></a>引用类型变量</h3><p>为了能够对实例化的对象进行访问，需要一个特殊的变量，即引用</p><p>引用类型变量可以存储该对象的地址信息，通常称为“指向该对象”，当一个引用类型变量指向该类的对象，就可以通过这个变量对对象访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Emp e1 = <span class="keyword">new</span> Emp();</span><br><span class="line">Emp e2 = e1;</span><br><span class="line">e1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">e2.name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">System.out.printlm(e1.name);</span><br><span class="line"><span class="comment">//输出为“王五”</span></span><br><span class="line"><span class="comment">//e1与e2同时存放并指向同一个变量，e1对该变量赋之后，e2又对该变量重新赋值</span></span><br></pre></td></tr></table></figure><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><p><strong>方法的签名：</strong>方法名和参数列表</p><p>Java语法定义：一个类中不可以有两个方法签名完全相同的方法，但是如果一个类的两个方法只是方法名相同而参数列表不同，这就是方法的重载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">abc(<span class="keyword">int</span> a)&#123;...&#125;</span><br><span class="line">abc(String name)&#123;...&#125;</span><br><span class="line">abc(<span class="keyword">double</span> a,<span class="keyword">int</span> b)&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译时根据签名绑定调用方法</span></span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p><strong>构造方法是类中定义的方法</strong>，但不同于其他方法。</p><p>–构造方法的名称必须是和类名相同</p><p>–构造方法没有返回值，也不能写<code>void</code></p><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 类型名()&#123;</span><br><span class="line">  方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>通过构造方法初始化成员变量</p><p>Java语法中的构造方法常常用于实现对对象成员变量初始化</p></li><li><p>this关键字的使用</p><p>this关键字用在方法体中，用于指代调用该方法的当前对象。</p><p>简单说：哪个对象用方法，this指的就是哪个对象</p></li><li><p>默认的构造方法</p><p>Java语法规定，任何一个类都必须含有构造方法，假如源程序没有定义构造方法，则编译器在编译时会为其添加一个无参的空结构（默认构造方法）。一旦定义了构造方法，默认的构造将不再生成。</p></li><li><p>构造方法的重载</p><p>很多时候，为了方便，可以对一个类定义多个构造方法，这些构造方法都有相同的名称（类名），只是方法的参数不同，称之为构造方法的重载。</p></li></ul><h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><h3 id="利用方法，实现对人员相关信息的输出"><a href="#利用方法，实现对人员相关信息的输出" class="headerlink" title="利用方法，实现对人员相关信息的输出"></a>利用方法，实现对人员相关信息的输出</h3><ul><li><p><code>Emp.java</code> 方法构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Emp</span><span class="params">()</span></span>&#123;</span><br><span class="line">  String name;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">char</span> gender;</span><br><span class="line">  <span class="keyword">double</span> salary;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//构造方法的名称必须和类名相同</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(String n, <span class="keyword">int</span> a, <span class="keyword">char</span> g, <span class="keyword">double</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = n;</span><br><span class="line">    <span class="keyword">this</span>.age = a;</span><br><span class="line">    <span class="keyword">this</span>.gender = g;</span><br><span class="line">    <span class="keyword">this</span>.salary = s;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printEmpInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Name is :&quot;</span>+name);</span><br><span class="line">    System.out.println(<span class="string">&quot;Age is :&quot;</span>+age);</span><br><span class="line">    System.out.println(<span class="string">&quot;Gender is :&quot;</span>+gender);</span><br><span class="line">    System.out.println(<span class="string">&quot;Salary is :&quot;</span>+salary);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>EmpInfo.java</code> 方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpInfo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Emp e = <span class="keyword">new</span> Emp(<span class="string">&quot;&quot;</span>,<span class="number">46</span>,<span class="string">&#x27;&#x27;</span>,<span class="number">4377.5</span>);</span><br><span class="line">    e.printEmpInfo();<span class="comment">//方法调用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="输出单个坐标形状"><a href="#输出单个坐标形状" class="headerlink" title="输出单个坐标形状"></a>输出单个坐标形状</h3><ul><li><p><code>Cell.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cell</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> row;</span><br><span class="line">  <span class="keyword">int</span> col;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//构造方法的名称必须和类名相同</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Cell</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.row = r;</span><br><span class="line">    <span class="keyword">this</span>.col = c;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drop</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    row += n;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveLeft</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    col += n;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveRight</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    col += n;</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getCellInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> row+<span class="string">&quot;,&quot;</span>+col;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>CellInfo.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CellInfo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Cell[]  相当于 基本类型的int[]</span></span><br><span class="line">    Cell c = <span class="keyword">new</span> Cell(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">printCell(c);</span><br><span class="line">System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">c.moveLeft(<span class="number">3</span>);</span><br><span class="line">printCell(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//打印场地</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCell</span><span class="params">(Cell cell)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> totalRow = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> totalCol = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">0</span>, row&lt;totalRow; row++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">0</span>, col&lt;totalCol; col++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cell.row==row &amp;&amp; cell.col==col)&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="俄～定义字母T"><a href="#俄～定义字母T" class="headerlink" title="俄～定义字母T"></a>俄～定义字母T</h3><ul><li><p>T.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法（现有构造方法，才能被使用，如：new Cell(rwo,col)）</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cell</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> row;</span><br><span class="line">  <span class="keyword">int</span> col;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Cell</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.row = row;</span><br><span class="line">  <span class="keyword">this</span>.col = col;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span></span>&#123;</span><br><span class="line">  Cell[] cells;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//构造方法的名称必须和类名相同</span></span><br><span class="line">  <span class="comment">//Cell[4]为创建的对象，即构造方法，用的为上段代码的构造方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">T</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">    cells = <span class="keyword">new</span> Cell[<span class="number">4</span>];<span class="comment">//引用类型 引用类型变量（属性）</span></span><br><span class="line">    cells[<span class="number">0</span>] = <span class="keyword">new</span> Cell(row, col);</span><br><span class="line">    cells[<span class="number">1</span>] = <span class="keyword">new</span> Cell(row, col+<span class="number">1</span>);</span><br><span class="line">    cells[<span class="number">2</span>] = <span class="keyword">new</span> Cell(row, col+<span class="number">2</span>);</span><br><span class="line">    cells[<span class="number">3</span>] = <span class="keyword">new</span> Cell(row+<span class="number">1</span>, col+<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cells.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">      str += <span class="string">&quot;(&quot;</span>+cells[i]getCellInfo()+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&quot;()&quot;</span> cells[cells.length-<span class="number">1</span>].getCellInfo()+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cells.length; i++)&#123;</span><br><span class="line">      cells[i].row++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveleft</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cells.length; i++)</span><br><span class="line">      cells[i].col--;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveright</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cells.length; i++)</span><br><span class="line">      cells[i].col++;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>testT</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestT</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">new</span> T(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">t.print();</span><br><span class="line">t.drop();</span><br><span class="line">t.print();</span><br><span class="line">t.moveLeft();</span><br><span class="line">t.print();</span><br><span class="line">t.moveRight();</span><br><span class="line">t.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="俄～打印字母O"><a href="#俄～打印字母O" class="headerlink" title="俄～打印字母O"></a>俄～打印字母O</h3><p>根据下列图形在坐标中打印相关图形。</p><ul><li><p><code>O.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">O</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  Cell[] cells;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="number">0</span>(<span class="keyword">int</span> row, <span class="keyword">int</span> col)&#123;</span><br><span class="line">    cells = <span class="keyword">new</span> Cell[<span class="number">4</span>];</span><br><span class="line">    cells[<span class="number">0</span>] = <span class="keyword">new</span> Cell(row, col);</span><br><span class="line">    cells[<span class="number">1</span>] = <span class="keyword">new</span> Cell(row, col+<span class="number">1</span>);</span><br><span class="line">    cells[<span class="number">2</span>] = <span class="keyword">new</span> Cell(row+<span class="number">1</span>, col);</span><br><span class="line">    cells[<span class="number">3</span>] = <span class="keyword">new</span> Cell(row+<span class="number">1</span>, col+<span class="number">1</span>;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//下降</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cells.length; i++)&#123;</span><br><span class="line">      cells[i].row++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//左移</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveLeft</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cells.length; i++)&#123;</span><br><span class="line">      cells[i].col--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//右移</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveRight</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cells.length; i++)&#123;</span><br><span class="line">      cells[i].col++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>testO.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testO</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    O o = <span class="keyword">new</span> O(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    printCell(o);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCell</span><span class="params">(O <span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> y=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">0</span>; row&lt;=x; row++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">0</span>; col&lt;=y; col++)&#123;</span><br><span class="line">        <span class="comment">//o.cells.length 图形.数组名.长度</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;o.cells.length &amp;&amp; o.cells[i].row==row &amp;&amp; o.cells[i].col==col)</span><br><span class="line">          System.out.print(<span class="string">&quot; * &quot;</span>);</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">45</span>,<span class="number">67</span>,<span class="number">25</span>,<span class="number">86</span>&#125;</span><br><span class="line">Cell c = <span class="keyword">new</span> Cell[]&#123;</span><br><span class="line">  <span class="keyword">new</span> Cell(<span class="number">25</span>,<span class="number">56</span>);</span><br><span class="line">  <span class="keyword">new</span> Cell(<span class="number">41</span>,<span class="number">65</span>);</span><br><span class="line">  <span class="keyword">new</span> Cell(<span class="number">12</span>,<span class="number">46</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Soso</title>
    <link href="http://yoursite.com/2021/01/18/JAVA%20Soso/"/>
    <id>http://yoursite.com/2021/01/18/JAVA%20Soso/</id>
    <published>2021-01-18T13:15:26.000Z</published>
    <updated>2021-01-18T15:06:01.796Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>基本数据类型（8种）<code>byte[]、short[]、int[]、long[]、float[]、double[]、char[]、boolean[]</code></p><h3 id="获取用户输入"><a href="#获取用户输入" class="headerlink" title="获取用户输入"></a>获取用户输入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个数：&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> num1=sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的遍历：将数组中的每个元素进行查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1:普通for循环：正向遍历：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">10</span>; i++)&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个数字为&quot;</span>+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2:增强for循环</span></span><br><span class="line"><span class="comment">//对arr数组进行遍历，遍历出来每个元素用int类型的num接收</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>；</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> num:arr)&#123;</span><br><span class="line">  count++;</span><br><span class="line">  Syetem.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;个数字位&quot;</span>+num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法3:利用普通for循环：逆行遍历：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">9</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个数字为&quot;</span>+arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组找最大值"><a href="#数组找最大值" class="headerlink" title="数组找最大值"></a>数组找最大值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>[] arr = &#123;<span class="number">34</span>,<span class="number">57</span>,<span class="number">39</span>,<span class="number">97</span>,<span class="number">73</span>,<span class="number">26</span>,<span class="number">74</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span> maxNum = arr[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt;arr.length; i++)&#123;</span><br><span class="line">     <span class="keyword">if</span>(arr[i]&gt;maxNum)&#123;</span><br><span class="line">       maxNum = arr[i];</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   System.out.println(<span class="string">&quot;当前数组中的最大值为：&quot;</span>+maxNum);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxNum</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> maxNum = arr[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt;arr.length; i++)&#123;</span><br><span class="line">     <span class="keyword">if</span>(arr[i]&gt;maxNum)&#123;</span><br><span class="line">       maxNum = arr[i];</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> maxNum;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>[] arr = &#123;<span class="number">34</span>,<span class="number">57</span>,<span class="number">39</span>,<span class="number">97</span>,<span class="number">73</span>,<span class="number">26</span>,<span class="number">74</span>&#125;;</span><br><span class="line">   <span class="comment">//调用方法：</span></span><br><span class="line">   <span class="keyword">int</span> num = getMaxNum(arr);</span><br><span class="line">   System.out.println(<span class="string">&quot;当前数组中的最大值为：&quot;</span>+maxNum);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><div class="note info simple"><p>方法的实参传递给行参的时候一定要注意：一切都是值传递：</p><p>如果是基本数据类型，那么传递的就是字面值</p><p>如果是引用数据类型，那么传递的就是地址值</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（一）数组</title>
    <link href="http://yoursite.com/2021/01/17/JAVA%EF%BC%88%E4%B8%80%EF%BC%89%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2021/01/17/JAVA%EF%BC%88%E4%B8%80%EF%BC%89%E6%95%B0%E7%BB%84/</id>
    <published>2021-01-17T12:55:17.000Z</published>
    <updated>2021-01-24T09:23:27.669Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h3 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h3><p>是一种数据结构，用于存放相同类型的数据集合。</p><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><p>定义基本类型数组（数组的长度一经创建不可更改）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java式写法</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//C式写法</span></span><br><span class="line"><span class="keyword">int</span> []arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><p>基本数据类型（数组元素为基本类型）的数组创建后，默认为其数组设置了初始值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">--静态初始化</span><br><span class="line"><span class="comment">//除了用new关键字来产生数组以为，还可以直接在定义数组的同时就为数组分配空间并赋值。</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">23</span>,<span class="number">46</span>,<span class="number">85</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">23</span>,<span class="number">46</span>,<span class="number">85</span>&#125;;</span><br><span class="line"><span class="comment">//注意：</span></span><br><span class="line"><span class="comment">//1.new int[3]&#123;23,46,85&#125;; ---&gt;错误</span></span><br><span class="line"><span class="comment">//2.int[] arr;  ---&gt;错误</span></span><br><span class="line"><span class="comment">//arr = &#123;23,46,85&#125;;</span></span><br><span class="line"></span><br><span class="line">--动态初始化</span><br><span class="line"><span class="comment">//数组定义与为数组元素分配空间并赋值的操作分开进行。</span></span><br><span class="line"><span class="keyword">int</span>[] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">23</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">46</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">--默认初始化</span><br><span class="line"><span class="comment">//数组是🚰类型，它的元素相当于类的实例变量，因此数组一旦分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; ---&gt;数组有默认的初始化值<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="数组的访问"><a href="#数组的访问" class="headerlink" title="数组的访问"></a>数组的访问</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数组的长度</span></span><br><span class="line"><span class="keyword">int</span> arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">35</span>,<span class="number">65</span>,<span class="number">74</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a = arr.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过下标访问数组元素</span></span><br><span class="line">注意：数组的下标从<span class="number">0</span>开始，最大到length-<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="遍历数组元素"><a href="#遍历数组元素" class="headerlink" title="遍历数组元素"></a>遍历数组元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr = &#123;<span class="number">53</span>,<span class="number">67</span>,<span class="number">98</span>,<span class="number">36</span>,<span class="number">78</span>&#125;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">  System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的复制"><a href="#数组的复制" class="headerlink" title="数组的复制"></a>数组的复制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//System.arraycopy方法实现数组复制</span></span><br><span class="line">System.arraycop(src,srcPos,dest,destPos,length)</span><br><span class="line">  --src:源数组</span><br><span class="line">--srcPos:源数组的起始位置</span><br><span class="line">  --dest:目标数组</span><br><span class="line">--destPos:目标数组中的起始位置</span><br><span class="line">--length:要复制的数组元素的数量</span><br><span class="line"></span><br><span class="line"><span class="comment">//Arrays.copyOf方法实现数组复制</span></span><br></pre></td></tr></table></figure><h3 id="数组的扩容"><a href="#数组的扩容" class="headerlink" title="数组的扩容"></a>数组的扩容</h3><p>数组的长度在创建后是不可更改的。所谓扩容实际上是指创建一个更大的新数组并将原有数组的内容复制到其中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组长度加一</span></span><br><span class="line"><span class="keyword">int</span>[] arr = Arrays.copyOf(arr,arr.length+<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="数组的添加"><a href="#数组的添加" class="headerlink" title="数组的添加"></a>数组的添加</h3><p>添加的逻辑：如果在数组的第i个位置添加数值，在自i开始，所有值向后移动一动一位，腾出原有的位置i，再向其添加数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"> <span class="comment">//功能：给定一个数组，在数组下标为2的位置上添加一个元素91</span></span><br><span class="line"> <span class="comment">//1.给定一个数组；</span></span><br><span class="line"> <span class="keyword">int</span>[] arr = &#123;<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">86</span>&#125;;</span><br><span class="line"> <span class="comment">//2.输出增加元素前的数组；</span></span><br><span class="line"> System.out.print(<span class="string">&quot;增加元素前的数组：&quot;</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(i != arr.length-<span class="number">1</span>)&#123;</span><br><span class="line"> System.out.print(arr[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;<span class="comment">//i == arr.length-1 最后一个元素不用加逗号</span></span><br><span class="line"> System.out.print(arr[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//3.添加元素；</span></span><br><span class="line"> <span class="comment">// arr[5]=arr[4];  //基本方法</span></span><br><span class="line"> <span class="comment">// arr[4]=arr[3];</span></span><br><span class="line"> <span class="comment">// arr[3]=arr[2];</span></span><br><span class="line"> <span class="comment">// arr[2]=91;</span></span><br><span class="line"> <span class="keyword">int</span> index = <span class="number">2</span>;  <span class="comment">//数组中添加的位置</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length-<span class="number">1</span>; i&gt;=(index+<span class="number">1</span>); i++)&#123;</span><br><span class="line"> arr[i]=arr[i-<span class="number">1</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> arr[index] = <span class="number">91</span>;<span class="comment">//数组中要添加的元素 </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//4.输出增加元素后的数组；</span></span><br><span class="line"> System.out.print(<span class="string">&quot;\n增加元素后的数组：&quot;</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(i != arr.length-<span class="number">1</span>)&#123;</span><br><span class="line"> System.out.print(arr[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;<span class="comment">//i == arr.length-1 最后一个元素不用加逗号</span></span><br><span class="line"> System.out.print(arr[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>提取一个添加元素的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在数组的确定位置上添加一个元素</span></span><br><span class="line"><span class="comment">//不确定因素：形参，哪个数组，哪个位置，哪个元素</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span>[] arr = &#123;<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">86</span>）;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//从键盘接收数据</span></span><br><span class="line">  Scanner sc = <span class="keyword">new</span> System(System.in);<span class="comment">//引用类型 引用类型变量 = 创建 构造方法</span></span><br><span class="line">  System.out.println(<span class="string">&quot;请录入你要添加元素的指定下标：&quot;</span>);</span><br><span class="line">  <span class="keyword">int</span> index = sc.nextInt();</span><br><span class="line">  System.out.println(<span class="string">&quot;请录入你要添加的元素：&quot;</span>);</span><br><span class="line">  <span class="keyword">int</span> ele = sc.nextInt();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.增加元素</span></span><br><span class="line">  <span class="comment">//调用方法</span></span><br><span class="line">  intsertEle(arr, index, ele);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//4.输出增加元素后的数组；</span></span><br><span class="line">  System.out.print(<span class="string">&quot;\n增加元素后的数组：&quot;</span>)；</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, i&lt;arr.length-<span class="number">1</span>, i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(i != arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">  System.out.print(arr[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;<span class="comment">//i == arr.length-1 最后一个元素不用加逗号</span></span><br><span class="line">  System.out.print(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertEle</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index, <span class="keyword">int</span> ele)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length-<span class="number">1</span>; i&gt;=(index+<span class="number">1</span>); i++)&#123;</span><br><span class="line">  arr[i]=arr[i-<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  arr[index] = ele ；</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="数组的删除"><a href="#数组的删除" class="headerlink" title="数组的删除"></a>数组的删除</h3><ul><li>删除指定位置的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//功能：给定一个数组，删除下标为2元素</span></span><br><span class="line"><span class="comment">//1.定义一个数组；</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">86</span>&#125;;</span><br><span class="line"><span class="comment">//2.输出删除前的数组；</span></span><br><span class="line">System.out.println(<span class="string">&quot;删除前的数组：&quot;</span>+Arrays.toString(arr));</span><br><span class="line"><span class="comment">//3.删除</span></span><br><span class="line"><span class="keyword">int</span> index  = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=index; i&lt;arr.length-<span class="number">2</span>; i++) &#123;</span><br><span class="line">arr[i] = arr[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">arr[arr.length-<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//4.输出删除后的数组；</span></span><br><span class="line">System.out.println(<span class="string">&quot;删除后的数组：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>删除指定的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//功能：给定一个数组，删除元素25</span></span><br><span class="line"><span class="comment">//1.定义一个数组；</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">86</span>&#125;;</span><br><span class="line"><span class="comment">//2.输出删除前的数组；</span></span><br><span class="line">System.out.println(<span class="string">&quot;删除前的数组：&quot;</span>+Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到要删除的元素对应的索引即可：</span></span><br><span class="line"><span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] == <span class="number">25</span>) &#123;</span><br><span class="line">index = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.删除</span></span><br><span class="line"><span class="keyword">if</span>(index != -<span class="number">1</span>) &#123;<span class="comment">//数组过滤</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=index; i&lt;=arr.length-<span class="number">2</span>; i++) &#123;</span><br><span class="line">arr[i] = arr[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">arr[arr.length-<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//index=-1</span></span><br><span class="line">System.out.println(<span class="string">&quot;没有你要删除的元素&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.输出删除后的数组；</span></span><br><span class="line">System.out.println(<span class="string">&quot;删除后的数组：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h3><ul><li><p>冒泡排序</p><p>比较相邻的元素，如果违反指定的顺序准则(升序或降序),则交换位置。可以简化的理解，第一次找到所有元素中最大(最小)的放在最后一个位置上，不再变动；第二次找到剩余元素中最大(最小)放到倒数第二位不再变动，以此类推。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">46</span>,<span class="number">86</span>,<span class="number">37</span>,<span class="number">77</span>,<span class="number">36</span>,<span class="number">79</span>,<span class="number">38</span>,<span class="number">58</span>,<span class="number">74</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>; i++)&#123;<span class="comment">//遍历轮数</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.length-<span class="number">1</span>-i; i++)&#123;<span class="comment">//遍历次数</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="number">1</span>] &gt; arr[a+<span class="number">1</span>])&#123;</span><br><span class="line">      <span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">      arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">      aee[j+<span class="number">1</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法式</span></span><br><span class="line">Arrays.sort()方法</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//五要素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span><span class="comment">//修饰符（静态）</span></span><br><span class="line"><span class="keyword">void</span><span class="comment">//返回值类型</span></span><br><span class="line">abc <span class="comment">//方法名</span></span><br><span class="line">(<span class="keyword">int</span> c, <span class="keyword">int</span> a)<span class="comment">//参数列表</span></span><br><span class="line">&#123;...&#125;<span class="comment">//方法体</span></span><br></pre></td></tr></table></figure><h3 id="数组的查询"><a href="#数组的查询" class="headerlink" title="数组的查询"></a>数组的查询</h3><ul><li>查询指定位置的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="comment">//找出索引对应的元素</span></span><br><span class="line">  <span class="keyword">int</span>[] arr = (<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">37</span>);</span><br><span class="line">  System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>查询指定元素的位置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"> <span class="comment">//找出元素对应的索引</span></span><br><span class="line"> <span class="keyword">int</span>[] arr = &#123;<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">35</span>&#125;;<span class="comment">//重复元素</span></span><br><span class="line"> <span class="keyword">int</span> index = -<span class="number">1</span>;<span class="comment">//这个初始值只要不是数组的索引即可</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(arr[i]==<span class="number">35</span>)&#123;</span><br><span class="line"> index = i;<span class="comment">//只要找到了这个元素，那么index就变成</span></span><br><span class="line">       <span class="keyword">break</span>;<span class="comment">//只要找到这个元素，循环就停止</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">if</span>（index != -<span class="number">1</span>）&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;元素对应的索引为：&quot;</span>+index);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;<span class="comment">//index == -1</span></span><br><span class="line">     System.out.println(<span class="string">&quot;查无次数！&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>将查询功能提取为一个方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"> <span class="comment">//找出元素对应的索引</span></span><br><span class="line"> <span class="keyword">int</span>[] arr = &#123;<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">35</span>&#125;;<span class="comment">//重复元素</span></span><br><span class="line"> <span class="comment">//调用方法</span></span><br><span class="line"> <span class="keyword">int</span> index = getIndex(arr,<span class="number">57</span>)</span><br><span class="line"> <span class="comment">//后续对index的值进行判断</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>（index != -<span class="number">1</span>）&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;元素对应的索引为：&quot;</span>+index);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;查无次数！&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">getIndex</span><span class="params">(<span class="keyword">int</span>[],<span class="keyword">int</span> ele)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">   <span class="keyword">if</span>(arr[i]==<span class="keyword">else</span>)&#123;</span><br><span class="line">   index = i;</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> index;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="main方法的解释"><a href="#main方法的解释" class="headerlink" title="main方法的解释"></a>main方法的解释</h3><p>默认情况下，虚拟机是在调用main方法的时候传入了一个长度为0的数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(args.length);</span><br><span class="line">   <span class="keyword">for</span>(String str : args)&#123;</span><br><span class="line">      System.out.println(str);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>提供了一个方法，参数的个数是可变的</p><p>作用：解决了部分的重载问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.方法的内部对可变参数的处理跟数组一样。 </span></span><br><span class="line"><span class="comment">//2.可变数据和其他数据一起作为形参的时候，可变参数一定要放在最后。</span></span><br><span class="line"><span class="comment">//例如（int num1,int...num2）,这样传递值时，其他参数才能接收到数据。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     System.out.println(args.length);</span><br><span class="line">    <span class="keyword">for</span>(String str : args)&#123;</span><br><span class="line">       System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Demo</span><span class="params">(<span class="keyword">int</span>...num )</span> </span>&#123;<span class="comment">//int...num为可变参数</span></span><br><span class="line">System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:num) &#123;<span class="comment">//使用增强for循环遍历数组 </span></span><br><span class="line">System.out.println(i+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();<span class="comment">//换行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增强for循环-VS-普通for循环"><a href="#增强for循环-VS-普通for循环" class="headerlink" title="增强for循环 VS 普通for循环"></a>增强for循环 VS 普通for循环</h3><ul><li>增强for循环和普通for循环的区别<ol><li>增强for循环必须有被遍历的目标（如集合或数组）。</li><li>普通for循环遍历数组的时候需要索引。</li><li>增强for循环不能获取下标，所以遍历数组时最好使用普通for循环。</li></ol></li><li>普通数组中使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增强for循环  </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> item : array) &#123;  </span><br><span class="line">  System.out.println(item);  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通for循环</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)  </span><br><span class="line">    System.out.println(array[i]);</span><br></pre></td></tr></table></figure><ul><li>二维数组中的使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增强for循环 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> arr[] : array2) &#123;  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> item : arr) &#123;  </span><br><span class="line">    System.out.println(item);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 普通for循环  </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array2.length; i++) &#123;  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array2[i].length; j++) &#123;  </span><br><span class="line">    System.out.println(array2[i][j]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>List中的使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增强for循环  </span></span><br><span class="line">  <span class="keyword">for</span> (String item : list)&#123;  </span><br><span class="line">  System.out.println(item);             </span><br><span class="line">  &#125;  </span><br><span class="line">                </span><br><span class="line">  <span class="comment">//普通for循环</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;  </span><br><span class="line">  System.out.println(list.get(i));  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><h3 id="输出两个int数中的最大值"><a href="#输出两个int数中的最大值" class="headerlink" title="输出两个int数中的最大值"></a>输出两个int数中的最大值</h3><p>用户从控制台接收两个整数，通过程序找出两个数中的最大值。控制台的交互效果如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/JOEL-T99/Pic//img/%E5%9B%BE%E7%89%873.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入两个整数：a，b（以空格隔开）&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;最大值为&quot;</span>+a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;最大值为&quot;</span>+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写三个数值的排序程序"><a href="#编写三个数值的排序程序" class="headerlink" title="编写三个数值的排序程序"></a>编写三个数值的排序程序</h3><p>使用程序为用户所录入的 3 个数值进行升序排列，并将排序后的结果输出到控制台。程序交互过程如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/JOEL-T99/Pic//img/%E5%9B%BE%E7%89%872.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入三个整数：a，b，c（以空格隔开）&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> c = sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;您输入的是：\n&quot;</span>+<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b+<span class="string">&quot;,c=&quot;</span>+c);</span><br><span class="line"><span class="keyword">if</span>(a&lt;b) &#123;</span><br><span class="line"><span class="keyword">if</span>(b&lt;c) &#123;System.out.println(<span class="string">&quot;升序排序后，结果为：&quot;</span>+<span class="string">&#x27;\r&#x27;</span>+<span class="string">&quot;c=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b+<span class="string">&quot;,a=&quot;</span>+c);&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;c) &#123;System.out.println(<span class="string">&quot;升序排序后，结果为：&quot;</span>+<span class="string">&#x27;\r&#x27;</span>+<span class="string">&quot;c=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+c+<span class="string">&quot;,a=&quot;</span>+b);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;System.out.println(<span class="string">&quot;升序排序后，结果为：&quot;</span>+<span class="string">&#x27;\r&#x27;</span>+<span class="string">&quot;c=&quot;</span>+c+<span class="string">&quot;,b=&quot;</span>+a+<span class="string">&quot;,a=&quot;</span>+b);&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(b&lt;c) &#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;c) &#123;System.out.println(<span class="string">&quot;升序排序后，结果为：&quot;</span>+<span class="string">&#x27;\r&#x27;</span>+<span class="string">&quot;c=&quot;</span>+b+<span class="string">&quot;,b=&quot;</span>+a+<span class="string">&quot;,a=&quot;</span>+c);&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;System.out.println(<span class="string">&quot;升序排序后，结果为：&quot;</span>+<span class="string">&#x27;\r&#x27;</span>+<span class="string">&quot;c=&quot;</span>+b+<span class="string">&quot;,b=&quot;</span>+c+<span class="string">&quot;,a=&quot;</span>+a);&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;System.out.println(<span class="string">&quot;升序排序后，结果为：&quot;</span>+<span class="string">&#x27;\r&#x27;</span>+<span class="string">&quot;c=&quot;</span>+c+<span class="string">&quot;,b=&quot;</span>+b+<span class="string">&quot;,a=&quot;</span>+a);&#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="编写程序判断某一个年份是否为闰年"><a href="#编写程序判断某一个年份是否为闰年" class="headerlink" title="编写程序判断某一个年份是否为闰年"></a>编写程序判断某一个年份是否为闰年</h3><p>本案例需要使用交互的方式判断某年是否为闰年：用户从控制台输入需要判断的年份值，由程序使用if-else判断该年是否为闰年，并将判断结果输出到控制台。程序交互过程如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/JOEL-T99/Pic//img/%E5%9B%BE%E7%89%87d4.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入年份（例如2012）&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line"><span class="keyword">if</span> (a%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; a%<span class="number">100</span>!=<span class="number">0</span> || a%<span class="number">400</span>==<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(a+<span class="string">&quot;是闰年&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;System.out.println(a+<span class="string">&quot;是平年&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数列求和"><a href="#数列求和" class="headerlink" title="数列求和"></a>数列求和</h3><p>有数列为：9，99，999，…，9999999999。要求使用程序计算此数列的和，并在控制台输出结果。交互效果如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/JOEL-T99/Pic//img/%E5%9B%BE%E7%89%875.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++) &#123;</span><br><span class="line">a = a*<span class="number">10</span> + <span class="number">9</span>;</span><br><span class="line">sum += a;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;9+99+999+...+9999999999=&quot;</span>+sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询数组最小值，并将数组扩容形成新数组"><a href="#查询数组最小值，并将数组扩容形成新数组" class="headerlink" title="查询数组最小值，并将数组扩容形成新数组"></a>查询数组最小值，并将数组扩容形成新数组</h3><p>创建程序，实现查询数组中最小值的功能，并将最小值放入数组的第一位。需求为：创建一个长度为 10 的数组，数组内放置 10 个 0 到 99 之间（包含0，包含99）的随机整数作为数组元素，要求查询出数组中的最小值，并打印显示在界面上。然后，将数组的长度扩容为 11，将查询到的数组最小值记载为数组的第一个元素，并打印扩容后的数组的内容。界面效果如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/JOEL-T99/Pic//img/%E5%9B%BE%E7%89%876.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">47</span>,<span class="number">66</span>,<span class="number">27</span>,<span class="number">74</span>,<span class="number">24</span>,<span class="number">85</span>,<span class="number">46</span>,<span class="number">97</span>,<span class="number">45</span>,<span class="number">39</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;数组中的数据为：[47,66,27,74,24,85,46,97,45,39]&quot;</span>);</span><br><span class="line"><span class="comment">//筛选最小值</span></span><br><span class="line"><span class="keyword">int</span> min = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:a) &#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;min) &#123;</span><br><span class="line">min = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Arrays.sort(a);</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;最小值是：&quot;+a[0]);</span></span><br><span class="line">System.out.println(<span class="string">&quot;最小值是：&quot;</span>+min);</span><br><span class="line"><span class="comment">//利用Arrays.copyOf扩容，将长度加一的数组替换为新数组</span></span><br><span class="line"><span class="keyword">int</span>[] a2 = Arrays.copyOf(a,a.length+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span>[] a3 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>];</span><br><span class="line">a3[<span class="number">0</span>] = min;</span><br><span class="line">System.arraycopy(a,<span class="number">0</span>, a3,<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a3.length;i++)&#123;</span><br><span class="line">System.out.println(a3[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;数组中的数据为：[24，47,66,27,74,24,85,46,97,45,39]&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
