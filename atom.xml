<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JOEL-T99</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-01-27T11:42:30.360Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JOEL-T99</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA（十三）文件操作-File</title>
    <link href="http://yoursite.com/2021/01/27/JAVA%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C-File/"/>
    <id>http://yoursite.com/2021/01/27/JAVA%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C-File/</id>
    <published>2021-01-27T03:41:25.000Z</published>
    <updated>2021-01-27T11:42:30.360Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文件操作—File"><a href="#文件操作—File" class="headerlink" title="文件操作—File"></a>文件操作—File</h1><h2 id="File—文件"><a href="#File—文件" class="headerlink" title="File—文件"></a>File—文件</h2><p>java.io.File用于表示文件（目录），可以通过File类在程序上操作硬盘上的文件和目录。</p><p>File类只用于表示文件（目录）的信息（名称、大小），换句话说只能访问文件或目录的相关属性，不能对文件的内容进行访问。</p><h3 id="File-pathname"><a href="#File-pathname" class="headerlink" title="File(pathname)"></a>File(pathname)</h3><ul><li><p>File提供了较多的构造方法来创建实例，其中之一就是：</p><p>File(String pathname)</p></li></ul><p>通过将给定路径名字符串转换成抽象路径名来创建一个新File实例。</p><p>提示：抽象路径应尽量使用相对路径，并且目录的层级分隔符不要直接写“/”或“\”，应当使用File.separator这个常量表示，以避免不同系统带来的差异。</p><h3 id="File-parent-child"><a href="#File-parent-child" class="headerlink" title="File(parent, child)"></a>File(parent, child)</h3><ul><li><p>File的另一个构造方法：</p><p>File(File parent, String child);</p></li></ul><p>根据parent抽象路径名和child路径名字符串创建一个新的实例。</p><h3 id="isFile-方法"><a href="#isFile-方法" class="headerlink" title="isFile()方法"></a>isFile()方法</h3><p>File的isFile方法用于判断当前File对象表示的是否为一个文件。</p><ul><li>其语法结构为：long length();</li></ul><p>该方法返回的long值表示该文件所占有的字节量。</p><h3 id="exists方法"><a href="#exists方法" class="headerlink" title="exists方法"></a>exists方法</h3><p>File的exists方法用于判断此抽象路径名表示的文件或目录是否存在。</p><ul><li>其语法结构为：boolean exists();</li></ul><p>若该File表示的文件或目录存在则返回true，否则返回false。</p><h3 id="createNewFile方法"><a href="#createNewFile方法" class="headerlink" title="createNewFile方法"></a>createNewFile方法</h3><p>File的createNewFile方法用于当且仅当不存在具有此抽象路径名指定的名称的文件时，原地创建一个新文件。</p><ul><li>其语法结构为：boolean createNewFile();</li></ul><p>返回值：若果指定的文件不存在并成功的创建，则返回true；如果指定的文件已经存在，则返回false。</p><h3 id="delete方法"><a href="#delete方法" class="headerlink" title="delete方法"></a>delete方法</h3><p>File的delete方法用于删除此抽象路径名表示的文件或目录。</p><ul><li>其语法结构为：boolean delete();</li></ul><p>返回值：当且仅当成功删除文件或目录时，返回true；否则返回false。</p><p>⚠️！注意：若此File对象所表示的是一个目录时，在删除时需要保证此为空目录才可以成功删除（目录中不能含有任何子项）。</p><h2 id="File—目录"><a href="#File—目录" class="headerlink" title="File—目录"></a>File—目录</h2><h3 id="isDirectory-方法"><a href="#isDirectory-方法" class="headerlink" title="isDirectory()方法"></a>isDirectory()方法</h3><p>File的isDirectory方法用于判断当前File对象表示的是否为一个目录。</p><ul><li>其语法结构为：boolean isDirectory();</li></ul><p>返回值：若File对象表示的是一个目录，则返回true。</p><h3 id="mkdir方法"><a href="#mkdir方法" class="headerlink" title="mkdir方法"></a>mkdir方法</h3><p>File的mkdir方法用于创建此抽象路径名指定的目录。</p><ul><li>其语法结构为：boolean mkdir();</li></ul><p>返回值：当且仅当以创建目录时，返回true；否则返回false。</p><h3 id="mkdirs方法"><a href="#mkdirs方法" class="headerlink" title="mkdirs方法"></a>mkdirs方法</h3><p>File的mkdirs方法用于创建此抽象路径名指定的目录，包括所有必需但不存在的父目录。⚠️！此操作失败时也可能已经成功创建了一部分必需的父目录。</p><ul><li>其语法结构为：boolean mkdirs;</li></ul><p>返回值：当且仅当已创建目录及所有必需的父目录时，返回true；否则返回false。</p><h3 id="listFile方法"><a href="#listFile方法" class="headerlink" title="listFile方法"></a>listFile方法</h3><p>File的listFile方法用于返回一个抽象路径名数组，这些路径名表示此抽象路径名表示的目录中的文件。</p><ul><li>其语法结构为：File[] listFiles();</li></ul><p>返回值：抽象路径名数组，这些路径名表示此抽象路径名表示的目录中的文件和目录。如果目录为空，那么数组也将为空。如果抽象路径名不表示一个目录，或发生I/O错误，则返回null。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java（十二）集合</title>
    <link href="http://yoursite.com/2021/01/25/Java%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2021/01/25/Java%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E9%9B%86%E5%90%88/</id>
    <published>2021-01-25T06:58:27.000Z</published>
    <updated>2021-01-27T06:42:34.584Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><ul><li>Java提供了一种可以存放一组数据的数据结果，称之为集合</li><li>Collection是一个父接口， 其定义了集合的相关功能</li></ul><h3 id="List-Set"><a href="#List-Set" class="headerlink" title="List / Set"></a>List / Set</h3><ul><li>Collection派生类两个字接口，一个List，另一个是Set</li><li>List是可重复集，该集合允许存放重复元素，所谓的重复并非是同一个元素，而是指equals方法比较为true的元素</li><li>Set是不可重复集，该集合中不能将相同的元素存入集合两次</li></ul><h3 id="集合持有对象的引用"><a href="#集合持有对象的引用" class="headerlink" title="集合持有对象的引用"></a>集合持有对象的引用</h3><ul><li>集合中存储的都是引用类型元素，引用类型变量实际上存储的是对象的地址信息，所以实际上集合只存储了元素对象在堆中的地址，并不是将对象本身存入了集合</li></ul><h3 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h3><ul><li>Collection定义add方法用于向集合中添加新元素</li><li><code>boolean add(E e)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义String类型的集合</span></span><br><span class="line">Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//向集合中添加新元素</span></span><br><span class="line">c.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">c.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">c.add(<span class="string">&quot;Python&quot;</span>);</span><br><span class="line">c.add(<span class="string">&quot;PHP&quot;</span>);</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="contains方法"><a href="#contains方法" class="headerlink" title="contains方法"></a>contains方法</h3><ul><li><p><code>boolean contains(Object o)</code></p><p>用于判断给定的元素是否被包含在集合中，若包含则返回true，不包含返回false</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Collection&lt;Cell&gt; c = <span class="keyword">new</span> ArrayList&lt;Cell&gt;();</span><br><span class="line">c.add(<span class="keyword">new</span> Cell(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">c.add(<span class="keyword">new</span> Cell(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">c.add(<span class="keyword">new</span> Cell(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">c.add(<span class="keyword">new</span> Cell(<span class="number">4</span>,<span class="number">5</span>));</span><br><span class="line">c.add(<span class="keyword">new</span> Cell(<span class="number">5</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">Cell a = <span class="keyword">new</span> Cell(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//判断给定的元素是否被包含在集合中，若包含则返回true，不包含返回false</span></span><br><span class="line"><span class="keyword">boolean</span> flag = c.contains(a);</span><br><span class="line">System.out.println(flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="size-clear-isEmpty"><a href="#size-clear-isEmpty" class="headerlink" title="size / clear / isEmpty"></a>size / clear / isEmpty</h3><ul><li><code>int size();</code> 获取当前集合中元素的总和</li><li><code>void clear();</code> 清空集合</li><li><code>boolean isEmpty();</code> 判断当前集合是否不包含元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">  c.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">  <span class="keyword">int</span> s =c.size();</span><br><span class="line">  System.out.println(s);</span><br><span class="line">  c.clear();</span><br><span class="line">  c.add(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">  System.out.println(c);</span><br><span class="line">  <span class="keyword">boolean</span> i = c.isEmpty();</span><br><span class="line">  System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><h2 id="Collection-1"><a href="#Collection-1" class="headerlink" title="Collection"></a>Collection</h2><h3 id="addAll和containall方法"><a href="#addAll和containall方法" class="headerlink" title="addAll和containall方法"></a>addAll和containall方法</h3><ul><li><p><code>boolean addAll(Collection c)</code></p><p>用于将给定的集合中所有元素添加到当前集合中</p></li><li><p><code>boolean conatinAll(Collection c)</code></p><p>用于判断当前集合是否包含给定集合中的所有元素</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Collection&lt;String&gt; c1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">c1.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">c1.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">Collection&lt;String&gt; c2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">c2.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">c2.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="comment">//判断给定的元素是否被包含在集合中，若包含则返回true，不包含返回false</span></span><br><span class="line">System.out.println(c1.containsAll(c2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><ul><li>Collection提供了一个遍历集合的通用方法，迭代器</li><li><code>Iterator iterator()</code> 迭代器是一个接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Collection&lt;String&gt; c = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">  c.add(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;php&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">  <span class="comment">//Iterator iterator()迭代器是一个接口</span></span><br><span class="line">  Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line">  <span class="comment">//判断集合是否还有元素可以遍历</span></span><br><span class="line">  <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">    String str = it.next();</span><br><span class="line">    System.out.println(str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hasNext和next方法"><a href="#hasNext和next方法" class="headerlink" title="hasNext和next方法"></a>hasNext和next方法</h3><ul><li><code>boolean hasNext();</code> 判断集合是否含有元素可以遍历</li><li><code>E next()</code> 返回迭代的下一个元素</li><li>迭代器遵循“<strong>先问后取</strong>”的方式。当确定hasNext方法的返回值为true时，再通过next方法取元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Collection&lt;String&gt; c = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">  c.add(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;php&quot;</span>);</span><br><span class="line">  c.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">  System.out.println(c);</span><br><span class="line">  <span class="comment">//Iterator iterator()迭代器是一个接口</span></span><br><span class="line">  Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line">  <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">    String str = it.next();</span><br><span class="line">    <span class="keyword">if</span>(str.indexOf(<span class="string">&quot;c&quot;</span>) != -<span class="number">1</span>) &#123;  <span class="comment">//检索字母c</span></span><br><span class="line">      it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(c);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h3><ul><li><p><code>void remove()</code></p><p>用于删除迭代器当次从集合中获取的元素</p></li></ul><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><ul><li><p>Java5.0之后推出新特性，增强for循环，也称之为新循环。该循环不通用于传统循环的工作，只用于遍历集合或数组</p></li><li><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (元素类型 e:集合或数组名)&#123;</span><br><span class="line">  循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新循环并非新语法，而是在编译过程中，编译器会将新循环转换为迭代器模式，所以新循环本质上是迭代器</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Collection&lt;Integer&gt; c = <span class="keyword">new</span> HashSet&lt;Integer&gt;(); </span><br><span class="line">  c.add(<span class="number">123</span>);</span><br><span class="line">  c.add(<span class="number">234</span>);</span><br><span class="line">  c.add(<span class="number">345</span>);</span><br><span class="line">  c.add(<span class="number">456</span>);</span><br><span class="line">  c.add(<span class="number">567</span>);</span><br><span class="line">  <span class="comment">//增强for循环</span></span><br><span class="line">  <span class="keyword">for</span>(Integer a : c) &#123;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型机制"><a href="#泛型机制" class="headerlink" title="泛型机制"></a>泛型机制</h2><h3 id="泛型在集合中的应用"><a href="#泛型在集合中的应用" class="headerlink" title="泛型在集合中的应用"></a>泛型在集合中的应用</h3><p>泛型是Java SE 5.0引入的特性，泛型的本质是参数化类型。在类、接口和方法的定义过程中，所操控的数据类型被传入的参数指定。</p><ul><li><p>Java泛型机制广泛应用在集合框架中。所有的集合类型都带有泛型参数，这样在创建集合时可以指定放入集合中的对象类型。Java编译器可以据此进行类型检查。</p></li><li><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如ArrayList，其定义时是这样的：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    … … …                </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;…&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;…&#125;;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">由此我们可以看出，再声明ArrayList时，类名的右侧有一个&lt;E&gt;。“&lt;&gt;”表示泛型，而其中可以使用数字字母下划线（数字不能时第一个字符）来表示泛型的名字。（通常我们使用一个大写字母来表示）这时，在类中声明的方法的参数，返回值类型可以被定义为泛型。这样创建对象可以将类型最为参数传递，此时，类定义所有的E将被替换成传入的参数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//泛型E在这里被指定为String类型</span></span><br><span class="line">list.add(<span class="string">&quot;One&quot;</span>);<span class="comment">//那么add方法的参数就被替换为String类型</span></span><br><span class="line">list.add(<span class="number">100</span>);<span class="comment">//这里就会出现编译错误，因为这里的参数应为String类型。</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="集合操作——线性表"><a href="#集合操作——线性表" class="headerlink" title="集合操作——线性表"></a>集合操作——线性表</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List接口是Collection的子接口，用于定义线性表数据结构；可以将List理解为存放对象的数组，只不过其元素可以动态的增加或减少，并且<strong>List是可重复集</strong>。</p><h3 id="ArrayList-LinkedList"><a href="#ArrayList-LinkedList" class="headerlink" title="ArrayList / LinkedList"></a>ArrayList / LinkedList</h3><p>List接口的两个成见的实现类ArrayList和LinkedList，分别用动态数组和链表实现类接口</p><p>可以认为ArrayList和LinkedList的方法在逻辑上完全一样。只是在性能上有一定的差别。ArrayList更适用于随机访问而LinkedList更适合于插入和删除；在性能要求不是特别苛刻的情形下可以忽略这个差别。</p><h3 id="get与get方法"><a href="#get与get方法" class="headerlink" title="get与get方法"></a>get与get方法</h3><p>List除了继承Collection定义的方法外，还根据其线性表的数据结构定义了一系列方法，其中最常用的就是<strong>基于下标的get和set方法</strong>。</p><ul><li><p><code>E get(int index);</code></p><p>获取集合中指定下标对应的元素，下标从0开始。</p></li><li><p><code>E set(int index, E element);</code></p><p>将给定的元素存入给定的位置，并将原位置的元素返回。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">   <span class="comment">//get方法遍历List</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br><span class="line">String value = list.set(<span class="number">1</span>,<span class="string">&quot;F&quot;</span>);</span><br><span class="line">System.out.println(value);<span class="comment">//b</span></span><br><span class="line">System.out.println(list);<span class="comment">//[a, F, c, d, e]</span></span><br><span class="line">   <span class="comment">//交换位置1和3上的元素</span></span><br><span class="line">   list.set(<span class="number">1</span>, list.set(<span class="number">3</span>, list.get(<span class="number">1</span>)));</span><br><span class="line">System.out.println(list);<span class="comment">//[a, d, c, F, e]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h3><p>List根据<strong>下标</strong>的操作还支持插入与删除操作：</p><ul><li><p><code>Void add(int index,E element);</code></p><p>将给定的元素插入到指定位置，原位置及后续元素顺序向后移动</p></li><li><p><code>E remove (int index);</code></p><p>删除给定位置的元素，并将被删除的元素返回。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="comment">//将下标为1的元素替换为指定元素</span></span><br><span class="line">list.add(<span class="number">1</span>, <span class="string">&quot;D&quot;</span>);</span><br><span class="line">System.out.println(list);<span class="comment">//[a, D, b, c]</span></span><br><span class="line"><span class="comment">//将下标为2的元素删除</span></span><br><span class="line">list.remove(<span class="number">2</span>);</span><br><span class="line">System.out.println(list);<span class="comment">//[a, D, c]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="subList方法"><a href="#subList方法" class="headerlink" title="subList方法"></a>subList方法</h3><p>List的subList方法用于获取子List。</p><p>需要注意的是，subList获取的List与原List<strong>占有相同的储存空间</strong>，对子List的操作会影响原List。</p><ul><li><code>List&lt;E&gt; subList(int formIndex,int toindex);</code>            <strong>含头不含尾</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="comment">//向list中添加数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">list.add(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);<span class="comment">//[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">//找出指定范围的元素，含头不含尾</span></span><br><span class="line"><span class="comment">//subList获取的List和原List占有相同的数据空间</span></span><br><span class="line">List&lt;Integer&gt; sublist = list.subList(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line"><span class="comment">//将提取出来的子表每位*10</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sublist.size(); i++) &#123;</span><br><span class="line">sublist.set(i, sublist.get(i)*<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sublist);<span class="comment">//[30, 40, 50, 60, 70]</span></span><br><span class="line">System.out.println(list);<span class="comment">//[0, 1, 2, 30, 40, 50, 60, 70, 8, 9]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="List转换为数组"><a href="#List转换为数组" class="headerlink" title="List转换为数组"></a>List转换为数组</h3><p>List和toArray方法用于将集合转换为数组。但实际上该方法是在Collection中定义的，所以所有的集合都具备这个功能。</p><ul><li>其有两个方法：<ol><li><code>Object[] toArray();</code></li><li><code>T[] toArray(T[] a);</code></li></ol></li></ul><p>其中第二个是比较常用的，我们可以传入一个指定类型的数组，该数组的元素类型应与集合的元素类型保持一致。返回值则是转换后的数组，该数组会保存集合的所有元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="comment">//将list表通过toArray()方法转换为数组</span></span><br><span class="line"><span class="comment">//传入的数组不需要指定长度</span></span><br><span class="line">String[] arr = list.toArray(<span class="keyword">new</span> String[]&#123;&#125;);</span><br><span class="line">System.out.println(arr.toString());</span><br><span class="line"><span class="comment">//重写toString</span></span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组转换为List"><a href="#数组转换为List" class="headerlink" title="数组转换为List"></a>数组转换为List</h3><p>Arrays类中提供了一个静态方法asList，使用该方法我们将一个数组转换为对应的List集合。</p><ul><li><p>其定义方法为：</p><p><code>Static List&lt;T&gt; asList(T...a);</code></p></li></ul><p>返回的List的集合元素类型由传入的数组的元素类型决定。</p><p>⚠️！注意：返回的集合我们不能对其增删元素，否则会抛出异常。并且对集合的元素进行的修改会影响数组对应的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String[] arr = &#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//将数组arr通过Arrays.asList()方法转换为list表</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(arr);</span><br><span class="line">System.out.println(list);</span><br><span class="line">list.add(<span class="string">&quot;d&quot;</span>);<span class="comment">//抛出异常：UnsupportedOperationException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//java.utilArray$ArrayList</span></span><br><span class="line"><span class="comment">//得到list表的类和名字</span></span><br><span class="line">System.out.println(list.getClass().getName());</span><br><span class="line">List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list2.addAll(list);</span><br><span class="line">System.out.println(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List排序"><a href="#List排序" class="headerlink" title="List排序"></a>List排序</h2><h3 id="Collections-sort方法实现排序"><a href="#Collections-sort方法实现排序" class="headerlink" title="Collections.sort方法实现排序"></a>Collections.sort方法实现排序</h3><p>Collections是集合的工具类，它提供了很多便于我们操作集合的方法。</p><ul><li><p>该方法的定义为：</p><p><code>void sort(List&lt;T&gt; list);</code></p><p>其作用是对集合元素进行自然排序（小至大）。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">  <span class="comment">//随机生成数</span></span><br><span class="line">  Random r = <span class="keyword">new</span> Random();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    list.add(r.nextInt(<span class="number">100</span>));<span class="comment">//nextInt(100):获得100以内的随机数</span></span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(list);<span class="comment">//[76, 98, 24, 13, 44, 16, 50, 57, 20, 21]</span></span><br><span class="line">  Collections.sort(list);</span><br><span class="line">  <span class="comment">//升序排序</span></span><br><span class="line">  System.out.println(list);<span class="comment">//[13, 16, 20, 21, 24, 44, 50, 57, 76, 98]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h3><p>若想对某个集合的元素集合自然排序，该集合的元素有一个要求，就是这些元素必须是Comparable的子类</p><ul><li><p>Comparable是一个接口，用于定义其子类是可比较的，因为该接口有一个抽象方法：</p><p><code>int comparableTo(T t);</code></p></li></ul><p>所有子类都需要重写该方法来定义对象间的比较规律，该方法要求返回一个整数，这个整数不关心具体的值，而是关注取值范围。</p><ol><li>当返回值&gt;0时，表示当前对象比参数给定的对象大</li><li>当返回值&lt;0时，表示当前对象比参数给定的对象小</li><li>当返回值=0时，表示当前对象和参数给定的对象相等</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cell</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Cell</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> row;</span><br><span class="line"><span class="keyword">int</span> col;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cell</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.row = row;</span><br><span class="line"><span class="keyword">this</span>.col = col;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Cell c)</span> </span>&#123;</span><br><span class="line"><span class="comment">//根据row比较大小</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.row - c.row;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么Collections的sort在进行排序时就会根据集合中元素的compareTo方法的返回值来判断大小从而进行自然排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;Cell&gt; cell = <span class="keyword">new</span> ArrayList&lt;Cell&gt;();</span><br><span class="line">cell.add(<span class="keyword">new</span> Cell(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">cell.add(<span class="keyword">new</span> Cell(<span class="number">4</span>,<span class="number">3</span>));</span><br><span class="line">cell.add(<span class="keyword">new</span> Cell(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">Collections.sort(cell);</span><br><span class="line">System.out.println(cell);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="comparator"><a href="#comparator" class="headerlink" title="comparator"></a>comparator</h3><p>一旦Java类实现了Comparable，其比较逻辑就已经确定；如果希望在排序的操作中临时指定比较规定，可以采用Comparator接口回调的方式。</p><ul><li><p>该接口要求实现类必须重写其定义的方法：</p><p><code>int compare(T o1, T o2);</code></p></li></ul><p>该方法的返回值要求，o1&gt;o2则返回值应&gt;0，若o1&lt;o2则返回值应&lt;0，若o1=o2则返回值应为0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;Cell&gt; cell = <span class="keyword">new</span> ArrayList&lt;Cell&gt;();</span><br><span class="line">cell.add(<span class="keyword">new</span> Cell(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">cell.add(<span class="keyword">new</span> Cell(<span class="number">4</span>,<span class="number">3</span>));</span><br><span class="line">cell.add(<span class="keyword">new</span> Cell(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line"><span class="comment">//Comparator为接口</span></span><br><span class="line"><span class="comment">//按照col值的大小排序</span></span><br><span class="line">Collections.sort(cell, <span class="keyword">new</span> Comparator&lt;Cell&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Cell o1, Cell o2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> o1.col-o2.col;&#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(cell);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列和栈"><a href="#队列和栈" class="headerlink" title="队列和栈"></a>队列和栈</h2><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>队列（Queue）时常用的数据结构，可以将队列看成特殊的线性表，队列限制了对线性表的访问方式：只能从线性表的一端添加（offer）元素，另一端取出（poll）元素。</p><p>队列遵循“先进先出”原则。</p><p>JDK中提供了Queue接口，同时使得LinkedList实现了该接口（选择LinkedList实现Queue的原因在于Queue经常要惊醒插入和删除的操作，而LinkedList在这方面效率较高）。</p><ul><li><p>Queue提供了操作队列的相关方法，其主要方法如下：</p><ol><li><p><code>Boolean oft(E e);</code></p><p>将元素添加到队列的末尾，若添加成功返回true</p></li><li><p><code>E poll();</code></p><p>从队首删除并返回该元素</p></li><li><p><code>E peek();</code></p><p>返回队首元素，但不删除</p></li></ol></li></ul><h3 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h3><p>Deque是Queue的子接口，定义了所谓“双端队列”即从队列的两端分别可以入队（offer）和出队（poll），LinkedList实现了该接口。</p><p>如果将Deque限制为只能从一端入队和出队，则可以实现“栈（stack）”的数据结构，对于栈而言，入栈称之为push，出栈称之为pop。</p><p>栈遵循“先进后出”的原则。</p><ul><li><p>Deque提供了操作栈的相关方法，其主要方法如下：</p><ol><li><p><code>void push(E e);</code></p><p>将给定元素“压入”栈汇总，存入的元素会在栈首。即：栈的第一个元素。</p></li><li><p><code>E pop();</code></p><p>将栈首元素删除并返回。</p></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Deque&lt;String&gt; stack = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"><span class="comment">//void push(E e)将给定的元素&quot;压入&quot;栈中</span></span><br><span class="line">stack.push(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">stack.push(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">stack.push(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">System.out.println(stack);</span><br><span class="line">System.out.println(stack.peek());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><p>Java提供了一组可以以键值对（key-value）的形式存储数据的数据结构，这种结构称之为Map。可以Map看成一个多行两列的表格，其中第一列存储key，第二列存储value，而每一行就相当于一组key-value对，表示一组数据结构。</p><p>Map对存入的元素只有一个要求，就是key不能重复，所谓的不能重复指的是Map中不能包含两个equals为true的key。</p><p>Map对于key、value的类型没有严格要求，只要是引用类型均可。但是为了保证在使用时不会造成数据混乱，通常我们会使用泛型去约束key与value的类型。</p><h3 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h3><ul><li>Map提供了一个方法：<code>V put(K k,V v);</code></li></ul><p>该方法的作用是将key-value对存入Map中，因为Map中不允许出现重复的key，所以若当次存入的key已经在Map中存在，则是替换value，而返回值则为被替换的元素。若key不存在，那么返回值就为null。</p><h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><ul><li>Map提供了一个方法：<code>V get(Object key);</code></li></ul><p>该方法的作用是根据给定的key去查找Map中对应的value并返回，若当前Map汇总不包含给定的key，那么返回值为null。</p><h3 id="containKey方法"><a href="#containKey方法" class="headerlink" title="containKey方法"></a>containKey方法</h3><ul><li>其方法定义如下：<code>boolean containsKey(Object key);</code></li></ul><p>若当前Map中包含给定的key（这里检查是否包含是根据key的equals比较结果为依据的）则返回true</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="hash表原理"><a href="#hash表原理" class="headerlink" title="hash表原理"></a>hash表原理</h3><p>HashMap是Map的一个常用的子类实现，其实使用散列算法实现的。</p><p>HashMap内部维护着一个散列数组（就是一个存放元素的数组）称之为散列桶，而当我们向HashMap中存入一组键值对时，HashMap首先获取key这个对象的hashcode()方法的返回值，然后使用该值进行散列算法，得出一个数字，这个数字就是这组键值对要存入散列数组的中的下标位置。</p><p>得到了这个下标位置后，HashMap还会查看散列数组当前位置是否包含该元素。（这里要注意的是，散列数组中每个元素并非是直接存储键值对的，而是存入了一个链表，这个链表中的每个节点才是真实保存这组键值对的）检查是否包含该元素时根据当前要存入的key在当前位散列数组对应位置中的链表里是否已经包含这个key，若不包含则将这组键值对存入链表，否则就替换value。</p><p>那么在获取元素时，HashMap同样先根据hashcode值进行散列算法，找到它在散列数组中的位置，然后进行遍历该位置的链表，找到该key所对应的value之后返回。</p><p>链表中只能存入一个元素，所以实际上，HashMap在放入一组键值对之前，会对这组键值对封装为一个Entry的实例，然后将该实例存入链表。</p><h3 id="hashcode-方法"><a href="#hashcode-方法" class="headerlink" title="hashcode()方法"></a>hashcode()方法</h3><p>HashMap的存取是依赖于key的hashcode方法的返回值的，而hashcode方法实际上是在Object中定义的。</p><ul><li><p>其定义如下：int hashCode();</p></li><li><p>重写一个类的hashcode()方法有以下注意事项：</p><ol><li>若一个类重写了equals方法，那就应当重写hashcode()方法。</li><li>若两个对象equals方法比较为true，那么他们就应当具有相同的hashcode值。</li><li>对于同一个对象而言，在内容没有发生改变的情况下，多次调用hashcode()方法应当总是返回相同的值。</li><li>对于两个对象equals比较为false的，并不要求hashcode值一定不同，但是应尽量保证不同，这样可以提高散列表性能。</li></ol></li></ul><h3 id="装载因子及HashMap优化"><a href="#装载因子及HashMap优化" class="headerlink" title="装载因子及HashMap优化"></a>装载因子及HashMap优化</h3><ul><li>在散列表中有以下名次需要了解：<ol><li>Capacity：容量。hash表里bucket（桶）的数量，也就是散列表的大小</li><li>Initial capacity：初始容量。创建hash表的初始bucket的容量，默认构建容量时16，也可以使用特定容量。</li><li>Size：大小。当前散列表中存储数据的容量</li><li>Load factor：加载因子。默认值0.75（就是75%），向散列表增加数据时如果size/capacity的值大于Local factory则发生扩容并且重新散列（rehash）。</li></ol></li></ul><p>那么加载因子较小时散列查找性能会提高，同时也浪费了散列桶空间容量，0.75的性能和空间相对平衡的结果，在创建散列表时指定合理容量，从而可以减少rehash提高性能。</p><h3 id="有序Map"><a href="#有序Map" class="headerlink" title="有序Map"></a>有序Map</h3><p>Map接口的哈希表和链表实现，具有可预知的迭代顺序。此实现与HashMap的不同在于LinkedHashMap维护着一个双向循环链表。此链表迭代顺序通常就是存放元素的顺序。</p><p>⚠️！注意：如果Map中重新存入已有的key，那么key的位置不会发生改变，只是将value值替换。</p><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java（十一）日期操作</title>
    <link href="http://yoursite.com/2021/01/25/Java%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E6%97%A5%E6%9C%9F%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2021/01/25/Java%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E6%97%A5%E6%9C%9F%E6%93%8D%E4%BD%9C/</id>
    <published>2021-01-25T06:33:25.000Z</published>
    <updated>2021-01-26T00:02:16.222Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="日期操作"><a href="#日期操作" class="headerlink" title="日期操作"></a>日期操作</h1><h3 id="Java中的时间"><a href="#Java中的时间" class="headerlink" title="Java中的时间"></a>Java中的时间</h3><ul><li>Java中的时间使用标准类库Date类表示，是用距离一个固定时间点的毫秒数，表达一个特定的时间点</li></ul><h3 id="Date类的介绍"><a href="#Date类的介绍" class="headerlink" title="Date类的介绍"></a>Date类的介绍</h3><ul><li>java.util.Date类封装日期及时间</li><li>Date类的大多数用于进行时间分量计算方法已经由Calendar取代</li></ul><h3 id="setTime-getTime"><a href="#setTime-getTime" class="headerlink" title="setTime / getTime"></a>setTime / getTime</h3><ul><li><p><code>void setTime(Long time)</code></p><p>用于为一个Date对象设置其需要表示的时间</p></li><li><p><code>Long getTime()</code></p><p>获取一个Date对象表示的时间点，1970.1.1 00:00:00距离此时的毫秒数</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(date);</span><br><span class="line"><span class="keyword">long</span> time = date.getTime();</span><br><span class="line">System.out.println(time);</span><br><span class="line">time += <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">1000</span>;</span><br><span class="line">date.setTime(time);</span><br><span class="line">System.out.println(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Date重写toString"><a href="#Date重写toString" class="headerlink" title="Date重写toString"></a>Date重写toString</h3><ul><li>Date重写同 String方法，用一个字符串来描述当前Date对象所表示的是时间</li></ul><h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><ul><li>是一个以与语言环境有关的方式来格式化解析日期的类</li></ul><h3 id="日期模式匹配字符串"><a href="#日期模式匹配字符串" class="headerlink" title="日期模式匹配字符串"></a>日期模式匹配字符串</h3><table><thead><tr><th>字符</th><th>含义</th><th>实例</th></tr></thead><tbody><tr><td>y</td><td>年</td><td>yyyy年</td></tr><tr><td>M</td><td>月</td><td>MM月</td></tr><tr><td>d</td><td>日</td><td>dd日</td></tr><tr><td>E</td><td>星期</td><td></td></tr><tr><td>a</td><td>上下午</td><td>am上午、pm下午</td></tr><tr><td>H</td><td>24小时制</td><td>HH点</td></tr><tr><td>h</td><td>12小时制</td><td>hh点</td></tr><tr><td>m</td><td>分</td><td>mm分</td></tr><tr><td>s</td><td>秒</td><td>ss秒</td></tr></tbody></table><h3 id="Date与String转化"><a href="#Date与String转化" class="headerlink" title="Date与String转化"></a>Date与String转化</h3><ul><li><p>将Date格式转化为String</p><p><code>String format(Date)</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="comment">//设定输出格式</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//接收</span></span><br><span class="line">String str = sdf.format(date);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>将String格式转化为Date</p><p><code>Date parse(String str)</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">String str = <span class="string">&quot;2021年1月25日 11:39:39&quot;</span>;</span><br><span class="line"><span class="comment">//将中式格式改为国际标准格式</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//抛出异常  throws ParseException</span></span><br><span class="line">Date date = sdf.parse(str);</span><br><span class="line">System.out.println(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h1 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h1><h3 id="Calendar简介"><a href="#Calendar简介" class="headerlink" title="Calendar简介"></a>Calendar简介</h3><ul><li>java.util.Calendar类用于封装日历信息，其主要作用在于时间分量的计算</li><li>Calendar是抽象类。本身不能被实例化</li></ul><h3 id="getInstance方法"><a href="#getInstance方法" class="headerlink" title="getInstance方法"></a>getInstance方法</h3><ul><li><p><code>Calendar getInstance()</code></p><p>该方法根据当前系统所在的区域获取一个适当的Calendar</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Calendar c = Calendar.getInstance();</span><br><span class="line">  System.out.println(c.getClass().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置日期及时间分量"><a href="#设置日期及时间分量" class="headerlink" title="设置日期及时间分量"></a>设置日期及时间分量</h3><ul><li><p><code>void set(int fidel, int value)</code></p><p>可通过对不同的时间分量设置不同的值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line">c.set(Calendar.YEAR, <span class="number">2021</span>);</span><br><span class="line">c.set(Calendar.MONTH, <span class="number">01</span>);</span><br><span class="line">c.set(Calendar.DATE, <span class="number">25</span>);</span><br><span class="line">System.out.println(c.getTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取时间分量对应的值"><a href="#获取时间分量对应的值" class="headerlink" title="获取时间分量对应的值"></a>获取时间分量对应的值</h3><ul><li><p><code>int get(int field)</code></p><p>可以通过对不同的时间分量获取相应的值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line"><span class="keyword">int</span> month = c.get(Calendar.MONTH);</span><br><span class="line">System.out.println(year);</span><br><span class="line">System.out.println(month);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getActualMaximum"><a href="#getActualMaximum" class="headerlink" title="getActualMaximum()"></a>getActualMaximum()</h3><ul><li>用于获取给定时间分量所允许的最大值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="comment">//获取给定时间分量所允许的最大值</span></span><br><span class="line"><span class="keyword">int</span> max = c.getActualMaximum(Calendar.DAY_OF_MONTH);</span><br><span class="line">System.out.println(max);</span><br></pre></td></tr></table></figure><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><ul><li><code>void add(int field, int ammount)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line">c.add(Calendar.DAY_OF_MONTH,<span class="number">7</span>);</span><br><span class="line">System.out.println(c.getTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（十）包装类</title>
    <link href="http://yoursite.com/2021/01/22/JAVA%EF%BC%88%E5%8D%81%EF%BC%89%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <id>http://yoursite.com/2021/01/22/JAVA%EF%BC%88%E5%8D%81%EF%BC%89%E5%8C%85%E8%A3%85%E7%B1%BB/</id>
    <published>2021-01-22T06:17:57.000Z</published>
    <updated>2021-01-22T07:53:53.171Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><h3 id="包装类概述"><a href="#包装类概述" class="headerlink" title="包装类概述"></a>包装类概述</h3><ul><li>Java的8种基本数据类型是以值的形式存在于内存中，而不是对象，不是Object的子类，不能参与面向对象的开发。</li></ul><h3 id="基本类型的包装类"><a href="#基本类型的包装类" class="headerlink" title="基本类型的包装类"></a>基本类型的包装类</h3><table><thead><tr><th>基本类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>java.lang.Byte</td></tr><tr><td>short</td><td>java.lang.Short</td></tr><tr><td>int</td><td>java.lang.Integer</td></tr><tr><td>long</td><td>java.lang.Long</td></tr><tr><td>float</td><td>java.lang.Float</td></tr><tr><td>double</td><td>java.lang.Double</td></tr><tr><td>char</td><td>java.lang.Character</td></tr><tr><td>boolean</td><td>java.lang.Boolean</td></tr></tbody></table><ul><li>其中除了Character和Boolean的父类是Object之外，其余的首饰继承java.lang.Number</li></ul><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><ul><li><p>这些包装类都有一个共性，描述的首饰数字</p><p>Number是一个抽象类</p><p>例如：abstract double doubleValue() 以double形式返回指定的数值</p></li></ul><h3 id="Integer常用功能"><a href="#Integer常用功能" class="headerlink" title="Integer常用功能"></a>Integer常用功能</h3><ul><li><p>Java.lang.Integer 是int的包装类，其每一个实例用于描述一个基本int的值</p></li><li><p>Integer 有一个静态方法</p><p>Static int parseInt(String s)</p><p>该方法的作用：将一个描述整数的字符串解析为该整数</p></li></ul><h3 id="Double常用功能"><a href="#Double常用功能" class="headerlink" title="Double常用功能"></a>Double常用功能</h3><ul><li><p>java.lang.Double是double的包装类，其每一个实例用于描述一个基本double的值</p></li><li><p>Double又一个静态方法</p><p>Static double praseDouble(String s)</p><p>该方法的作用：将一个描述浮点数的字符串解析为该整数</p><p>例如：</p><p>String a = “789.99”;</p><p>Double.praseDouble(a)        —&gt;789.99</p></li></ul><h3 id="自动装箱和拆箱操作"><a href="#自动装箱和拆箱操作" class="headerlink" title="自动装箱和拆箱操作"></a>自动装箱和拆箱操作</h3><ul><li><p>当我们需要将一个基本类型转化为包装类型，可以调用包装类的一个静态方法valueOf()；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line">Integer ac = Integer.valueOf(a);<span class="comment">//装箱</span></span><br><span class="line"><span class="keyword">double</span> z = <span class="number">9.9</span>;</span><br><span class="line">Double d = Double.valueOf(z);</span><br></pre></td></tr></table></figure></li><li><p>当我们需要将包装类型转换为基本类，可以调用包装类的xxxValue()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">int</span> n = i.intValue();</span><br><span class="line">Double a = <span class="keyword">new</span> Double(<span class="number">12.34</span>);</span><br><span class="line"><span class="keyword">double</span> x = a.doubleValue();<span class="comment">//拆箱</span></span><br></pre></td></tr></table></figure></li><li><p>Java5.0新特性，引入自动拆装箱操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">123</span>;<span class="comment">//自动装箱</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="keyword">new</span> Integer(<span class="number">123</span>);<span class="comment">//自动拆箱</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（九）Object</title>
    <link href="http://yoursite.com/2021/01/22/JAVA%EF%BC%88%E4%B9%9D%EF%BC%89Object/"/>
    <id>http://yoursite.com/2021/01/22/JAVA%EF%BC%88%E4%B9%9D%EF%BC%89Object/</id>
    <published>2021-01-22T05:53:38.000Z</published>
    <updated>2021-01-25T00:27:49.446Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Bbject"><a href="#Bbject" class="headerlink" title="Bbject"></a>Bbject</h1><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><ul><li>Object类是Java中所有类的顶级父类，如果一个类没有显式的使用extends继承某个类是，默认就是继承自Object类</li></ul><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><ul><li><p>Object类实现的toString方法不具备什么实际意义，所以若我们需要在子类中使用该方法是通常我们会重写它</p></li><li><p>重写toString方法的意义：</p><p>用一个字符串描述当前对象</p></li></ul><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><ul><li>重写equals应遵循几个原则<ol><li>任何对象与null比较都返回false</li><li>两个对象不属于同于个类是应返回false</li><li>同一个对象equals比较应当恒等于true</li><li>其他可以采用自己定义</li></ol></li></ul><h3 id="equals与“-”的区别"><a href="#equals与“-”的区别" class="headerlink" title="equals与“==”的区别"></a>equals与“==”的区别</h3><ul><li><p>“==”是值比较</p><p>对于应用类型变量而言，该变量保存的是对象地址，所以使用“==”比较时，意思为两个变量的地址是否相同，可以理解为两个引用的是否为用一个地址</p></li><li><p>equals时内容比较</p><p>对于两个引用变量而言，是比较两个变量所引用的对象是否相同</p></li><li><p>“==”判断是否为同一个，而“equals”是判断像不像</p></li></ul><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（八）字符串的基本操作</title>
    <link href="http://yoursite.com/2021/01/22/JAVA%EF%BC%88%E5%85%AB%EF%BC%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2021/01/22/JAVA%EF%BC%88%E5%85%AB%EF%BC%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2021-01-22T00:54:24.000Z</published>
    <updated>2021-01-22T07:38:14.387Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="字符串的基本操作"><a href="#字符串的基本操作" class="headerlink" title="字符串的基本操作"></a>字符串的基本操作</h1><h3 id="String及常见API"><a href="#String及常见API" class="headerlink" title="String及常见API"></a>String及常见API</h3><h3 id="String是不可变对象"><a href="#String是不可变对象" class="headerlink" title="String是不可变对象"></a>String是不可变对象</h3><ul><li>Java定义String对象为不可变对象，一旦在内存中创建，内容不能发生改变，若要对字符串改变，那么就会创建新的对象。这样做的目的是可以最大程度上重用相同内容的字符串以减少系统资源开销。</li></ul><h3 id="String常量池"><a href="#String常量池" class="headerlink" title="String常量池"></a>String常量池</h3><ul><li>给一个字符串做初始化时，JVM首先会从字符串的常量池中查询用来保存该字符串的对象是否已经存在，若存在直接引用，若不存在则创建该字符串的对象并存入常量池，然后引用它</li></ul><h3 id="内存编码及长度"><a href="#内存编码及长度" class="headerlink" title="内存编码及长度"></a>内存编码及长度</h3><ul><li>Java存储每一个字符均使用两个字节，都是使用的是 Unicode编码，并且任何一个字符（无论是中文还是英文）每个字符的长度都是1，所以字符串的长度就是该字符串所有的字符个数</li><li><code>int length();</code> 返回当前字符串的长度</li></ul><h3 id="使用-indexOf实现检索"><a href="#使用-indexOf实现检索" class="headerlink" title="使用 indexOf实现检索"></a>使用 indexOf实现检索</h3><ul><li><p><code>int indexOf(int ch)</code></p><p>用来检索给定的一个字符在当前字符串中第一次出现的下标位置</p></li></ul><h3 id="使用-subString-获取字符串"><a href="#使用-subString-获取字符串" class="headerlink" title="使用 subString 获取字符串"></a>使用 subString 获取字符串</h3><ul><li><p><code>String subString(int begin, int end)</code></p><p>用来截取当前字符部分内容以获取这个子字符串。begin代表从哪里开始，end代表是从哪里结束（含头不含尾）</p></li></ul><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><ul><li><p><code>String trim()</code></p><p>将字符串两边的空白去掉</p></li></ul><h3 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h3><ul><li><p><code>char charAt(int index)</code></p><p>用于给定一个下标位置，来获取该字符串中这个位置的字符串</p></li></ul><h3 id="startsWith-和-endsWith"><a href="#startsWith-和-endsWith" class="headerlink" title="startsWith 和 endsWith"></a>startsWith 和 endsWith</h3><ul><li><p><code>boolean startWith(String suffix)</code></p><p>用来判断当前字符串是否是以给定的字符串开始的</p></li><li><p><code>boolean endsWith(String suffix)</code></p><p>用来判断当前字符串是否是以给定的字符串结尾的</p></li></ul><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><ul><li><p><code>String toUpperCase()</code></p><p>用来将当前字符串中的英文部分全部转换为大写</p></li><li><p><code>String toLowerCase()</code></p><p>用来将当前字符串中的英文部分全部转换为小写</p></li></ul><h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h3><ul><li><p>字符串提供了很多重载的valueOf方法，可以将其他基本类型的值以字符串形式描述</p></li><li><p><code>static String valueOf(int i)</code> 返回int参数的字符串表示形式</p></li></ul><h3 id="StringBuilder封装可变字符串"><a href="#StringBuilder封装可变字符串" class="headerlink" title="StringBuilder封装可变字符串"></a>StringBuilder封装可变字符串</h3><ul><li>该类封装了可变的字符串，放我们需要改变字符串内容时，并不会和 i创建新的对象，而是在原有的基础上修改，从而减少了内存开销</li><li>常用方法：<ol><li><code>append(String Str);</code>        —&gt; 追加字符串</li><li><code>insert(int disOffset, String s);</code>    –&gt; 插入字符串</li><li><code>delete(int start, int end);</code>        —&gt; 删除字符串</li><li><code>replace(int start, int end, String str)</code></li></ol></li></ul><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><ul><li>StringBuilder是可变字符串，StringBuffer也是可变字符串</li><li>区别<ol><li>StringBuffer是线程安全，同步处理的，性能稍慢</li><li>StringBuilder是非线程安全的，并发处理的，性能稍快</li></ol></li></ul><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA （七）抽象类 / 接口 / 多态</title>
    <link href="http://yoursite.com/2021/01/21/JAVA-%EF%BC%88%E4%B8%83%EF%BC%89%E6%8A%BD%E8%B1%A1%E7%B1%BB%20:%20%E6%8E%A5%E5%8F%A3%20:%20%E5%A4%9A%E6%80%81/"/>
    <id>http://yoursite.com/2021/01/21/JAVA-%EF%BC%88%E4%B8%83%EF%BC%89%E6%8A%BD%E8%B1%A1%E7%B1%BB%20:%20%E6%8E%A5%E5%8F%A3%20:%20%E5%A4%9A%E6%80%81/</id>
    <published>2021-01-21T07:03:34.000Z</published>
    <updated>2021-01-22T00:17:01.191Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><h3 id="使用抽象类"><a href="#使用抽象类" class="headerlink" title="使用抽象类"></a>使用抽象类</h3><ul><li><p>抽象方法和抽象类</p><p>由<code>abstract</code>修饰的方法为抽象方法，抽象方法即只有方法的定义，没有方法的实现，由一个分号结尾。即方法五要素缺少了一个（方法体），可以将抽象方法理解为不完整的方法</p></li><li><p>若抽象方法包含在类中，则该类以为抽象类，该类也不完整，抽象类由<code>abstract</code>修饰</p></li><li><p>抽象类是不能实例化对象，而一个类不能被实例化湿没有任何意义的，所以，需要定义类来继承他。而一个类继承了抽象类，则应该重写其抽象方法。</p></li></ul><h3 id="抽象类的意义"><a href="#抽象类的意义" class="headerlink" title="抽象类的意义"></a>抽象类的意义</h3><ul><li>定义抽象类的意义在于：<ol><li>为其子类提供一个公共的类型</li><li>让其子类继承之后完成具体的实现</li></ol></li></ul><p>&nbsp;</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><ul><li>接口可以堪称是特殊的抽象类，即指包含抽象方法的常量的抽象类通过<code>interface</code>关键字来定义接口</li></ul><h3 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h3><ul><li>与继承不同，一个类可以实现多个接口，实现的接口之间用逗号分隔。当然，该类需要实现这些接口中定义的所有方法</li><li>一个类可以通过<code>implements</code>关键字“实现接口”</li></ul><h3 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h3><ul><li><p>接口间可以存在继承关系，一个接口可以过<code>extends</code>关键字继承另外一个接口，字接口继承了父接口定义的所有方法</p></li><li><p>如果在一个类中需要同时继承一个类实现一个或者多个接口时，继承（extends）要写在实现（implements）的前面</p><p>语法：<code>class 类名 extends 父类 implement 接口1，接口2...</code></p></li><li><p>接口可继承多个父接口（即：接口是多继承的）;abstract若没写，系统会自动加上</p><p>语法<code>[修饰符] (abstract) interface 接口名[extends 父接口1,父接口2...]</code></p></li></ul><h3 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h3><ul><li>一个类只能继承一个抽象类，但可以实现多个接口</li><li>抽象类中可以包含抽象方法和非抽象方法，而接口中所有的方法都是抽象的</li><li>子类继承抽象类应该完成抽象类中所有的抽象方法，否则子类也必须是抽象类；子类实现接口则必须完成其所有的抽象方法</li></ul><p>&nbsp;</p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h3 id="多态-1"><a href="#多态-1" class="headerlink" title="多态"></a>多态</h3><ul><li>多态，即多种状态</li><li>一个类型的引用在指向不同的对象是会有不同的实现</li><li>同一个对象，造型成不同的类型时，会有不同的功能</li></ul><h3 id="向上造型"><a href="#向上造型" class="headerlink" title="向上造型"></a>向上造型</h3><ul><li>父类的引用指向子类的对象</li></ul><h3 id="强制转型（向下造型）"><a href="#强制转型（向下造型）" class="headerlink" title="强制转型（向下造型）"></a>强制转型（向下造型）</h3><ul><li>在强制转型中，必须满足两个条件之一，即前后两者必须时继承关系或实现关系。</li><li>使用<code>instanceof</code>关键字实现强制转型，返回true或false</li></ul><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（六）static / final</title>
    <link href="http://yoursite.com/2021/01/21/JAVA%EF%BC%88%E5%85%AD%EF%BC%89static%20:%20final/"/>
    <id>http://yoursite.com/2021/01/21/JAVA%EF%BC%88%E5%85%AD%EF%BC%89static%20:%20final/</id>
    <published>2021-01-21T01:06:23.000Z</published>
    <updated>2021-01-21T23:53:12.603Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><h3 id="static修饰成员变量"><a href="#static修饰成员变量" class="headerlink" title="static修饰成员变量"></a>static修饰成员变量</h3><ul><li>static关键字可以修饰成员变量，它所修饰的成员变量不属于对象的数据结构，而是属于类的变量，通常通过类名来引用static成员</li><li>当创建对象后，成员变量是存储在堆中的，而static成员变量和类的信息一样一起存储在方法区中</li><li>一个类的static成员变量中有“一份”（存储在方法区）无论该类创建了多少个对象</li></ul><h3 id="static修饰方法"><a href="#static修饰方法" class="headerlink" title="static修饰方法"></a>static修饰方法</h3><ul><li>static修饰的方法称之为静态方法，而静态方法不会涉及具体的某一个对象，只是当前完成了一件共有的逻辑</li></ul><h3 id="static块（静态块）"><a href="#static块（静态块）" class="headerlink" title="static块（静态块）"></a>static块（静态块）</h3><ul><li>static块属于类的代码块，在类的加载期间执行的，只执行一次。可以用来在软件中加载静态资源（图像、音频等）</li></ul><p>&nbsp;</p><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><h3 id="final修饰变量"><a href="#final修饰变量" class="headerlink" title="final修饰变量"></a>final修饰变量</h3><ul><li>final关键字修饰的变量，意为不可改变。final可以修饰成员变量，也可以修饰局部变量。</li></ul><h3 id="final修饰方法"><a href="#final修饰方法" class="headerlink" title="final修饰方法"></a>final修饰方法</h3><ul><li>final关键字修饰的方法不可以被重写。</li></ul><h3 id="final修饰类"><a href="#final修饰类" class="headerlink" title="final修饰类"></a>final修饰类</h3><ul><li>final修饰的类不可以被继承</li></ul><h3 id="static-final-常量"><a href="#static-final-常量" class="headerlink" title="static final 常量"></a>static final 常量</h3><ul><li>static final 修饰的成员变量成为常量，必须声明同时初始化，并且不可被改变，常量建议所有字母大写</li></ul><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>工具类的使用</title>
    <link href="http://yoursite.com/2021/01/20/JAVA%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2021/01/20/JAVA%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-20T14:46:58.000Z</published>
    <updated>2021-01-21T00:21:19.295Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Arrays类的使用"><a href="#Arrays类的使用" class="headerlink" title="Arrays类的使用"></a>Arrays类的使用</h1><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><ul><li><p><strong>toString：</strong>对数组进行遍历查看，返回的是一个字符串，这个比字符串好看。</p><p>包含：<code>boolean[] a</code>、<code>byte[] a</code>、<code>char[] a</code>、<code>double[] a</code>、<code>float[] a</code>、<code>int[] a</code>、<code>long[] a</code>、<code>short[] a</code>、<code>Object[] a</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">35</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><ul><li><strong>sort：</strong>对数组升序排列</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">35</span>&#125;;</span><br><span class="line">    <span class="comment">//排序---&gt;sort:升序</span></span><br><span class="line">    Arrays.sort(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="binarySearch"><a href="#binarySearch" class="headerlink" title="binarySearch"></a>binarySearch</h3><ul><li><p><strong>binarySearch：</strong>二分法查找</p><p> 找出指定数组中的指定元素对应 的索引</p></li><li><p>前提：只能查看有序数组</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    Arrays.sort(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">System.out.println(Arrays.binarySearch(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="copeOf"><a href="#copeOf" class="headerlink" title="copeOf"></a>copeOf</h3><ul><li><p><strong>copeOf：</strong>完成数组的复制</p><p><strong>(arr,int)：</strong>(数组名,复制的长度)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] newArr = Arrays.copyOf(arr,<span class="number">4</span>); </span><br><span class="line">System.out.println(Arrays.toString(newArr));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="copeOfRange"><a href="#copeOfRange" class="headerlink" title="copeOfRange"></a>copeOfRange</h3><ul><li><p><strong>copeOfRange：</strong>区间复制</p><p><strong>(arr,1,4)：</strong>(数组名,开始位置,终止位置)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] newArr = Arrays.copyOfRange(arr,<span class="number">1</span>,<span class="number">4</span>); <span class="comment">//---[1,4):左包含，右不包含 </span></span><br><span class="line">System.out.println(Arrays.toString(newArr));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h3><ul><li><strong>equals：</strong>比较两个数组的值是否一样，若一样则返回true，否则返回false</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr1 = &#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] arr2 = &#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">Arrays.equals(arr1,arr2);<span class="comment">//true: 比较左右两侧的数值是否相等</span></span><br><span class="line">System.out.println(arr1 == arr2);<span class="comment">//false: ==比较左右两侧的地址 值是否相等</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><ul><li><p><strong>fill：</strong> 进行数组的填充</p><p><strong>(arr, int)：</strong>(数组名,填充的数据)</p><p>(arr,int,int,int)：（数组名,起始位置,终止位置,填充的数据）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">Arrays.fill(arr, <span class="number">10</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">    Arrays.fill(arr, <span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（五）访问控制</title>
    <link href="http://yoursite.com/2021/01/20/JAVA%EF%BC%88%E4%BA%94%EF%BC%89%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/2021/01/20/JAVA%EF%BC%88%E4%BA%94%EF%BC%89%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</id>
    <published>2021-01-20T07:35:36.000Z</published>
    <updated>2021-01-21T00:19:58.790Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="package语句"><a href="#package语句" class="headerlink" title="package语句"></a>package语句</h3><p>包的概念，定义类时需要指定类的名称，但是如果仅仅将类名作为类的唯一标识，不可避免会冲突。在Java语句中命名冲突问题可以用包名来解决</p><p>类的全名称：<code>包名.类名</code></p><h3 id="import语句"><a href="#import语句" class="headerlink" title="import语句"></a>import语句</h3><p>引用依赖，导包</p><h3 id="public和private"><a href="#public和private" class="headerlink" title="public和private"></a>public和private</h3><p>public和private是最常用的两个修饰符，private修饰的成员变量和方法只能在本类中访问。public修饰的成员变量和方法可以在任何地方调用</p><h3 id="protected和默认"><a href="#protected和默认" class="headerlink" title="protected和默认"></a>protected和默认</h3><p>protected修饰的成员变量和方法可以被子类及同包类使用，默认修饰的成员变量和方法可以被同一个包中的类调用。</p><h3 id="访问控制符修饰类"><a href="#访问控制符修饰类" class="headerlink" title="访问控制符修饰类"></a>访问控制符修饰类</h3><p>public和默认修饰符可以修饰类</p><p>protected和private不能修饰类。</p><h3 id="四者修饰的“成员”"><a href="#四者修饰的“成员”" class="headerlink" title="四者修饰的“成员”"></a>四者修饰的“成员”</h3><table><thead><tr><th>修饰符</th><th>本类</th><th>同包类</th><th>子类</th><th>其他类</th></tr></thead><tbody><tr><td>public</td><td>可以访问</td><td>可以访问</td><td>可以访问</td><td>可以访问</td></tr><tr><td>protected</td><td>可以访问</td><td>可以访问</td><td>可以访问</td><td>不可以</td></tr><tr><td>默认</td><td>可以访问</td><td>可以访问</td><td>不可以</td><td>不可以</td></tr><tr><td>private</td><td>可以访问</td><td>不可以</td><td>不可以</td><td>不可以</td></tr></tbody></table><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（四）继承</title>
    <link href="http://yoursite.com/2021/01/20/JAVA%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2021/01/20/JAVA%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BB%A7%E6%89%BF/</id>
    <published>2021-01-20T07:16:22.000Z</published>
    <updated>2021-01-21T00:13:49.065Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="extends关键字"><a href="#extends关键字" class="headerlink" title="extends关键字"></a>extends关键字</h3><p>使用继承可以实现代码的重用，在Java语言中，需要通过<code>extends</code>关键字实现类的继承，继承后，子类可以继承父类的<strong>成员变量和成员方法</strong>，同时子类也可以定义自己成员变量和成员方法，届时，子类将具有父类的成员及本类的成员。</p><h4 id="继承中的构造方法"><a href="#继承中的构造方法" class="headerlink" title="继承中的构造方法"></a>继承中的构造方法</h4><p>父类的无参构造之所以被运行，是因为，子类在构造前必须先构造父类。</p><p>事实上，子类的构造方法中是必须要通过<code>super()</code>关键字来调用父类的构造方法，这样才可以保证妥善的初始化继承自父类的成员变量。</p><h3 id="父类的引用指向子类对象"><a href="#父类的引用指向子类对象" class="headerlink" title="父类的引用指向子类对象"></a>父类的引用指向子类对象</h3><p>一个子类的对象可以向上造型为父类的类型。即，定义父类的引用可以指向子类的对象。</p><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><p>在子类中定义一个和父类的方法（除方法体外）相同的方法，这就是重写。当子类重写父类的方法后，该重写方法被调用时（无论时通过子类的引用调用还是通过父类的引用调用）运行的都是子类重写后的新版本。</p><ul><li><p>重写中使用<code>super()</code>关键字</p><p>在子类重写的方法中，可以通过super()关键字调用父类的版本。</p></li></ul><h3 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h3><ul><li><p>重载和重写是完全不同的语法现象</p></li><li><p><strong>重载：</strong></p><p>是指在一个类中定义多个方法名相同但参数列表不同的方法。在编译时，根据参数的个数和类型来决定调用哪个方法。</p><p><strong>重载遵循所谓的“编译期绑定”，即在编译时根据参数变量的类型判断应该调用哪个方法。</strong></p></li><li><p>重写：</p><p>是指在子类中定义和父类完全相同的方法，在程序运行时，根据对象类型调用不同的方法。</p><p><strong>重写遵循所谓的“运行期绑定”，即在运行时，根据引用类型所指向的实际对象类型来调用方法。</strong></p></li></ul><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（三）对象内存管理</title>
    <link href="http://yoursite.com/2021/01/20/JAVA%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2021/01/20/JAVA%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</id>
    <published>2021-01-20T00:39:48.000Z</published>
    <updated>2021-01-21T00:08:55.179Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="对象内存管理"><a href="#对象内存管理" class="headerlink" title="对象内存管理"></a>对象内存管理</h3><ul><li>在Java中，有Java程序、虚拟机、操作系统三个层面。其中Java程序与虚拟机交互，虚拟机与操作系统交互。编译好的Java字节码文件运行在JVM上。</li><li>JVM会将内存从逻辑上划分为三个区域：堆、栈、方法区。</li></ul><h3 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h3><ul><li>JVM在其内存空间开辟了一个称之为“堆”的存储空间，这部分空间用于<strong>存放new关键字创建出来的对象。</strong></li></ul><h3 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h3><ul><li>JVM在其空间开辟了一个称之为“栈”的存储空间。这部分空间用于<strong>存放程序运行时在方法中声明的所有局部变量。</strong></li></ul><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区用于存放类的信息，Java程序运行时，首先会通过类装载器载入类的字节码文件，经过解析后将其装入方法区，<strong>类的各类信息（方法）都在方法区存储。</strong></p><ul><li><p>方法只有一份</p><p>类在实例化对象时，多个对象会拥有各自在堆中的空间，但所有实例对象是<strong>共用方法区中的一份方法。</strong></p></li></ul><h3 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><ul><li><p>垃圾回收器</p><p>（Garbage Collection，GC）是JVW自带的一个线程（自动运行的程序）<strong>用于回收没有任何引用指向的对象。</strong></p></li><li><p>工作原理</p><p>GC线程会从栈中的引用开始跟踪，从而判断哪些内存是正在使用的，若GC无法跟踪到某一块栈内存，那么GC就认为这块的内存不再使用了，即为可回收。Java程序员不用担心内存管理，因为GC会自动管理。</p></li><li><p>Java程序的内存泄露问题</p><p>内存泄漏是指，不再被使用的内存没有被及时的回收，严重的内存泄漏会因为过多的内存占用而导致程序崩溃。</p></li><li><p>System.gc()</p><p>GC是定时或定期才自动回收垃圾的， 如果需要GC即刻回收无用对象时，可以调用System.gc()。此方法用于JVM马上调用GC回收资源。</p></li></ul><h3 id="成员变量的生命周期"><a href="#成员变量的生命周期" class="headerlink" title="成员变量的生命周期"></a>成员变量的生命周期</h3><ul><li><p>成员变量的生命周期</p><p>对象在堆中创建开始到对象从堆中被回收结束。</p></li></ul><h3 id="局部变量的生命周期"><a href="#局部变量的生命周期" class="headerlink" title="局部变量的生命周期"></a>局部变量的生命周期</h3><p>一个运行的Java程序从开始到结束会有很多方法的调用，JVM会为每一个方法的调用在栈中分配一个对应的空间，这个空间称之为该方法的<strong>栈帧</strong>。一个栈帧对应一个正在调用的方法，栈帧中<strong>存储了该方法的参数、局部变量等数据。</strong>当某一个方法调用完成后，其对应的栈帧清除，局部变量即失效。</p><h3 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h3><ul><li>局部变量<ol><li>定义在方法中</li><li>没有默认值，必须自行设定初始值</li><li>方法被调用时，存在栈中，方法调用结束时局部变量从栈中被清除</li></ol></li><li>成员变量<ol><li>定义在类中，方法外</li><li>由系统设定默认初始值，可以不显式初始化</li><li>所在类被实例化后，存在堆中，对象被回收时，成员变量失效</li></ol></li></ul><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（二）类/方法</title>
    <link href="http://yoursite.com/2021/01/19/JAVA%EF%BC%88%E4%BA%8C%EF%BC%89%E7%B1%BB%20:%20%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2021/01/19/JAVA%EF%BC%88%E4%BA%8C%EF%BC%89%E7%B1%BB%20:%20%E6%96%B9%E6%B3%95/</id>
    <published>2021-01-19T06:59:15.000Z</published>
    <updated>2021-01-20T07:47:21.215Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h3 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h3><p><strong>抽象数据类型：</strong>将不同类型数据的集合组成一个整体用来描述一种新的食物。</p><p>类定义了一种抽象数据类型，不止定义了抽象数据类型组成（成员变量），同时还定义了该类型可以实施的操作（方法）。</p><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><ul><li><p>定义一个类</p><p>类是一种引用（抽象）数据类型，<strong>类为对象的模版</strong>。</p><p>累的含义包括“成员变量”的定义和“方法”的定义。</p></li><li><p>定义类的方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">  修饰符  返回值类型  方法名称（参数列表）&#123;</span><br><span class="line">    方法体</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建并使用对象"><a href="#创建并使用对象" class="headerlink" title="创建并使用对象"></a>创建并使用对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--使用<span class="keyword">new</span>关键字创建对象</span><br><span class="line">     Cell           c      =     <span class="keyword">new</span>         Cell();</span><br><span class="line">   引用类型     引用类型变量     创建（实例化）    构造方法</span><br></pre></td></tr></table></figure><h3 id="引用类型变量"><a href="#引用类型变量" class="headerlink" title="引用类型变量"></a>引用类型变量</h3><p>为了能够对实例化的对象进行访问，需要一个特殊的变量，即引用</p><p>引用类型变量可以存储该对象的地址信息，通常称为“指向改对象”，当一个引用类型变量指向该类的对象，就可以通过这个变量对对象访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Emp e1 = <span class="keyword">new</span> Emp();</span><br><span class="line">Emp e2 = e1;</span><br><span class="line">e1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">e2.name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">System.out.printlm(e1.name);</span><br><span class="line"><span class="comment">//输出为“王五”</span></span><br><span class="line"><span class="comment">//e1与e2同时存放并指向同一个变量，e1对该变量赋之后，e2又对该变量重新赋值</span></span><br></pre></td></tr></table></figure><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><p><strong>方法的签名：</strong>方法名和参数列表</p><p>Java语法定义：一个类中不可以有两个方法签名完全相同的方法，但是如果一个类的两个方法只是方法名相同而参数列表不同，这就是方法的重载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">abc(<span class="keyword">int</span> a)&#123;...&#125;</span><br><span class="line">abc(String name)&#123;...&#125;</span><br><span class="line">abc(<span class="keyword">double</span> a,<span class="keyword">int</span> b)&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译时根据签名绑定调用方法</span></span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p><strong>构造方法是类中定义的方法</strong>，但不同于其他方法。</p><p>–构造方法的名称必须是和类名相同</p><p>–构造方法没有返回值，也不能写<code>void</code></p><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 类型名()&#123;</span><br><span class="line">  方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>通过构造方法初始化成员变量</p><p>Java语法中的构造方法常常用于实现对对象成员白娘初始化</p></li><li><p>this关键字的使用</p><p>this关键字用在方法体中，用于指代调用该方法的当前对象。</p><p>简单说：哪个对象用方法，this指的就是哪个对象</p></li><li><p>默认的构造方法</p><p>Java语法规定，任何一个类都必须含有构造方法，加入源程序没有定义构造方法，则编译器在编译时会为其添加一个无参的空结构（默认构造方法）。一旦定义了构造方法，默认的构造将不再生成。</p></li><li><p>构造方法的重载</p><p>很多时候，为了方便，可以对一个类定义多个构造方法，这些构造方法都有相同的名称（类名），称之为构造方法的重载。</p></li></ul><h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><h3 id="利用方法，实现对人员相关信息的输出"><a href="#利用方法，实现对人员相关信息的输出" class="headerlink" title="利用方法，实现对人员相关信息的输出"></a>利用方法，实现对人员相关信息的输出</h3><ul><li><p><code>Emp.java</code> 方法构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Emp</span><span class="params">()</span></span>&#123;</span><br><span class="line">  String name;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">char</span> gender;</span><br><span class="line">  <span class="keyword">double</span> salary;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//构造方法的名称必须和类名相同</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(String n, <span class="keyword">int</span> a, <span class="keyword">char</span> g, <span class="keyword">double</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = n;</span><br><span class="line">    <span class="keyword">this</span>.age = a;</span><br><span class="line">    <span class="keyword">this</span>.gender = g;</span><br><span class="line">    <span class="keyword">this</span>.salary = s;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printEmpInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Name is :&quot;</span>+name);</span><br><span class="line">    System.out.println(<span class="string">&quot;Age is :&quot;</span>+age);</span><br><span class="line">    System.out.println(<span class="string">&quot;Gender is :&quot;</span>+gender);</span><br><span class="line">    System.out.println(<span class="string">&quot;Salary is :&quot;</span>+salary);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>EmpInfo.java</code> 方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpInfo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Emp e = <span class="keyword">new</span> Emp(<span class="string">&quot;&quot;</span>,<span class="number">46</span>,<span class="string">&#x27;&#x27;</span>,<span class="number">4377.5</span>);</span><br><span class="line">    e.printEmpInfo();<span class="comment">//方法调用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="输出单个坐标形状"><a href="#输出单个坐标形状" class="headerlink" title="输出单个坐标形状"></a>输出单个坐标形状</h3><ul><li><p><code>Cell.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cell</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> row;</span><br><span class="line">  <span class="keyword">int</span> col;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//构造方法的名称必须和类名相同</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Cell</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.row = r;</span><br><span class="line">    <span class="keyword">this</span>.col = c;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drop</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    row += n;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveLeft</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    col += n;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveRight</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    col += n;</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getCellInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> row+<span class="string">&quot;,&quot;</span>+col;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>CellInfo.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CellInfo</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Cell[]  相当于 基本类型的int[]</span></span><br><span class="line">    Cell c = <span class="keyword">new</span> Cell(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">printCell(c);</span><br><span class="line">System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">c.moveLeft(<span class="number">3</span>);</span><br><span class="line">printCell(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//打印场地</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCell</span><span class="params">(Cell cell)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> totalRow = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> totalCol = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">0</span>, row&lt;totalRow; row++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">0</span>, col&lt;totalCol; col++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cell.row==row &amp;&amp; cell.col==col)&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="俄～定义字母T"><a href="#俄～定义字母T" class="headerlink" title="俄～定义字母T"></a>俄～定义字母T</h3><ul><li><p>T.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法（现有构造方法，才能被使用，如：new Cell(rwo,col)）</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cell</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> row;</span><br><span class="line">  <span class="keyword">int</span> col;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Cell</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.row = row;</span><br><span class="line">  <span class="keyword">this</span>.col = col;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span></span>&#123;</span><br><span class="line">  Cell[] cells;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//构造方法的名称必须和类名相同</span></span><br><span class="line">  <span class="comment">//Cell[4]为创建的对象，即构造方法，用的为上段代码的构造方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">T</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">    cells = <span class="keyword">new</span> Cell[<span class="number">4</span>];<span class="comment">//引用类型 引用类型变量（属性）</span></span><br><span class="line">    cells[<span class="number">0</span>] = <span class="keyword">new</span> Cell(row, col);</span><br><span class="line">    cells[<span class="number">1</span>] = <span class="keyword">new</span> Cell(row, col+<span class="number">1</span>);</span><br><span class="line">    cells[<span class="number">2</span>] = <span class="keyword">new</span> Cell(row, col+<span class="number">2</span>);</span><br><span class="line">    cells[<span class="number">3</span>] = <span class="keyword">new</span> Cell(row+<span class="number">1</span>, col+<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cells.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">      str += <span class="string">&quot;(&quot;</span>+cells[i]getCellInfo()+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&quot;()&quot;</span> cells[cells.length-<span class="number">1</span>].getCellInfo()+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cells.length; i++)&#123;</span><br><span class="line">      cells[i].row++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveleft</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cells.length; i++)</span><br><span class="line">      cells[i].col--;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveright</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cells.length; i++)</span><br><span class="line">      cells[i].col++;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>testT</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestT</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">new</span> T(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">t.print();</span><br><span class="line">t.drop();</span><br><span class="line">t.print();</span><br><span class="line">t.moveLeft();</span><br><span class="line">t.print();</span><br><span class="line">t.moveRight();</span><br><span class="line">t.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="俄～打印字母O"><a href="#俄～打印字母O" class="headerlink" title="俄～打印字母O"></a>俄～打印字母O</h3><p>根据下列图形在坐标中打印相关图形。</p><ul><li><p><code>O.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">O</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  Cell[] cells;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="number">0</span>(<span class="keyword">int</span> row, <span class="keyword">int</span> col)&#123;</span><br><span class="line">    cells = <span class="keyword">new</span> Cell[<span class="number">4</span>];</span><br><span class="line">    cells[<span class="number">0</span>] = <span class="keyword">new</span> Cell(row, col);</span><br><span class="line">    cells[<span class="number">1</span>] = <span class="keyword">new</span> Cell(row, col+<span class="number">1</span>);</span><br><span class="line">    cells[<span class="number">2</span>] = <span class="keyword">new</span> Cell(row+<span class="number">1</span>, col);</span><br><span class="line">    cells[<span class="number">3</span>] = <span class="keyword">new</span> Cell(row+<span class="number">1</span>, col+<span class="number">1</span>;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//下降</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cells.length; i++)&#123;</span><br><span class="line">      cells[i].row++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//左移</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveLeft</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cells.length; i++)&#123;</span><br><span class="line">      cells[i].col--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//右移</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveRight</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cells.length; i++)&#123;</span><br><span class="line">      cells[i].col++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>testO.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testO</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    O o = <span class="keyword">new</span> O(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    printCell(o);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCell</span><span class="params">(O <span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> y=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">0</span>; row&lt;=x; row++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">0</span>; col&lt;=y; col++)&#123;</span><br><span class="line">        <span class="comment">//o.cells.length 图形.数组名.长度</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;o.cells.length &amp;&amp; o.cells[i].row==row &amp;&amp; o.cells[i].col==col)</span><br><span class="line">          System.out.print(<span class="string">&quot; * &quot;</span>);</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">45</span>,<span class="number">67</span>,<span class="number">25</span>,<span class="number">86</span>&#125;</span><br><span class="line">Cell c = <span class="keyword">new</span> Cell[]&#123;</span><br><span class="line">  <span class="keyword">new</span> Cell(<span class="number">25</span>,<span class="number">56</span>);</span><br><span class="line">  <span class="keyword">new</span> Cell(<span class="number">41</span>,<span class="number">65</span>);</span><br><span class="line">  <span class="keyword">new</span> Cell(<span class="number">12</span>,<span class="number">46</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Soso</title>
    <link href="http://yoursite.com/2021/01/18/JAVA%20Soso/"/>
    <id>http://yoursite.com/2021/01/18/JAVA%20Soso/</id>
    <published>2021-01-18T13:15:26.000Z</published>
    <updated>2021-01-18T15:06:01.796Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>基本数据类型（8种）<code>byte[]、short[]、int[]、long[]、float[]、double[]、char[]、boolean[]</code></p><h3 id="获取用户输入"><a href="#获取用户输入" class="headerlink" title="获取用户输入"></a>获取用户输入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个数：&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> num1=sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的遍历：将数组中的每个元素进行查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1:普通for循环：正向遍历：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">10</span>; i++)&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个数字为&quot;</span>+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2:增强for循环</span></span><br><span class="line"><span class="comment">//对arr数组进行遍历，遍历出来每个元素用int类型的num接收</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>；</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> num:arr)&#123;</span><br><span class="line">  count++;</span><br><span class="line">  Syetem.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;个数字位&quot;</span>+num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法3:利用普通for循环：逆行遍历：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">9</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个数字为&quot;</span>+arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组找最大值"><a href="#数组找最大值" class="headerlink" title="数组找最大值"></a>数组找最大值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>[] arr = &#123;<span class="number">34</span>,<span class="number">57</span>,<span class="number">39</span>,<span class="number">97</span>,<span class="number">73</span>,<span class="number">26</span>,<span class="number">74</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span> maxNum = arr[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt;arr.length; i++)&#123;</span><br><span class="line">     <span class="keyword">if</span>(arr[i]&gt;maxNum)&#123;</span><br><span class="line">       maxNum = arr[i];</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   System.out.println(<span class="string">&quot;当前数组中的最大值为：&quot;</span>+maxNum);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxNum</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> maxNum = arr[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt;arr.length; i++)&#123;</span><br><span class="line">     <span class="keyword">if</span>(arr[i]&gt;maxNum)&#123;</span><br><span class="line">       maxNum = arr[i];</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> maxNum;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>[] arr = &#123;<span class="number">34</span>,<span class="number">57</span>,<span class="number">39</span>,<span class="number">97</span>,<span class="number">73</span>,<span class="number">26</span>,<span class="number">74</span>&#125;;</span><br><span class="line">   <span class="comment">//调用方法：</span></span><br><span class="line">   <span class="keyword">int</span> num = getMaxNum(arr);</span><br><span class="line">   System.out.println(<span class="string">&quot;当前数组中的最大值为：&quot;</span>+maxNum);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><div class="note info simple"><p>方法的实参传递给行参的时候一定要注意：一切都是值传递：</p><p>如果是基本数据类型，那么传递的就是字面值</p><p>如果是引用数据类型，那么传递的就是地址值</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA（一）数组</title>
    <link href="http://yoursite.com/2021/01/17/JAVA%EF%BC%88%E4%B8%80%EF%BC%89%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2021/01/17/JAVA%EF%BC%88%E4%B8%80%EF%BC%89%E6%95%B0%E7%BB%84/</id>
    <published>2021-01-17T12:55:17.000Z</published>
    <updated>2021-01-24T09:23:27.669Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h3 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h3><p>是一种数据结构，用于存放相同类型的数据集合。</p><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><p>定义基本类型数组（数组的长度一经创建不可更改）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java式写法</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//C式写法</span></span><br><span class="line"><span class="keyword">int</span> []arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><p>基本数据类型（数组元素为基本类型）的数组创建后，默认为其数组设置了初始值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">--静态初始化</span><br><span class="line"><span class="comment">//除了用new关键字来产生数组以为，还可以直接在定义数组的同时就为数组分配空间并赋值。</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">23</span>,<span class="number">46</span>,<span class="number">85</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">23</span>,<span class="number">46</span>,<span class="number">85</span>&#125;;</span><br><span class="line"><span class="comment">//注意：</span></span><br><span class="line"><span class="comment">//1.new int[3]&#123;23,46,85&#125;; ---&gt;错误</span></span><br><span class="line"><span class="comment">//2.int[] arr;  ---&gt;错误</span></span><br><span class="line"><span class="comment">//arr = &#123;23,46,85&#125;;</span></span><br><span class="line"></span><br><span class="line">--动态初始化</span><br><span class="line"><span class="comment">//数组定义与为数组元素分配空间并赋值的操作分开进行。</span></span><br><span class="line"><span class="keyword">int</span>[] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">23</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">46</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">--默认初始化</span><br><span class="line"><span class="comment">//数组是🚰类型，它的元素相当于类的实例变量，因此数组一旦分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; ---&gt;数组有默认的初始化值<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="数组的访问"><a href="#数组的访问" class="headerlink" title="数组的访问"></a>数组的访问</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数组的长度</span></span><br><span class="line"><span class="keyword">int</span> arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">35</span>,<span class="number">65</span>,<span class="number">74</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a = arr.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过下标访问数组元素</span></span><br><span class="line">注意：数组的下标从<span class="number">0</span>开始，最大到length-<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="遍历数组元素"><a href="#遍历数组元素" class="headerlink" title="遍历数组元素"></a>遍历数组元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr = &#123;<span class="number">53</span>,<span class="number">67</span>,<span class="number">98</span>,<span class="number">36</span>,<span class="number">78</span>&#125;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">  System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的复制"><a href="#数组的复制" class="headerlink" title="数组的复制"></a>数组的复制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//System.arraycopy方法实现数组复制</span></span><br><span class="line">System.arraycop(src,srcPos,dest,destPos,length)</span><br><span class="line">  --src:源数组</span><br><span class="line">--srcPos:源数组的起始位置</span><br><span class="line">  --dest:目标数组</span><br><span class="line">--destPos:目标数组中的起始位置</span><br><span class="line">--length:要复制的数组元素的数量</span><br><span class="line"></span><br><span class="line"><span class="comment">//Arrays.copyOf方法实现数组复制</span></span><br></pre></td></tr></table></figure><h3 id="数组的扩容"><a href="#数组的扩容" class="headerlink" title="数组的扩容"></a>数组的扩容</h3><p>数组的长度在创建后是不可更改的。所谓扩容实际上是指创建一个更大的新数组并将原有数组的内容复制到其中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组长度加一</span></span><br><span class="line"><span class="keyword">int</span>[] arr = Arrays.copyOf(arr,arr.length+<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="数组的添加"><a href="#数组的添加" class="headerlink" title="数组的添加"></a>数组的添加</h3><p>添加的逻辑：如果在数组的第i个位置添加数值，在自i开始，所有值向后移动一动一位，腾出原有的位置i，再向其添加数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"> <span class="comment">//功能：给定一个数组，在数组下标为2的位置上添加一个元素91</span></span><br><span class="line"> <span class="comment">//1.给定一个数组；</span></span><br><span class="line"> <span class="keyword">int</span>[] arr = &#123;<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">86</span>&#125;;</span><br><span class="line"> <span class="comment">//2.输出增加元素前的数组；</span></span><br><span class="line"> System.out.print(<span class="string">&quot;增加元素前的数组：&quot;</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(i != arr.length-<span class="number">1</span>)&#123;</span><br><span class="line"> System.out.print(arr[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;<span class="comment">//i == arr.length-1 最后一个元素不用加逗号</span></span><br><span class="line"> System.out.print(arr[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//3.添加元素；</span></span><br><span class="line"> <span class="comment">// arr[5]=arr[4];  //基本方法</span></span><br><span class="line"> <span class="comment">// arr[4]=arr[3];</span></span><br><span class="line"> <span class="comment">// arr[3]=arr[2];</span></span><br><span class="line"> <span class="comment">// arr[2]=91;</span></span><br><span class="line"> <span class="keyword">int</span> index = <span class="number">2</span>;  <span class="comment">//数组中添加的位置</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length-<span class="number">1</span>; i&gt;=(index+<span class="number">1</span>); i++)&#123;</span><br><span class="line"> arr[i]=arr[i-<span class="number">1</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> arr[index] = <span class="number">91</span>;<span class="comment">//数组中要添加的元素 </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//4.输出增加元素后的数组；</span></span><br><span class="line"> System.out.print(<span class="string">&quot;\n增加元素后的数组：&quot;</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(i != arr.length-<span class="number">1</span>)&#123;</span><br><span class="line"> System.out.print(arr[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;<span class="comment">//i == arr.length-1 最后一个元素不用加逗号</span></span><br><span class="line"> System.out.print(arr[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>提取一个添加元素的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在数组的确定位置上添加一个元素</span></span><br><span class="line"><span class="comment">//不确定因素：形参，哪个数组，哪个位置，哪个元素</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span>[] arr = &#123;<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">86</span>）;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//从键盘接收数据</span></span><br><span class="line">  Scanner sc = <span class="keyword">new</span> System(System.in);<span class="comment">//引用类型 引用类型变量 = 创建 构造方法</span></span><br><span class="line">  System.out.println(<span class="string">&quot;请录入你要添加元素的指定下标：&quot;</span>);</span><br><span class="line">  <span class="keyword">int</span> index = sc.nextInt();</span><br><span class="line">  System.out.println(<span class="string">&quot;请录入你要添加的元素：&quot;</span>);</span><br><span class="line">  <span class="keyword">int</span> ele = sc.nextInt();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.增加元素</span></span><br><span class="line">  <span class="comment">//调用方法</span></span><br><span class="line">  intsertEle(arr, index, ele);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//4.输出增加元素后的数组；</span></span><br><span class="line">  System.out.print(<span class="string">&quot;\n增加元素后的数组：&quot;</span>)；</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, i&lt;arr.length-<span class="number">1</span>, i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(i != arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">  System.out.print(arr[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;<span class="comment">//i == arr.length-1 最后一个元素不用加逗号</span></span><br><span class="line">  System.out.print(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertEle</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index, <span class="keyword">int</span> ele)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length-<span class="number">1</span>; i&gt;=(index+<span class="number">1</span>); i++)&#123;</span><br><span class="line">  arr[i]=arr[i-<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  arr[index] = ele ；</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="数组的删除"><a href="#数组的删除" class="headerlink" title="数组的删除"></a>数组的删除</h3><ul><li>删除指定位置的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//功能：给定一个数组，删除下标为2元素</span></span><br><span class="line"><span class="comment">//1.定义一个数组；</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">86</span>&#125;;</span><br><span class="line"><span class="comment">//2.输出删除前的数组；</span></span><br><span class="line">System.out.println(<span class="string">&quot;删除前的数组：&quot;</span>+Arrays.toString(arr));</span><br><span class="line"><span class="comment">//3.删除</span></span><br><span class="line"><span class="keyword">int</span> index  = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=index; i&lt;arr.length-<span class="number">2</span>; i++) &#123;</span><br><span class="line">arr[i] = arr[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">arr[arr.length-<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//4.输出删除后的数组；</span></span><br><span class="line">System.out.println(<span class="string">&quot;删除后的数组：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>删除指定的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//功能：给定一个数组，删除元素25</span></span><br><span class="line"><span class="comment">//1.定义一个数组；</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">86</span>&#125;;</span><br><span class="line"><span class="comment">//2.输出删除前的数组；</span></span><br><span class="line">System.out.println(<span class="string">&quot;删除前的数组：&quot;</span>+Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到要删除的元素对应的索引即可：</span></span><br><span class="line"><span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] == <span class="number">25</span>) &#123;</span><br><span class="line">index = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.删除</span></span><br><span class="line"><span class="keyword">if</span>(index != -<span class="number">1</span>) &#123;<span class="comment">//数组过滤</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=index; i&lt;=arr.length-<span class="number">2</span>; i++) &#123;</span><br><span class="line">arr[i] = arr[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">arr[arr.length-<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//index=-1</span></span><br><span class="line">System.out.println(<span class="string">&quot;没有你要删除的元素&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.输出删除后的数组；</span></span><br><span class="line">System.out.println(<span class="string">&quot;删除后的数组：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h3><ul><li><p>冒泡排序</p><p>比较相邻的元素，如果违反指定的顺序准则(升序或降序),则交换位置。可以简化的理解，第一次找到所有元素中最大(最小)的放在最后一个位置上，不再变动；第二次找到剩余元素中最大(最小)放到倒数第二位不再变动，以此类推。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">46</span>,<span class="number">86</span>,<span class="number">37</span>,<span class="number">77</span>,<span class="number">36</span>,<span class="number">79</span>,<span class="number">38</span>,<span class="number">58</span>,<span class="number">74</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>; i++)&#123;<span class="comment">//遍历轮数</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.length-<span class="number">1</span>-i; i++)&#123;<span class="comment">//遍历次数</span></span><br><span class="line">    <span class="keyword">if</span>(arr[<span class="number">1</span>] &gt; arr[a+<span class="number">1</span>])&#123;</span><br><span class="line">      <span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">      arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">      aee[j+<span class="number">1</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法式</span></span><br><span class="line">Arrays.sort()方法</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//五要素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span><span class="comment">//修饰符（静态）</span></span><br><span class="line"><span class="keyword">void</span><span class="comment">//返回值类型</span></span><br><span class="line">abc <span class="comment">//方法名</span></span><br><span class="line">(<span class="keyword">int</span> c, <span class="keyword">int</span> a)<span class="comment">//参数列表</span></span><br><span class="line">&#123;...&#125;<span class="comment">//方法体</span></span><br></pre></td></tr></table></figure><h3 id="数组的查询"><a href="#数组的查询" class="headerlink" title="数组的查询"></a>数组的查询</h3><ul><li>查询指定位置的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="comment">//找出索引对应的元素</span></span><br><span class="line">  <span class="keyword">int</span>[] arr = (<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">37</span>);</span><br><span class="line">  System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>查询指定元素的位置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"> <span class="comment">//找出元素对应的索引</span></span><br><span class="line"> <span class="keyword">int</span>[] arr = &#123;<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">35</span>&#125;;<span class="comment">//重复元素</span></span><br><span class="line"> <span class="keyword">int</span> index = -<span class="number">1</span>;<span class="comment">//这个初始值只要不是数组的索引即可</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(arr[i]==<span class="number">35</span>)&#123;</span><br><span class="line"> index = i;<span class="comment">//只要找到了这个元素，那么index就变成</span></span><br><span class="line">       <span class="keyword">break</span>;<span class="comment">//只要找到这个元素，循环就停止</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">if</span>（index != -<span class="number">1</span>）&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;元素对应的索引为：&quot;</span>+index);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;<span class="comment">//index == -1</span></span><br><span class="line">     System.out.println(<span class="string">&quot;查无次数！&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>将查询功能提取为一个方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"> <span class="comment">//找出元素对应的索引</span></span><br><span class="line"> <span class="keyword">int</span>[] arr = &#123;<span class="number">62</span>,<span class="number">57</span>,<span class="number">35</span>,<span class="number">76</span>,<span class="number">25</span>,<span class="number">35</span>&#125;;<span class="comment">//重复元素</span></span><br><span class="line"> <span class="comment">//调用方法</span></span><br><span class="line"> <span class="keyword">int</span> index = getIndex(arr,<span class="number">57</span>)</span><br><span class="line"> <span class="comment">//后续对index的值进行判断</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>（index != -<span class="number">1</span>）&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;元素对应的索引为：&quot;</span>+index);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;查无次数！&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">getIndex</span><span class="params">(<span class="keyword">int</span>[],<span class="keyword">int</span> ele)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">   <span class="keyword">if</span>(arr[i]==<span class="keyword">else</span>)&#123;</span><br><span class="line">   index = i;</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> index;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="main方法的解释"><a href="#main方法的解释" class="headerlink" title="main方法的解释"></a>main方法的解释</h3><p>默认情况下，虚拟机是在调用main方法的时候传入了一个长度为0的数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(args.length);</span><br><span class="line">   <span class="keyword">for</span>(String str : args)&#123;</span><br><span class="line">      System.out.println(str);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>提供了一个方法，参数的个数是可变的</p><p>作用：解决了部分的重载问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.方法的内部对可变参数的处理跟数组一样。 </span></span><br><span class="line"><span class="comment">//2.可变数据和其他数据一起作为形参的时候，可变参数一定要放在最后。</span></span><br><span class="line"><span class="comment">//例如（int num1,int...num2）,这样传递值时，其他参数才能接收到数据。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     System.out.println(args.length);</span><br><span class="line">    <span class="keyword">for</span>(String str : args)&#123;</span><br><span class="line">       System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Demo</span><span class="params">(<span class="keyword">int</span>...num )</span> </span>&#123;<span class="comment">//int...num为可变参数</span></span><br><span class="line">System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:num) &#123;<span class="comment">//使用增强for循环遍历数组 </span></span><br><span class="line">System.out.println(i+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();<span class="comment">//换行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增强for循环-VS-普通for循环"><a href="#增强for循环-VS-普通for循环" class="headerlink" title="增强for循环 VS 普通for循环"></a>增强for循环 VS 普通for循环</h3><ul><li>增强for循环和普通for循环的区别<ol><li>增强for循环必须有被遍历的目标（如集合或数组）。</li><li>普通for循环遍历数组的时候需要索引。</li><li>增强for循环不能获取下标，所以遍历数组时最好使用普通for循环。</li></ol></li><li>普通数组中使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增强for循环  </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> item : array) &#123;  </span><br><span class="line">  System.out.println(item);  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通for循环</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)  </span><br><span class="line">    System.out.println(array[i]);</span><br></pre></td></tr></table></figure><ul><li>二维数组中的使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增强for循环 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> arr[] : array2) &#123;  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> item : arr) &#123;  </span><br><span class="line">    System.out.println(item);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 普通for循环  </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array2.length; i++) &#123;  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array2[i].length; j++) &#123;  </span><br><span class="line">    System.out.println(array2[i][j]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>List中的使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增强for循环  </span></span><br><span class="line">  <span class="keyword">for</span> (String item : list)&#123;  </span><br><span class="line">  System.out.println(item);             </span><br><span class="line">  &#125;  </span><br><span class="line">                </span><br><span class="line">  <span class="comment">//普通for循环</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;  </span><br><span class="line">  System.out.println(list.get(i));  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><h3 id="输出两个int数中的最大值"><a href="#输出两个int数中的最大值" class="headerlink" title="输出两个int数中的最大值"></a>输出两个int数中的最大值</h3><p>用户从控制台接收两个整数，通过程序找出两个数中的最大值。控制台的交互效果如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/JOEL-T99/Pic//img/%E5%9B%BE%E7%89%873.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入两个整数：a，b（以空格隔开）&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;最大值为&quot;</span>+a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;最大值为&quot;</span>+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写三个数值的排序程序"><a href="#编写三个数值的排序程序" class="headerlink" title="编写三个数值的排序程序"></a>编写三个数值的排序程序</h3><p>使用程序为用户所录入的 3 个数值进行升序排列，并将排序后的结果输出到控制台。程序交互过程如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/JOEL-T99/Pic//img/%E5%9B%BE%E7%89%872.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入三个整数：a，b，c（以空格隔开）&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> c = sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;您输入的是：\n&quot;</span>+<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b+<span class="string">&quot;,c=&quot;</span>+c);</span><br><span class="line"><span class="keyword">if</span>(a&lt;b) &#123;</span><br><span class="line"><span class="keyword">if</span>(b&lt;c) &#123;System.out.println(<span class="string">&quot;升序排序后，结果为：&quot;</span>+<span class="string">&#x27;\r&#x27;</span>+<span class="string">&quot;c=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b+<span class="string">&quot;,a=&quot;</span>+c);&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;c) &#123;System.out.println(<span class="string">&quot;升序排序后，结果为：&quot;</span>+<span class="string">&#x27;\r&#x27;</span>+<span class="string">&quot;c=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+c+<span class="string">&quot;,a=&quot;</span>+b);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;System.out.println(<span class="string">&quot;升序排序后，结果为：&quot;</span>+<span class="string">&#x27;\r&#x27;</span>+<span class="string">&quot;c=&quot;</span>+c+<span class="string">&quot;,b=&quot;</span>+a+<span class="string">&quot;,a=&quot;</span>+b);&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(b&lt;c) &#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;c) &#123;System.out.println(<span class="string">&quot;升序排序后，结果为：&quot;</span>+<span class="string">&#x27;\r&#x27;</span>+<span class="string">&quot;c=&quot;</span>+b+<span class="string">&quot;,b=&quot;</span>+a+<span class="string">&quot;,a=&quot;</span>+c);&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;System.out.println(<span class="string">&quot;升序排序后，结果为：&quot;</span>+<span class="string">&#x27;\r&#x27;</span>+<span class="string">&quot;c=&quot;</span>+b+<span class="string">&quot;,b=&quot;</span>+c+<span class="string">&quot;,a=&quot;</span>+a);&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;System.out.println(<span class="string">&quot;升序排序后，结果为：&quot;</span>+<span class="string">&#x27;\r&#x27;</span>+<span class="string">&quot;c=&quot;</span>+c+<span class="string">&quot;,b=&quot;</span>+b+<span class="string">&quot;,a=&quot;</span>+a);&#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="编写程序判断某一个年份是否为闰年"><a href="#编写程序判断某一个年份是否为闰年" class="headerlink" title="编写程序判断某一个年份是否为闰年"></a>编写程序判断某一个年份是否为闰年</h3><p>本案例需要使用交互的方式判断某年是否为闰年：用户从控制台输入需要判断的年份值，由程序使用if-else判断该年是否为闰年，并将判断结果输出到控制台。程序交互过程如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/JOEL-T99/Pic//img/%E5%9B%BE%E7%89%87d4.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入年份（例如2012）&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line"><span class="keyword">if</span> (a%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; a%<span class="number">100</span>!=<span class="number">0</span> || a%<span class="number">400</span>==<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(a+<span class="string">&quot;是闰年&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;System.out.println(a+<span class="string">&quot;是平年&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数列求和"><a href="#数列求和" class="headerlink" title="数列求和"></a>数列求和</h3><p>有数列为：9，99，999，…，9999999999。要求使用程序计算此数列的和，并在控制台输出结果。交互效果如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/JOEL-T99/Pic//img/%E5%9B%BE%E7%89%875.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++) &#123;</span><br><span class="line">a = a*<span class="number">10</span> + <span class="number">9</span>;</span><br><span class="line">sum += a;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;9+99+999+...+9999999999=&quot;</span>+sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询数组最小值，并将数组扩容形成新数组"><a href="#查询数组最小值，并将数组扩容形成新数组" class="headerlink" title="查询数组最小值，并将数组扩容形成新数组"></a>查询数组最小值，并将数组扩容形成新数组</h3><p>创建程序，实现查询数组中最小值的功能，并将最小值放入数组的第一位。需求为：创建一个长度为 10 的数组，数组内放置 10 个 0 到 99 之间（包含0，包含99）的随机整数作为数组元素，要求查询出数组中的最小值，并打印显示在界面上。然后，将数组的长度扩容为 11，将查询到的数组最小值记载为数组的第一个元素，并打印扩容后的数组的内容。界面效果如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/JOEL-T99/Pic//img/%E5%9B%BE%E7%89%876.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">47</span>,<span class="number">66</span>,<span class="number">27</span>,<span class="number">74</span>,<span class="number">24</span>,<span class="number">85</span>,<span class="number">46</span>,<span class="number">97</span>,<span class="number">45</span>,<span class="number">39</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;数组中的数据为：[47,66,27,74,24,85,46,97,45,39]&quot;</span>);</span><br><span class="line"><span class="comment">//筛选最小值</span></span><br><span class="line"><span class="keyword">int</span> min = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:a) &#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;min) &#123;</span><br><span class="line">min = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Arrays.sort(a);</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;最小值是：&quot;+a[0]);</span></span><br><span class="line">System.out.println(<span class="string">&quot;最小值是：&quot;</span>+min);</span><br><span class="line"><span class="comment">//利用Arrays.copyOf扩容，将长度加一的数组替换为新数组</span></span><br><span class="line"><span class="keyword">int</span>[] a2 = Arrays.copyOf(a,a.length+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span>[] a3 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>];</span><br><span class="line">a3[<span class="number">0</span>] = min;</span><br><span class="line">System.arraycopy(a,<span class="number">0</span>, a3,<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a3.length;i++)&#123;</span><br><span class="line">System.out.println(a3[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;数组中的数据为：[24，47,66,27,74,24,85,46,97,45,39]&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL（二）查询操作</title>
    <link href="http://yoursite.com/2021/01/12/MySQL%EF%BC%88%E4%BA%8C%EF%BC%89%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2021/01/12/MySQL%EF%BC%88%E4%BA%8C%EF%BC%89%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/</id>
    <published>2021-01-12T12:12:04.000Z</published>
    <updated>2021-01-16T07:25:09.500Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h1><ul><li>基本格式</li></ul><p><code>select  [ all | distinct ]  selection_list </code></p><p><code>from table_score </code></p><p><code>[where search_condition]</code></p><p><code>[group by grouping_colums] [with rollup]</code></p><p><code>[having search_condition]</code></p><p><code>[order by order_expression [asc \ desc]]</code>    –asc升    序、desc降序</p><p><code>[limit count]</code>    –限制查询的输出结果行</p><p>&nbsp;</p><h3 id="SQL-select-expr"><a href="#SQL-select-expr" class="headerlink" title="SQL select_expr"></a>SQL select_expr</h3><ul><li><p><strong>为字段取别名</strong></p><p><code>select 项的名称 as 别名</code></p></li><li><p><strong>使用谓语过滤记录</strong></p><p>利用<code>distinct</code>可过滤重复的行</p><p><code>select distinct column</code></p></li></ul><p>&nbsp;</p><h3 id="SQL-where"><a href="#SQL-where" class="headerlink" title="SQL where"></a>SQL where</h3><p>通过 <code>where</code> 子句可以实现很多复杂的条件查询，需要配合运算符确定查询条件</p><p>语法：<code>SELECT 列名称 FROM 表名称 WHERE 列 运算符 值</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询表student中入学成绩在800分以上的学生的学号、姓名和电话信息。</span><br><span class="line">select studentno, sname, phone</span><br><span class="line">from student</span><br><span class="line">where entrance &gt; 800;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><ul><li><p><strong>带 in 关键字的查询</strong></p><p><code>in</code> 关键字可以判断某个字段的值是否在指定的集合中</p><p>使用 <code>in</code> 搜索条件相当于用 <code>or</code> 连接两个比较条件</p><p>如 <code>x in(10,15)</code> 相当于表达式 <code>x=10 or x=15</code></p><p>也可使用 <code>not in</code> 查询不在范围内的数据</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询学号分别为123、456和789的学生学号、课程号、平时成绩、期末成绩。</span><br><span class="line">select studentno, courseno, daily, final</span><br><span class="line">from score</span><br><span class="line">where studentno in (&#39;123&#39;,&#39;456&#39;,&#39;789&#39;);</span><br></pre></td></tr></table></figure><p>&nbsp;</p><ul><li><p><strong>带 between and 的范围查询</strong></p><p>使用 <code>between</code> 搜索条件相当于用 <code>and</code> 连接两个比较条件</p><p>如 <code>x between 10 and 27</code> 相当于表达式 <code>x&gt;=10 and x&lt;=27</code></p><p>检索条件指定排除某个范围的值，一般可以用  关键字来实现</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询选修课程号为c05109的学生学号和期末成绩，并且要求平时成绩在80～95分。</span><br><span class="line">select studentno, final</span><br><span class="line">from score</span><br><span class="line">where courseno&#x3D;&#39;c05109&#39;and daily between 80 and 95;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><ul><li><p><strong>带 like 的字符匹配查询</strong></p><p>like 可以用于实现模糊查询，包含两种通配符 <code>%</code> 和 <code>_</code></p><p><code>%</code> 可以匹配一个或多个字符，可以代表任意长度的字符串，长度可以为0</p><p><code>_</code> 只匹配一个字符</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#在student表中显示所有姓何或者姓韩的学生的姓名、生日和Email。</span><br><span class="line">select sname, birthdate, Email</span><br><span class="line">from student</span><br><span class="line">where sname like &#39;何%&#39; or sname like &#39;韩%&#39;;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><ul><li><p><strong>用 is null 关键字查询空值</strong></p><p>一个字段值是空值或者不是空值，要么表示为 <code>is null</code> 或 <code>is not null</code> ；不能表示为 <code>=null</code> 或 <code>&lt;&gt;null</code></p><p>如果写成 <code>字段=null</code> 或 <code>字段&lt;&gt;null</code> ，系统的运行结果都直接处理为 <code>null</code> 值，按照 <code>false</code> 处理而不报错</p><p>通用格式 <code>column is [not] null</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#在se_score表中添加成绩字段score,查询se_score表中学生的学号、课程号和成绩。</span><br><span class="line">alter table se_coruse</span><br><span class="line">add score float(3,1) null after teacherno;</span><br><span class="line"></span><br><span class="line">select studentno, courseno, teacherno, score</span><br><span class="line">from se_course</span><br><span class="line">where score is null;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><ul><li><p><strong>带 and 的多条件查询</strong></p><p>利用指定的条件选择结果集中的行</p><p><u>条件表达式中字符型和日期类型值要放到单引号中</u></p><p><u>并列的条件不能出现逗号</u></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#在score表中显示期中成绩高于90分，期末成绩高于85分的学生学号、课程号和成绩。</span><br><span class="line">select studentno, courseno, daily, final</span><br><span class="line">from score</span><br><span class="line">where daily&gt;&#x3D;90 and final&gt;&#x3D;85;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><ul><li><p><strong>带 or 的多条件查询</strong></p><p><code>or</code> 可以用来连接两个条件表达式</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询计算机学院的具有高级职称教师的教师号、学生和从事的专业。</span><br><span class="line">select teacherno, tname, major</span><br><span class="line">from teacher</span><br><span class="line">where department&#x3D;&#39;计算机学院&#39; and (prof&#x3D;&#39;副教授&#39; or prof&#x3D;&#39;教授&#39;);</span><br></pre></td></tr></table></figure><p>&nbsp;</p><div class="note info simple"><p>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。</p><p>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#子查询返回一个值，标量子查询</span><br><span class="line">#不需要给子查询取别名</span><br><span class="line"></span><br><span class="line">#where子查询内的表，不能直接用以更新</span><br><span class="line">select * from tb where money &#x3D; (select max(money) from tb);</span><br><span class="line"></span><br><span class="line">#列子查询</span><br><span class="line">#如果子查询结果返回的是一列</span><br><span class="line">#使用 in 或 not in 完成查询</span><br><span class="line"></span><br><span class="line">#如果子查询返回数据，则返回1或0，常用于判断</span><br><span class="line">select column from t1 where exists (select * from t2);</span><br><span class="line"></span><br><span class="line">#行子查询</span><br><span class="line">#查询条件是一个行</span><br><span class="line">select * from t1 where (id,gender) in (select id, gender from t2);</span><br><span class="line">#行构造符</span><br><span class="line">#行构造符通常用于对能返回两个或两个以上列的子查询进行比较</span><br><span class="line">（col1, col2, ...）或 row (col1, col2, ...)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;</p><ul><li><p>特殊运算符</p><p><code>! = all</code>  相当于  <code>not in</code></p><p><code>= some()</code>  相当于 <code>in</code> 。 <code>any</code> 是 <code>some</code>的别名</p><p> <code>= some()</code> 不等同于 <code>not in</code> ，不等于其中某一个</p><p><code>all</code> 、<code>some</code> 可以配合其他运算符一起使用</p></li></ul><p>&nbsp;</p><h3 id="SQL-group-by-amp-having"><a href="#SQL-group-by-amp-having" class="headerlink" title="SQL group by &amp; having"></a>SQL group by &amp; having</h3><p><code>group by</code> 子句可以将查询结果按属性列或属性列组合在行的上方进行分组，每组在属性列或属性列组合上具有相同的聚合值。</p><p>将一列或多列定义成为一组，是组内所有的行在那些列中的数值相同。出现查询的 <code>select</code> 列表中的每一列都必须同时出现在 <code>group by</code> 子句中</p><p>&nbsp;</p><ul><li><p><strong>使用 group by 关键词来分组</strong></p><p>单独使用 <code>group by</code> 关键词，查询结果只显示每组的一条记录。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#利用 group by 子句对 score 表的数据分组，显示每个学生的学号和平均总评成绩。</span><br><span class="line">#avg函数用于求平均值，round函数用于对平均值的某位数据进行四舍五入。</span><br><span class="line">select student 学号, round(avg(daily*0.3 + final*0.7),2)as&#39;平均分&#39;</span><br><span class="line">from score</span><br><span class="line">group by studentno;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><ul><li><p><strong>group by 关键字与 group_concat() 函数一起使用</strong></p><p>可以将每个组中的所有字段都显示出来。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#对 score 表中的 studentno 字段进行分组查询，可以查看选该门课程的学生学号。</span><br><span class="line">select courseno 课程号, group_concat(studentno) 选课学生学号</span><br><span class="line">from score</span><br><span class="line">group by courseno;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><ul><li><p><strong>group by 关键字与 having 一起使用</strong></p><p><code>having</code> 子句通常与 <code>group by</code> 子句结合使用，<code>having</code> 子句指定在应用 <code>where</code> 子句的筛选后要进一步应用的筛选。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询选课在3门以上且各门课程期末成绩均高于75分的学生的学号及其总成绩，查询结果按总成绩降序列出。</span><br><span class="line">select studentno 学号, sum(daily*0.3 + final*0.7) as &#39;总分&#39;</span><br><span class="line">from score</span><br><span class="line">where final&gt;&#x3D;75</span><br><span class="line">group by studentno</span><br><span class="line">having count(*)&gt;&#x3D;3</span><br><span class="line">order by sum(daily*0.3 + final*0.7) desc;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="SQL-order-by"><a href="#SQL-order-by" class="headerlink" title="SQL order by"></a>SQL order by</h3><p>使用 order by 子句可以对查询的结果进行升序（asc）或降序（desc）排列。</p><p>事项和原则：</p><ol><li>默认情况下，结果集按照升序排列</li><li>order by 子句包含的列并不一定出现在选择的列表中</li><li>order by 子句可以通过制定列名、函数值和表达式的值进行排序</li><li>order by 子句不可以使用text、ntext或image类型的列</li><li>在order by 子句中可以同时出现多个排序项</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#在student表中查询高于850分的学生学号、姓名和入学成绩，并按照入学成的降序排列。</span><br><span class="line">select studentno 学号, sname 姓名, entrance 入学成绩</span><br><span class="line">from student</span><br><span class="line">where entrance &gt; 850</span><br><span class="line">order by entrance desc;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="SQL-limit"><a href="#SQL-limit" class="headerlink" title="SQL limit"></a>SQL limit</h3><p><code>limit</code> 是用来限制查询结果的数量的子句。可以指定查询结果从哪条记录开始显示，还可以指定一共显示多少条记录。<code>limit</code> 可以指定初始位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询score表中，期末成绩final高于85分的，按照平时成绩daily进行升序排列，从编号2开始，查询5条记录。</span><br><span class="line">select * from score</span><br><span class="line">where final&gt;85</span><br><span class="line">order by daily desc</span><br><span class="line">limit 2,5;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><p>&nbsp;</p><h1 id="聚合函数查询"><a href="#聚合函数查询" class="headerlink" title="聚合函数查询"></a>聚合函数查询</h1><p>MySQL常用的聚合函数包括 <code>count()、sum()、avg()、max()、min()</code> 等</p><p><code>count()</code> 用来统计数据的条数</p><p><code>sum()</code> 用来计算字段的值的总和</p><p><code>avg()</code> 用来计算字段的值的平均值</p><p><code>max()</code> 用来查询字段的最大值</p><p><code>min()</code> 用来查询字段的最小值</p><p>&nbsp;</p><h3 id="SQL-count"><a href="#SQL-count" class="headerlink" title="SQL count()"></a>SQL count()</h3><p><code>count()</code> 函数对于“*”以外的任何参数，返回所选择聚合中非null值的行的数目</p><p>对于参数“*”，返回选择聚合所有行的数目，包含null值的行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#通过查询求18级学生的总数。</span><br><span class="line">select count(studentno) as &#39;18级学生数&#39;</span><br><span class="line">from student</span><br><span class="line">where substring(studentno,1,2)&#x3D;&#39;18&#39;;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="SQL-sum-ayg"><a href="#SQL-sum-ayg" class="headerlink" title="SQL sum() / ayg()"></a>SQL sum() / ayg()</h3><p><code>sum()</code> 函数可以求出表中某个字段取值的总和</p><p><code>avg()</code> 函数可以求出表中某个字段去值的平均值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询score表中学生的期末总成绩大于270分的学生学号、总成绩及平均成绩。</span><br><span class="line">select studentno 学号, sum(final) 总分, avg(final) 平均分</span><br><span class="line">from score</span><br><span class="line">group by studentno</span><br><span class="line">having sum(final) &gt; 270</span><br><span class="line">order by studentno;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="SQL-max-min"><a href="#SQL-max-min" class="headerlink" title="SQL max() / min()"></a>SQL max() / min()</h3><p><code>max()</code> 函数可以求出表中某个字段取值的最大值</p><p><code>min()</code> 函数可以求出表中某个字段取值的最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询选修课程号为c05109的课程的期末最高分、最低分及之间相差的分数。</span><br><span class="line">select max(final) 最高分, min(final)最低分 , max(final)-min(final) as 分数</span><br><span class="line">from score</span><br><span class="line">where course&#x3D;&#39;c05109&#39;;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="SQL-with-rollup"><a href="#SQL-with-rollup" class="headerlink" title="SQL with rollup"></a>SQL with rollup</h3><p>可以在分组统计数据的基础上在进行相同的总日统计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询score表中每一门课的期末平均成绩和所成绩的平均值。</span><br><span class="line">select course 课程号, avy(final) 课程期末平均分</span><br><span class="line">from score</span><br><span class="line">group by courseno with rollup;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><p>&nbsp;</p><h1 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h1><p>被显示定义的与连接有关的关键字如下：</p><ol><li><code>inner join</code>：内连接，结果只包含满足条件的列</li><li><code>left outer join</code>：左外连接，结果只包含满足条件的行及左侧表中的全部行</li><li><code>right outer join</code>：右外连接，结果只包含满足条件的行及右侧表中的全部行</li><li><code>cross join</code>：结果只包含两个表中的所有行的组合，指明两表间的笛卡尔积操作</li></ol><p>&nbsp;</p><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>内连接查询是通过比较数据源表间共享列的值，从多个源表检索符合条件的行的操作。可以使用等号运算符的连接，也可以连接两个不相等的列的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询选修课程号为c05109的学生的学号、姓名和期末成绩。</span><br><span class="line">select student.studentno, sname, final</span><br><span class="line">from student inner join score</span><br><span class="line">on student.studentno &#x3D; score.studentno</span><br><span class="line">where score.courseno &#x3D; &#39;c05109&#39;</span><br><span class="line"></span><br><span class="line">#方法二：</span><br><span class="line">select student.studentno, sname, final</span><br><span class="line">from student, score</span><br><span class="line">where student.studentno&#x3D;score.studentno and score.course &#x3D; &#39;c05109&#39;;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h3><p>左外连接是指将左表中的数据分别与右表中的每条数据进行连接和结合，返回的结果除内连接的数据外，还包括左表中不符合条件的数据，并在右表的相应列中添加 <code>null</code> 值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#在mysqltest数据库中利用左外连接方式查询学生的学号、姓名、平时成绩和期末成绩。</span><br><span class="line">use mysqltest</span><br><span class="line">select student.studentno, sname, daily, final</span><br><span class="line">from student left join score</span><br><span class="line">on student.studentno &#x3D; score.studentno;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h3><p>右外连接包含 <code>join</code> 子句中最右侧表的所有行。如果右侧表中的行与左侧表中的行不匹配，将为结果集中来自左侧表的所有列分配 <code>null</code> 值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#利用右外连接方式查询教师的排课情况。</span><br><span class="line">select teacher.teacherno, tname, major, course</span><br><span class="line">from teacher right join teach_course</span><br><span class="line">on teacher.teacherno&#x3D;teacher_course.teacherno;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h3><p>交叉连接是在没有 <code>where</code> 子句的情况下，产生的表的笛卡尔积。两个表作交叉连接时，结果集大小为二者行数之积。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#显示student表和score表的笛卡尔积。</span><br><span class="line">select student.student, sname, score</span><br><span class="line">from student corss join score;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="连接多个表"><a href="#连接多个表" class="headerlink" title="连接多个表"></a>连接多个表</h3><p>对于三个以上关系表的连接查询，一般遵循下列规则：</p><p><u>连接n个表至少需要n-1个连接条件，比避免笛卡尔积的出现</u></p><p><u>为了缩小结果集，采用多余n-1个连接条件或使用其他条件都是允许的</u></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询18级学生的学号、姓名、课程号、期末成绩及学分。</span><br><span class="line">select student.studentno, sname, cname, final, round(period&#x2F;16,1)</span><br><span class="line">from score join student on student.studentno&#x3D;score.studentno</span><br><span class="line">join course on score.course&#x3D;course.courseno</span><br><span class="line">where substring(student.studentno,1,2)&#x3D;&#39;18&#39;;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="合并多个结果集"><a href="#合并多个结果集" class="headerlink" title="合并多个结果集"></a>合并多个结果集</h3><p><code>union</code> 操作可以将多个 <code>select</code> 语句的返回结果组合到一个结果集中。</p><p>使用 <code>union</code> 合并两个查询结果集时，所有查询中的列数和列的顺序必须相同且数据类型必须兼容。</p><p>语法格式如下：</p><p><code>select_statement union [all] select_statement</code></p><p>格式参考说明：</p><ol><li>select_statement：select 语句</li><li>union：指定组合多个结果集并返回为单个结果集</li><li>all：将所有行合并到结果中，包括重复的行。如果不指定，将删除重复的行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#在mysqltest数据库中利用student表创建student01，将student01和student表的部分查询结果集合并。</span><br><span class="line">create table student01 as</span><br><span class="line">select studentno, sname, phone from teaching.student;</span><br><span class="line"></span><br><span class="line">select studentno, sname, phone from student01</span><br><span class="line">where phone like &#39;%131%&#39;</span><br><span class="line">union</span><br><span class="line">select studentno, sname, phone from teaching.studnet</span><br><span class="line">where phone like &#39;%132%&#39;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#将多个表的字段进行连接，可以指定连接条件</span><br><span class="line"></span><br><span class="line">#内连接 （inner join）</span><br><span class="line">#默认就是内连接，可省略inner</span><br><span class="line">#只有数据存在时才能发送连接，即连接结果不能出现空行</span><br><span class="line">#on 表示连接条件，其表达式于where类似，也可以省略条件（表示条件永远为真）</span><br><span class="line">#也可使用where表示连接条件</span><br><span class="line">#如果使用 using ，需字段名相同  </span><br><span class="line">using (&#96;字段名&#96;);</span><br><span class="line"></span><br><span class="line">#交叉连接 （cross join）</span><br><span class="line">#没有条件的连接</span><br><span class="line">select * from tb1 cross join tb2;</span><br><span class="line"></span><br><span class="line">#外连接 （outer join）</span><br><span class="line">#如果数据不存在，也会出现在连接结果中</span><br><span class="line"></span><br><span class="line">#左外连接 （left join）</span><br><span class="line">#如果数据不存在，左表记录会出现，而右表为null填充</span><br><span class="line"></span><br><span class="line">#右外连接 （right join）</span><br><span class="line">#如果数据不存在，右表记录会出现，而左表为null填充</span><br><span class="line"></span><br><span class="line">#自然连接 （natural join）</span><br><span class="line">#自动判断连接条件完成连接</span><br><span class="line">#相当于省略了using，会自动查找相同字段</span><br><span class="line">natural join;</span><br><span class="line">natural left join;</span><br><span class="line">natural right join;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><p>&nbsp;</p><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><ol><li><p>子查询的执行过程</p><p>MySQL对嵌套查询的处理过程是从内层向外层处理，即先处理最内层的子查询,然后把查询的结果用于其外查询的查询条件，再层层向外求解,最后得出查询结果。</p></li><li><p>子查询连接的关系</p><p>一般情况下，包含子查询的查询语句可以写成连接查询的方式。因此，通过子查询也可以实现多表之间的查询。在有些方面，多表连接的性能要优于子查询，原因是连接不需要查询优化器执行排序等额外的操作。</p></li><li><p>子查询中的常见运</p><p>子查询中可以包括 <code>in</code>、<code>not in</code>、<code>any</code>、<code>all exists</code>、<code>not exists</code> 等逻辑运算符，也可以包含比较运算符，如 <code>“=”</code> <code>“!=”</code> <code>“&gt;”</code> 和 <code>“&lt;”</code> 等。</p></li><li><p>子查询的类型：</p><p>● 返回一个表的子查询是表子查询。<br>● 返回带有一个或多个值的一行的子查询是行子查询。<br>● 返回一行或多行，但每行上只有一个值的是列子查询。<br>● 只返回一个值的是标量子查询。从定义上讲,每个标量子查询都是一个列子查询和行子查询。</p></li><li><p>使用子查询时应该注意如下的事项：</p><p>● 子查询需要用括号括起来。子查询中也可以再包含子查询，嵌套可以多至32层。</p><p>● 当需要返回一个值或一个值列表时,可以利用子查询代替一个表达式。也可以利用子查询返回含有多个列的结果集替代表或连接操作相同的功能。<br>● 子查询不能够检索数据类型为 <code>varchar ( max)</code>、<code>nvarchar( max)</code> 和 <code>varbinary( max)</code> 的列。<br>● 子查询使用 <code>order by</code> 时，只能在外层使用，不能在内层使用。</p></li></ol><p>&nbsp;</p><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>在MySQL语句中，可以把子查询的结果当成一个普通的表达式来看待，<u>用在其外查询的选择条件中</u>。此时子查询必须返回一个值或一个单个列值列表，此时的子查询可以替换 <code>where</code> 子句中包含 <code>in</code> 关键词的表达式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询学号为18125121107的学生的入学成绩、所有学生的平均入学成绩及该学生成绩与所有学生的平均入学成绩的差。</span><br><span class="line">select studentno, sname, entrance</span><br><span class="line">(select avg(ectrance) from student) 平均成绩,</span><br><span class="line">ectrance - (select avg(ectrance) from student) 分差</span><br><span class="line">from student</span><br><span class="line">where studentno&#x3D;&#39;18125121107&#39;;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="派生表"><a href="#派生表" class="headerlink" title="派生表"></a>派生表</h3><p>利用子查询生成一个派生表，用于替代 <code>from</code> 子句中的数据源表，派生表可以定义一个别名，即子查询的结果集可以作为外层查询的源表。实际上是在 <code>from</code> 子句中使用子查询作为派生表数据源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询期末成绩高于85分、总评成绩高于90分的学生的学号、课程号和成绩</span><br><span class="line">select TT.student 学号, TT.courseno 课程号, TT.final*0.8+TT.daily*0.2 总评</span><br><span class="line">from (select * from score where final&gt;85) as TT</span><br><span class="line">where TT.final*0.8+TT.daily*0.2 &gt; 90;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="where-子查询"><a href="#where-子查询" class="headerlink" title="where 子查询"></a>where 子查询</h3><p><code>where</code> 语句中的子查询实际上是将子查询的结果作为该语句条件中的一部分，然后利用这个条件过滤本层查询的数据。</p><p>&nbsp;</p><ul><li><p>比较运算符</p><p>比较运算符包括 <code>=、!=、&gt;、&gt;=、&lt;、&lt;=</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询期末成绩比选修课程平均期末成绩低的学生的学号、课程号和期末成绩</span><br><span class="line">select studentno, course, final</span><br><span class="line">from score a</span><br><span class="line">where final &lt;(select avg(final)</span><br><span class="line">             from score b</span><br><span class="line">             where a.courseno&#x3D;b.courseno</span><br><span class="line">             group by courseno);</span><br></pre></td></tr></table></figure><p>&nbsp;</p><ul><li><p>in / not in</p><p><code>in</code> 运算符可以检测结果集中是否存在某个特定的值，如果检测成功就执行外部的查询。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#获取期末成绩中含有高于93分的学生的学号、姓名、电话和Emial</span><br><span class="line">select studentno, sname, phone, Emial</span><br><span class="line">from student</span><br><span class="line">where studentno in (select studentno</span><br><span class="line">                   from score</span><br><span class="line">                   where final&gt;93);</span><br></pre></td></tr></table></figure><p>&nbsp;</p><ul><li><p>exists / not exists</p><p>使用 <code>exists</code> 关键字时，内层查询语句不返回查询的记录，而是返回一个真假值。</p><p>当返回值为 <code>true</code> 时，外层查询语句将进行查询；当返回 <code>false</code> 时，外层查询语句不进行查询或查询不出任何记录。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询student表中是否存在2001年12月12日以后出生的学生，如果存在，输出学生的学号、姓名、生日和电话</span><br><span class="line">select studentno, sname, birthdate, phone</span><br><span class="line">from student</span><br><span class="line">where exists (select *</span><br><span class="line">             from student</span><br><span class="line">             where birthdate&lt;&#39;2001-12-12&#39;);</span><br></pre></td></tr></table></figure><p>&nbsp;</p><ul><li><p>对比较算法进行限制</p><p><code>all</code>、<code>some</code>和<code>any</code>运算都是比较运算的进一步限制。使用 <code>all</code> 时，当所有值都满足比较的关系时才返回 <code>true</code>。<code>some</code> 或 <code>any</code> 时同义词，表示表达式只要与子查询结果集中的某个值满足比较的关系时就返回 <code>true</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查找score表中所有比c05109课程期末成绩都高的学号、姓名、电话和期末成绩</span><br><span class="line">select student.studentno, sname, phone, final</span><br><span class="line">from score inner join student</span><br><span class="line">on score.studentno &#x3D; student.studentno</span><br><span class="line">where final&gt;all (select final</span><br><span class="line">                from score</span><br><span class="line">                where course&#x3D;&#39;c05109&#39;);</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="增、更、删"><a href="#增、更、删" class="headerlink" title="增、更、删"></a>增、更、删</h3><p>利用子查询修改数据，就是利用一个嵌套在<code>insert</code>、<code>update</code>或 <code>delete</code> 语句的子查询成批地增加、更新和删除表中的数据。</p><ul><li><p>插入</p><p><code>insert</code> 语句中的 <code>select</code> 子句可用于讲一个或多个其他的表或视图的值添加到表中。使用 <code>select</code> 子查询可同时插入多行。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#将student表中2001年以后出生的学生记录添加到student02表中。</span><br><span class="line">insert into mysqltest.student02 (select * from student</span><br><span class="line">                                where birthdaye &gt;&#x3D; &#39;2001-12-31&#39;);</span><br></pre></td></tr></table></figure><p>&nbsp;</p><ul><li><p>更新</p><p><code>update</code> 语句中的 <code>select</code> 子查询可用于将一个或多个其他的表或视图的值进行更新。使用 <code>select</code> 子查询可同时更新多行数据。实际上是通过将子查询的结果作为更新条件表达式中的一部分。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#将student表中入学成绩低于800分的所有学生的期末成绩增加5%</span><br><span class="line">update score</span><br><span class="line">set final&#x3D;final*1.5</span><br><span class="line">where studentno in (select studentno from student</span><br><span class="line">                   where entrance &lt; 800);</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><ul><li><p>字符 / 字符串开头</p><p>使用字符<code>“^”</code>可以匹配以特定字符或字符串开头的记录。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询student表中姓“赵”的学生的部分信息</span><br><span class="line">select studentno, sname</span><br><span class="line">from student</span><br><span class="line">where sname regexp &#39;^赵&#39;;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><ul><li><p>字符 / 字符串结尾</p><p>使用字符<code>“$”</code>可以匹配以特定字符或字符串结尾的记录。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询student表中学生电话号码尾数为5的学生的部分信息</span><br><span class="line">select studentno, sname, phone</span><br><span class="line">from student</span><br><span class="line">where phone regexp &#39;5$&#39;;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><ul><li><p>符号“.”</p><p>用正则表达式来查询时，可以使用<code>“.”</code>来替代字符串中的任意一个字符。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询student表中学生姓名以“赵”开头，以“江”结尾的学生的部分信息</span><br><span class="line">select studentno, sname</span><br><span class="line">from student</span><br><span class="line">where phone regexp &#39;^赵..江$&#39;;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><ul><li><p>匹配指定字符串</p><p>正则表达式可以匹配字符串。如果指定多个字符串，需要用符号<code>“|”</code>隔开，只要匹配这些字符中的任意一个即可。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 示例 ##################################################################</span><br><span class="line">#查询学生电话号码出现131或132数字的学生信息</span><br><span class="line">select studentno, sname</span><br><span class="line">from student</span><br><span class="line">where phont regexp &#39;131 | 132&#39;;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL（一）基础命令</title>
    <link href="http://yoursite.com/2021/01/11/MySQL%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2021/01/11/MySQL%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</id>
    <published>2021-01-11T10:52:14.000Z</published>
    <updated>2021-01-16T02:06:58.620Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL的使用"><a href="#MySQL的使用" class="headerlink" title="MySQL的使用"></a>MySQL的使用</h1><ul><li><p>启动MySQL：<code>net start mysql</code></p></li><li><p>连接服务器：<code>mysql -h 地址 -P 端口 -u 用户名 -p 密码</code></p></li><li><p>CMD打开方式：<code>mysql -u root -p</code></p><p>&nbsp;</p><p>&nbsp;</p></li></ul><h1 id="MySQL的基本命令"><a href="#MySQL的基本命令" class="headerlink" title="MySQL的基本命令"></a>MySQL的基本命令</h1><p>&nbsp;</p><h3 id="数据库命令"><a href="#数据库命令" class="headerlink" title="数据库命令"></a>数据库命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#查看已有数据库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">#查看当前数据库</span><br><span class="line">select database();</span><br><span class="line"></span><br><span class="line">#显示当前时间、用户名、数据库版本</span><br><span class="line">select now(), user(), version();</span><br><span class="line"></span><br><span class="line">#查看当前数据库信息</span><br><span class="line">show create database &#96;数据库名&#96;;</span><br><span class="line"></span><br><span class="line">#创建数据库</span><br><span class="line">create database [if not exists] &#96;数据库名&#96; &#96;数据库选项&#96;;</span><br><span class="line">数据库选项：</span><br><span class="line">charset set charset_name</span><br><span class="line">collate collation_name</span><br><span class="line"></span><br><span class="line">#删除数据库</span><br><span class="line">drop database [if exists] &#96;数据库名&#96;;</span><br><span class="line"></span><br><span class="line">#修改数据库信息</span><br><span class="line">alter database &#96;库名&#96; &#96;选项信息&#96;;</span><br><span class="line"></span><br><span class="line">#使用数据库</span><br><span class="line">use &#96;数据库名&#96;;</span><br><span class="line"></span><br><span class="line">#查看数据库存储引擎</span><br><span class="line">show engines;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><p>&nbsp;</p><h3 id="表命令"><a href="#表命令" class="headerlink" title="表命令"></a>表命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">#查看所有表</span><br><span class="line">show tables;</span><br><span class="line">show table from &#96;表名&#96;;</span><br><span class="line"></span><br><span class="line">#查看表结构</span><br><span class="line">#反单引（&#96;&#96;）标注该关键字是表或字段</span><br><span class="line">#查看表的结构语句</span><br><span class="line">describe &#96;表名&#96;;</span><br><span class="line">#查看表的详细结构语句</span><br><span class="line">show create table|desc|describe|explain &#96;表名&#96;|show columns from &#96;表名&#96;; </span><br><span class="line">show tables status [from db_name];</span><br><span class="line"></span><br><span class="line">#创建表</span><br><span class="line">create [temporary] table [if not exists] &#96;[库名].表名&#96;(</span><br><span class="line">&#96;字段1&#96; &#96;列类型[属性][索引][注释]&#96;,</span><br><span class="line">&#96;字段2&#96; &#96;列类型[属性][索引][注释]&#96; </span><br><span class="line">)charset &#x3D;utf8;</span><br><span class="line">temporary:临时表，会话结束时自动消失</span><br><span class="line"></span><br><span class="line">#删除表</span><br><span class="line">drop table [if exists] &#96;表名&#96;;</span><br><span class="line"></span><br><span class="line">#清空表数据</span><br><span class="line">truncate [table] &#96;表名&#96;;</span><br><span class="line"></span><br><span class="line">#修改表</span><br><span class="line">#修改表本身的选项</span><br><span class="line">alter table &#96;表名&#96; &#96;表的选项&#96;;</span><br><span class="line">#对表重命名</span><br><span class="line">rename table &#96;原表名&#96; to &#96;新表名&#96;;</span><br><span class="line">rename table &#96;原表名&#96; to &#96;库名.表名&#96;;  --可将表移动到另一个数据库</span><br><span class="line">#修改表的字段结构</span><br><span class="line">alter table &#96;表名&#96; &#96;操作名&#96;;</span><br><span class="line">#操作名</span><br><span class="line">add [column] &#96;字段名&#96;;  --增加字段</span><br><span class="line">after &#96;字段名&#96;; --表示增加在该字段后面</span><br><span class="line">first &#96;字段名&#96;; --表示增加在第一个</span><br><span class="line">add primary key (&#96;字段名); --创建主键</span><br><span class="line">add unique [&#96;索引名&#96;] (&#96;字段名&#96;); --创建唯一索引</span><br><span class="line">add index [&#96;索引名&#96;](&#96;字段名&#96;); --创建普通索引</span><br><span class="line">drop [column] &#96;字段名&#96;; --删除字段</span><br><span class="line">drop primary key; --删除主键</span><br><span class="line">drop index &#96;索引名&#96;; --删除索引</span><br><span class="line">drop foreign key &#96;外键&#96;; --删除外键</span><br><span class="line">modify [column] &#96;字段名&#96; &#96;字段属性&#96;; --支持对字段属性进行修改，不能修改字段名（原属性需写上）</span><br><span class="line">change [column] &#96;原字段名&#96; &#96;新字段名&#96; &#96;字段属性&#96;; --支持对字段名修改</span><br><span class="line"></span><br><span class="line"># 示例 ##################################################################</span><br><span class="line">#在邮箱后添加地址段</span><br><span class="line">add address varchar(200) not null after Emial</span><br><span class="line"></span><br><span class="line"># 示例 ##################################################################</span><br><span class="line">#创建学生表</span><br><span class="line">#comment为注释，default为默认值</span><br><span class="line">create table if not exists student(</span><br><span class="line">stuNo int(4) primary key comment &#39;...&#39;,</span><br><span class="line">stuName varchar(20) not null,</span><br><span class="line">stuSex char(2) not null,</span><br><span class="line">stuAge int(3) not null,</span><br><span class="line">stuAddress varchar(200) default &#39;...&#39;,</span><br><span class="line">gradeId int(4) not null</span><br><span class="line">)CHARSET &#x3D;utf8;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><ul><li>列类型分类</li></ul><table><thead><tr><th align="center">类型</th><th align="center">说明</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">标准整数</td><td align="center">无</td></tr><tr><td align="center">char[(M)]</td><td align="center">固定长度字符串</td><td align="center">0&lt;=M&lt;=255</td></tr><tr><td align="center">varchar[(M)]</td><td align="center">可变字符串</td><td align="center">0&lt;=M&lt;=65535</td></tr><tr><td align="center">datatime</td><td align="center">YY-MM-DD hh:mm:ss</td><td align="center">23:59:59</td></tr></tbody></table><p>&nbsp;</p><p>&nbsp;</p><h3 id="数据命令"><a href="#数据命令" class="headerlink" title="数据命令"></a>数据命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#增加数据</span><br><span class="line"># insert 与 replace 完全一样，可互换</span><br><span class="line">insert into &#96;数据库名.表名&#96; (&#96;字段名&#96;) values (&#96;值&#96;);  --若全插入，可省略字段名</span><br><span class="line">insert into &#96;表名&#96; set &#96;字段名&#96;&#x3D;&#96;值&#96;;</span><br><span class="line">#利用 local data 语句将数据装入数据库表中</span><br><span class="line">local data local infile &#96;地址、文件名&#96; into table &#96;表名&#96;;</span><br><span class="line"></span><br><span class="line">#删除数据</span><br><span class="line">delete from &#96;表名&#96;[&#96;删除条件字句&#96;]; --没有条件语句，将全部删除</span><br><span class="line"></span><br><span class="line">#更改数据</span><br><span class="line">update &#96;表名&#96; set &#96;字段名&#96;&#x3D;&#96;新值&#96;;</span><br><span class="line"></span><br><span class="line">#查找数据</span><br><span class="line">select &#96;字段列表&#96; from &#96;表名&#96;[&#96;其他字句&#96;];</span><br></pre></td></tr></table></figure><p>&nbsp;</p><hr><div align="center">❤️&nbspEND&nbsp❤️</div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Linux（九）服务器配置</title>
    <link href="http://yoursite.com/2020/11/26/Linux%EF%BC%88%E4%B9%9D%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/11/26/Linux%EF%BC%88%E4%B9%9D%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2020-11-26T04:07:27.000Z</published>
    <updated>2021-01-11T10:53:55.005Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hexo &amp; Typora Tabs使用</title>
    <link href="http://yoursite.com/2020/11/21/Hexo-Typora-Tabs%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/11/21/Hexo-Typora-Tabs%E4%BD%BF%E7%94%A8/</id>
    <published>2020-11-21T04:35:22.000Z</published>
    <updated>2020-11-21T04:53:13.889Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>语法格式：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab [Tab caption] [@icon] --&gt;</span></span></span><br><span class="line">Any content (support inline tags too).</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line"><span class="code">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.</span></span><br><span class="line"><span class="code">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span></span><br><span class="line"><span class="code">                Only for current url of post/page must be unique!</span></span><br><span class="line"><span class="code">[index]       : Index number of active tab.</span></span><br><span class="line"><span class="code">                If not specified, first tab (1) will be selected.</span></span><br><span class="line"><span class="code">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[Tab caption] : Caption of current tab.</span></span><br><span class="line"><span class="code">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span></span><br><span class="line"><span class="code">                If not caption specified, but specified icon, caption will empty.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[@icon]       : FontAwesome icon name (full-name, look like &#x27;fas fa-font&#x27;)</span></span><br><span class="line"><span class="code">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab caption@icon&#x27;.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
    <category term="Typora" scheme="http://yoursite.com/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>Linux（八）进程管理</title>
    <link href="http://yoursite.com/2020/11/20/Linux%EF%BC%88%E5%85%AB%EF%BC%89%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2020/11/20/Linux%EF%BC%88%E5%85%AB%EF%BC%89%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</id>
    <published>2020-11-20T05:12:52.000Z</published>
    <updated>2020-11-20T05:13:45.686Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
